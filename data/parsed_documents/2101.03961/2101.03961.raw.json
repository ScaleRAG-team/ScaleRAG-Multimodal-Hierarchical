{
  "title": null,
  "authors": [],
  "source_path": "../data/pdf/2101.03961.pdf",
  "page_count": 40,
  "processed_pages": [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40
  ],
  "counts": {
    "texts": 741,
    "pictures": 0,
    "tables": 54
  },
  "stats_per_page": [
    {
      "page": 1,
      "text_blocks": 15,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 2,
      "text_blocks": 18,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 3,
      "text_blocks": 37,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 4,
      "text_blocks": 12,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 5,
      "text_blocks": 29,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 6,
      "text_blocks": 23,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 3
    },
    {
      "page": 7,
      "text_blocks": 22,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 8,
      "text_blocks": 13,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 9,
      "text_blocks": 5,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 10,
      "text_blocks": 11,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 11,
      "text_blocks": 8,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 12,
      "text_blocks": 37,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 3
    },
    {
      "page": 13,
      "text_blocks": 21,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 14,
      "text_blocks": 35,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 15,
      "text_blocks": 7,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 16,
      "text_blocks": 9,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 17,
      "text_blocks": 8,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 18,
      "text_blocks": 10,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 19,
      "text_blocks": 131,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 20,
      "text_blocks": 9,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 21,
      "text_blocks": 18,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 22,
      "text_blocks": 10,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 23,
      "text_blocks": 9,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 24,
      "text_blocks": 5,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 25,
      "text_blocks": 5,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 26,
      "text_blocks": 10,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 27,
      "text_blocks": 11,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 28,
      "text_blocks": 27,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 29,
      "text_blocks": 9,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 30,
      "text_blocks": 20,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 31,
      "text_blocks": 12,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 32,
      "text_blocks": 23,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 33,
      "text_blocks": 11,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 34,
      "text_blocks": 23,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 35,
      "text_blocks": 16,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 36,
      "text_blocks": 17,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 37,
      "text_blocks": 15,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 38,
      "text_blocks": 15,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 39,
      "text_blocks": 16,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 40,
      "text_blocks": 9,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    }
  ],
  "texts": [
    {
      "page_no": 1,
      "bbox": [
        90.0,
        41.726131439208984,
        521.8756713867188,
        49.696231842041016
      ],
      "text": "Journal of Machine Learning Research 23 (2022) 1-40\nSubmitted 8/21; Revised 3/22; Published 4/22"
    },
    {
      "page_no": 1,
      "bbox": [
        96.33499908447266,
        101.56802368164062,
        515.846435546875,
        133.84622192382812
      ],
      "text": "Switch Transformers: Scaling to Trillion Parameter Models\nwith Simple and Eﬃcient Sparsity"
    },
    {
      "page_no": 1,
      "bbox": [
        90.00000762939453,
        151.53189086914062,
        173.36212158203125,
        164.20635986328125
      ],
      "text": "William Fedus∗"
    },
    {
      "page_no": 1,
      "bbox": [
        90.00000762939453,
        163.8154754638672,
        206.82144165039062,
        173.778076171875
      ],
      "text": "liamfedus@google.com"
    },
    {
      "page_no": 1,
      "bbox": [
        90.00000762939453,
        181.1590118408203,
        162.92271423339844,
        193.87738037109375
      ],
      "text": "Barret Zoph∗"
    },
    {
      "page_no": 1,
      "bbox": [
        90.00001525878906,
        193.4864959716797,
        215.69810485839844,
        203.4490966796875
      ],
      "text": "barretzoph@google.com"
    },
    {
      "page_no": 1,
      "bbox": [
        90.00001525878906,
        214.23231506347656,
        269.6754455566406,
        252.03265380859375
      ],
      "text": "Noam Shazeer\nnoam@google.com\nGoogle, Mountain View, CA 94043, USA"
    },
    {
      "page_no": 1,
      "bbox": [
        90.00001525878906,
        277.2200622558594,
        200.71969604492188,
        287.1826477050781
      ],
      "text": "Editor: Alexander Clark"
    },
    {
      "page_no": 1,
      "bbox": [
        280.29803466796875,
        310.811767578125,
        331.72930908203125,
        322.7669677734375
      ],
      "text": "Abstract"
    },
    {
      "page_no": 1,
      "bbox": [
        109.92503356933594,
        327.612060546875,
        502.1527404785156,
        504.9474792480469
      ],
      "text": "In deep learning, models typically reuse the same parameters for all inputs.\nMixture\nof Experts (MoE) models defy this and instead select diﬀerent parameters for each in-\ncoming example. The result is a sparsely-activated model—with an outrageous number\nof parameters—but a constant computational cost. However, despite several notable suc-\ncesses of MoE, widespread adoption has been hindered by complexity, communication costs,\nand training instability. We address these with the introduction of the Switch Transformer.\nWe simplify the MoE routing algorithm and design intuitive improved models with reduced\ncommunication and computational costs. Our proposed training techniques mitigate the\ninstabilities, and we show large sparse models may be trained, for the ﬁrst time, with lower\nprecision (bﬂoat16) formats. We design models based oﬀT5-Base and T5-Large (Raﬀel\net al., 2019) to obtain up to 7x increases in pre-training speed with the same computational\nresources. These improvements extend into multilingual settings where we measure gains\nover the mT5-Base version across all 101 languages. Finally, we advance the current scale\nof language models by pre-training up to trillion parameter models on the “Colossal Clean\nCrawled Corpus”, and achieve a 4x speedup over the T5-XXL model.12"
    },
    {
      "page_no": 1,
      "bbox": [
        109.925048828125,
        508.1138916015625,
        502.0863952636719,
        530.031494140625
      ],
      "text": "Keywords: mixture-of-experts, natural language processing, sparsity, large-scale machine\nlearning, distributed computing"
    },
    {
      "page_no": 1,
      "bbox": [
        93.68099975585938,
        651.8529052734375,
        522.0026245117188,
        705.2515869140625
      ],
      "text": "∗. Equal contribution.\n1. JAX code for Switch Transformer and all model checkpoints are available at https://github.com/\ngoogle-research/t5x\n2. Tensorﬂow code for Switch Transformer is available at https://github.com/tensorflow/mesh/blob/\nmaster/mesh_tensorflow/transformer/moe.py"
    },
    {
      "page_no": 1,
      "bbox": [
        90.0,
        726.3739013671875,
        297.9103088378906,
        734.4912109375
      ],
      "text": "©2022 William Fedus, Barret Zoph and Noam Shazeer."
    },
    {
      "page_no": 1,
      "bbox": [
        90.0,
        740.9671020507812,
        517.0476684570312,
        758.7840576171875
      ],
      "text": "License: CC-BY 4.0, see https://creativecommons.org/licenses/by/4.0/. Attribution requirements are provided\nat http://jmlr.org/papers/v23/21-0998.html."
    },
    {
      "page_no": 1,
      "bbox": [
        10.940000534057617,
        214.47998046875,
        37.619998931884766,
        560.0
      ],
      "text": "arXiv:2101.03961v3  [cs.LG]  16 Jun 2022"
    },
    {
      "page_no": 2,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        92.47767639160156,
        142.5670166015625,
        104.43287658691406
      ],
      "text": "Contents"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        117.75325012207031,
        522.0003662109375,
        128.662353515625
      ],
      "text": "1\nIntroduction\n3"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        142.2112579345703,
        522.0986938476562,
        207.3173828125
      ],
      "text": "2\nSwitch Transformer\n4\n2.1\nSimplifying Sparse Routing\n. . . . . . . . . . . . . . . . . . . . . . . . . . .\n5\n2.2\nEﬃcient Sparse Routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n6\n2.3\nPutting It All Together: The Switch Transformer . . . . . . . . . . . . . . .\n8\n2.4\nImproved Training and Fine-Tuning Techniques . . . . . . . . . . . . . . . .\n8"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        220.8662872314453,
        522.0550537109375,
        272.42340087890625
      ],
      "text": "3\nScaling Properties\n11\n3.1\nScaling Results on a Step-Basis . . . . . . . . . . . . . . . . . . . . . . . . .\n12\n3.2\nScaling Results on a Time-Basis . . . . . . . . . . . . . . . . . . . . . . . . .\n13\n3.3\nScaling Versus a Larger Dense Model . . . . . . . . . . . . . . . . . . . . . .\n13"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        285.9722900390625,
        522.109619140625,
        337.5294189453125
      ],
      "text": "4\nDownstream Results\n14\n4.1\nFine-Tuning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n14\n4.2\nDistillation\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n16\n4.3\nMultilingual Learning\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n17"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        351.07830810546875,
        522.0877685546875,
        443.282470703125
      ],
      "text": "5\nDesigning Models with Data, Model, and Expert-Parallelism\n18\n5.1\nData Parallelism\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n20\n5.2\nModel Parallelism\n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n20\n5.3\nModel and Data Parallelism . . . . . . . . . . . . . . . . . . . . . . . . . . .\n21\n5.4\nExpert and Data Parallelism\n. . . . . . . . . . . . . . . . . . . . . . . . . .\n22\n5.5\nExpert, Model and Data Parallelism . . . . . . . . . . . . . . . . . . . . . .\n22\n5.6\nTowards Trillion Parameter Models . . . . . . . . . . . . . . . . . . . . . . .\n22"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        456.83233642578125,
        522.0003662109375,
        467.741455078125
      ],
      "text": "6\nRelated Work\n24"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        481.29034423828125,
        522.01123046875,
        492.199462890625
      ],
      "text": "7\nDiscussion\n25"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        505.74835205078125,
        522.01123046875,
        516.657470703125
      ],
      "text": "8\nFuture Work\n26"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        530.2073364257812,
        522.0003051757812,
        541.116455078125
      ],
      "text": "9\nConclusion\n27"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        554.6653442382812,
        521.9785766601562,
        565.574462890625
      ],
      "text": "A Switch for Attention\n27"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        579.1233520507812,
        522.0004272460938,
        590.032470703125
      ],
      "text": "B Preventing Token Dropping with No-Token-Left-Behind\n29"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        603.5823364257812,
        522.0330200195312,
        614.491455078125
      ],
      "text": "C Encouraging Exploration Across Experts\n29"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        628.0403442382812,
        522.0221557617188,
        638.949462890625
      ],
      "text": "D Switch Transformers in Lower Compute Regimes\n29"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        652.4983520507812,
        522.0112915039062,
        663.407470703125
      ],
      "text": "E Relation of Upstream to Downstream Model Performance\n32"
    },
    {
      "page_no": 2,
      "bbox": [
        90.0,
        676.9563598632812,
        522.0221557617188,
        687.865478515625
      ],
      "text": "F Pseudo Code for Switch Transformers\n33"
    },
    {
      "page_no": 2,
      "bbox": [
        303.5090026855469,
        724.964111328125,
        308.49029541015625,
        734.9266967773438
      ],
      "text": "2"
    },
    {
      "page_no": 3,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 3,
      "bbox": [
        90.0,
        92.47767639160156,
        180.34544372558594,
        104.43287658691406
      ],
      "text": "1. Introduction"
    },
    {
      "page_no": 3,
      "bbox": [
        90.0,
        115.49824523925781,
        522.0767822265625,
        248.35040283203125
      ],
      "text": "Large scale training has been an eﬀective path towards ﬂexible and powerful neural language\nmodels (Radford et al., 2018; Kaplan et al., 2020; Brown et al., 2020). Simple architectures—\nbacked by a generous computational budget, data set size and parameter count—surpass\nmore complicated algorithms (Sutton, 2019). An approach followed in Radford et al. (2018);\nRaﬀel et al. (2019); Brown et al. (2020) expands the model size of a densely-activated\nTransformer (Vaswani et al., 2017). While eﬀective, it is also extremely computationally\nintensive (Strubell et al., 2019). Inspired by the success of model scale, but seeking greater\ncomputational eﬃciency, we instead propose a sparsely-activated expert model: the Switch\nTransformer. In our case the sparsity comes from activating a subset of the neural network\nweights for each incoming example."
    },
    {
      "page_no": 3,
      "bbox": [
        175.33148193359375,
        411.7288818359375,
        267.3544616699219,
        419.2928161621094
      ],
      "text": "109\n1010"
    },
    {
      "page_no": 3,
      "bbox": [
        168.04092407226562,
        418.9909973144531,
        233.93807983398438,
        426.1352233886719
      ],
      "text": "Sparse Model Parameters"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        406.2813415527344,
        116.4563217163086,
        413.4255676269531
      ],
      "text": "4.8"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        386.17535400390625,
        116.4563217163086,
        393.319580078125
      ],
      "text": "5.0"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        366.0693359375,
        116.4563217163086,
        373.21356201171875
      ],
      "text": "5.2"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        345.9633483886719,
        116.4563217163086,
        353.1075744628906
      ],
      "text": "5.4"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        325.8573303222656,
        116.4563217163086,
        333.0015563964844
      ],
      "text": "5.6"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        305.7513427734375,
        116.4563217163086,
        312.89556884765625
      ],
      "text": "5.8"
    },
    {
      "page_no": 3,
      "bbox": [
        108.28312683105469,
        285.64532470703125,
        116.4563217163086,
        292.78955078125
      ],
      "text": "6.0"
    },
    {
      "page_no": 3,
      "bbox": [
        100.30029296875,
        334.9015197753906,
        107.44448852539062,
        359.5093078613281
      ],
      "text": "Test Loss"
    },
    {
      "page_no": 3,
      "bbox": [
        126.41590881347656,
        278.9635314941406,
        134.31715393066406,
        287.893798828125
      ],
      "text": "1e"
    },
    {
      "page_no": 3,
      "bbox": [
        134.48211669921875,
        291.5012512207031,
        142.38336181640625,
        300.4315185546875
      ],
      "text": "2e"
    },
    {
      "page_no": 3,
      "bbox": [
        146.60012817382812,
        308.9616394042969,
        154.50137329101562,
        317.89190673828125
      ],
      "text": "4e"
    },
    {
      "page_no": 3,
      "bbox": [
        162.82083129882812,
        329.23431396484375,
        170.72207641601562,
        338.1645812988281
      ],
      "text": "8e"
    },
    {
      "page_no": 3,
      "bbox": [
        182.37850952148438,
        350.9198913574219,
        194.36636352539062,
        359.85015869140625
      ],
      "text": "16e"
    },
    {
      "page_no": 3,
      "bbox": [
        204.1965789794922,
        366.62420654296875,
        216.18443298339844,
        375.5544738769531
      ],
      "text": "32e"
    },
    {
      "page_no": 3,
      "bbox": [
        227.36007690429688,
        377.8449401855469,
        239.3479461669922,
        386.77520751953125
      ],
      "text": "64e"
    },
    {
      "page_no": 3,
      "bbox": [
        251.26290893554688,
        387.8335876464844,
        267.3373718261719,
        396.76385498046875
      ],
      "text": "128e"
    },
    {
      "page_no": 3,
      "bbox": [
        275.5540771484375,
        395.195068359375,
        291.6285400390625,
        404.1253356933594
      ],
      "text": "256e"
    },
    {
      "page_no": 3,
      "bbox": [
        339.9003601074219,
        412.43572998046875,
        498.32855224609375,
        426.16278076171875
      ],
      "text": "0\n1\n2\n3\n4\nTraining Step\n1e5"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        407.5433654785156,
        331.4819030761719,
        414.6875915527344
      ],
      "text": "2.0"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        391.5615234375,
        331.4819030761719,
        398.70574951171875
      ],
      "text": "1.9"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        375.5796813964844,
        331.4819030761719,
        382.7239074707031
      ],
      "text": "1.8"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        359.59783935546875,
        331.4819030761719,
        366.7420654296875
      ],
      "text": "1.7"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        343.61602783203125,
        331.4819030761719,
        350.76025390625
      ],
      "text": "1.6"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        327.6341857910156,
        331.4819030761719,
        334.7784118652344
      ],
      "text": "1.5"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        311.65234375,
        331.4819030761719,
        318.79656982421875
      ],
      "text": "1.4"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        295.6705017089844,
        331.4819030761719,
        302.8147277832031
      ],
      "text": "1.3"
    },
    {
      "page_no": 3,
      "bbox": [
        323.3086853027344,
        279.68865966796875,
        331.4819030761719,
        286.8328857421875
      ],
      "text": "1.2"
    },
    {
      "page_no": 3,
      "bbox": [
        311.70538330078125,
        323.2426452636719,
        318.849609375,
        371.1705322265625
      ],
      "text": "Neg Log Perplexity"
    },
    {
      "page_no": 3,
      "bbox": [
        351.68280029296875,
        286.3181457519531,
        390.28851318359375,
        318.4751281738281
      ],
      "text": "Switch-Base: 128e\nSwitch-Base: 64e\nSwitch-Base: 32e\nSwitch-Base: 16e\nT5-Base"
    },
    {
      "page_no": 3,
      "bbox": [
        90.0,
        449.2771911621094,
        522.0548095703125,
        500.8333435058594
      ],
      "text": "Figure 1: Scaling and sample eﬃciency of Switch Transformers. Left Plot: Scaling prop-\nerties for increasingly sparse (more experts) Switch Transformers. Right Plot:\nNegative log perplexity comparing Switch Transformers to T5 (Raﬀel et al., 2019)\nmodels using the same compute budget."
    },
    {
      "page_no": 3,
      "bbox": [
        90.0,
        530.292236328125,
        522.0985107421875,
        705.2453002929688
      ],
      "text": "Sparse training is an active area of research and engineering (Gray et al., 2017; Gale\net al., 2020), but as of today, machine learning libraries and hardware accelerators still cater\nto dense matrix multiplications. To have an eﬃcient sparse algorithm, we start with the\nMixture-of-Expert (MoE) paradigm (Jacobs et al., 1991; Jordan and Jacobs, 1994; Shazeer\net al., 2017), and simplify it to yield training stability and computational beneﬁts. MoE\nmodels have had notable successes in machine translation (Shazeer et al., 2017, 2018; Lep-\nikhin et al., 2020), however, widespread adoption is hindered by complexity, communication\ncosts, and training instabilities.\nWe address these issues, and then go beyond translation, to ﬁnd that these class of\nalgorithms are broadly valuable in natural language. We measure superior scaling on a\ndiverse set of natural language tasks and across three regimes in NLP: pre-training, ﬁne-\ntuning and multi-task training. While this work focuses on scale, we also show that the\nSwitch Transformer architecture not only excels in the domain of supercomputers, but is"
    },
    {
      "page_no": 3,
      "bbox": [
        303.5090026855469,
        724.9639282226562,
        308.49029541015625,
        734.926513671875
      ],
      "text": "3"
    },
    {
      "page_no": 4,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 4,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0331420898438,
        131.3023681640625
      ],
      "text": "beneﬁcial even with only a few computational cores. Further, our large sparse models can\nbe distilled (Hinton et al., 2015) into small dense versions while preserving 30% of the sparse\nmodel quality gain. Our contributions are the following:"
    },
    {
      "page_no": 4,
      "bbox": [
        106.39500427246094,
        142.3047637939453,
        522.0441284179688,
        166.96435546875
      ],
      "text": "• The Switch Transformer architecture, which simpliﬁes and improves over Mixture of\nExperts."
    },
    {
      "page_no": 4,
      "bbox": [
        106.39500427246094,
        177.23878479003906,
        522.0441284179688,
        188.349365234375
      ],
      "text": "• Scaling properties and a benchmark against the strongly tuned T5 model (Raﬀel et al.,"
    },
    {
      "page_no": 4,
      "bbox": [
        117.27300262451172,
        190.98927307128906,
        522.0551147460938,
        228.99737548828125
      ],
      "text": "2019) where we measure 7x+ pre-training speedups while still using the same FLOPS\nper token. We further show the improvements hold even with limited computational\nresources, using as few as two experts."
    },
    {
      "page_no": 4,
      "bbox": [
        106.39500427246094,
        239.2718048095703,
        522.0440063476562,
        277.48040771484375
      ],
      "text": "• Successful distillation of sparse pre-trained and specialized ﬁne-tuned models into\nsmall dense models. We reduce the model size by up to 99% while preserving 30% of\nthe quality gains of the large sparse teacher."
    },
    {
      "page_no": 4,
      "bbox": [
        106.39500427246094,
        287.75482177734375,
        522.0218505859375,
        339.513427734375
      ],
      "text": "• Improved pre-training and ﬁne-tuning techniques: (1) selective precision training that\nenables training with lower bﬂoat16 precision (2) an initialization scheme that allows\nfor scaling to a larger number of experts and (3) increased expert regularization that\nimproves sparse model ﬁne-tuning and multi-task training."
    },
    {
      "page_no": 4,
      "bbox": [
        106.39501190185547,
        349.787841796875,
        522.0442504882812,
        387.9964599609375
      ],
      "text": "• A measurement of the pre-training beneﬁts on multilingual data where we ﬁnd a\nuniversal improvement across all 101 languages and with 91% of languages beneﬁting\nfrom 4x+ speedups over the mT5 baseline (Xue et al., 2020)."
    },
    {
      "page_no": 4,
      "bbox": [
        106.39501190185547,
        398.2708740234375,
        522.0441284179688,
        450.02947998046875
      ],
      "text": "• An increase in the scale of neural language models achieved by eﬃciently combining\ndata, model, and expert-parallelism to create models with up to a trillion parameters.\nThese models improve the pre-training speed of a strongly tuned T5-XXL baseline by\n4x."
    },
    {
      "page_no": 4,
      "bbox": [
        90.00000762939453,
        469.53082275390625,
        222.2723388671875,
        481.48602294921875
      ],
      "text": "2. Switch Transformer"
    },
    {
      "page_no": 4,
      "bbox": [
        89.99998474121094,
        491.0983581542969,
        522.0875854492188,
        705.2454833984375
      ],
      "text": "The guiding design principle for Switch Transformers is to maximize the parameter count of\na Transformer model (Vaswani et al., 2017) in a simple and computationally eﬃcient way.\nThe beneﬁt of scale was exhaustively studied in Kaplan et al. (2020) which uncovered power-\nlaw scaling with model size, data set size and computational budget. Importantly, this work\nadvocates training large models on relatively small amounts of data as the computationally\noptimal approach.\nHeeding these results, we investigate a fourth axis: increase the parameter count while\nkeeping the ﬂoating point operations (FLOPs) per example constant. Our hypothesis is\nthat the parameter count, independent of total computation performed, is a separately\nimportant axis on which to scale. We achieve this by designing a sparsely activated model\nthat eﬃciently uses hardware designed for dense matrix multiplications such as GPUs and\nTPUs. Our work here focuses on TPU architectures, but these class of models may be\nsimilarly trained on GPU clusters. In our distributed training setup, our sparsely activated\nlayers split unique weights on diﬀerent devices. Therefore, the weights of the model increase\nwith the number of devices, all while maintaining a manageable memory and computational\nfootprint on each device."
    },
    {
      "page_no": 4,
      "bbox": [
        303.50897216796875,
        724.964111328125,
        308.4902648925781,
        734.9266967773438
      ],
      "text": "4"
    },
    {
      "page_no": 5,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 5,
      "bbox": [
        333.1423645019531,
        187.4530792236328,
        347.3829650878906,
        192.19837951660156
      ],
      "text": "Router"
    },
    {
      "page_no": 5,
      "bbox": [
        298.90582275390625,
        147.57481384277344,
        372.72247314453125,
        151.72694396972656
      ],
      "text": "FFN 1\nFFN 2\nFFN 4\nFFN 3"
    },
    {
      "page_no": 5,
      "bbox": [
        363.463134765625,
        114.9271469116211,
        403.0691223144531,
        120.2656021118164
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 5,
      "bbox": [
        393.81170654296875,
        147.57481384277344,
        467.331787109375,
        151.72694396972656
      ],
      "text": "FFN 1\nFFN 2\nFFN 4\nFFN 3"
    },
    {
      "page_no": 5,
      "bbox": [
        425.08245849609375,
        187.4530792236328,
        439.3230895996094,
        192.19837951660156
      ],
      "text": "Router"
    },
    {
      "page_no": 5,
      "bbox": [
        370.0157470703125,
        233.2189483642578,
        401.7361145019531,
        239.66262817382812
      ],
      "text": "Self-Attention"
    },
    {
      "page_no": 5,
      "bbox": [
        366.13238525390625,
        213.68862915039062,
        405.7383728027344,
        219.02708435058594
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 5,
      "bbox": [
        315.03704833984375,
        269.5822448730469,
        413.2648010253906,
        277.0655517578125
      ],
      "text": "x1\nx2"
    },
    {
      "page_no": 5,
      "bbox": [
        315.5977478027344,
        94.1664810180664,
        413.0281066894531,
        100.78321838378906
      ],
      "text": "y1\ny2"
    },
    {
      "page_no": 5,
      "bbox": [
        283.23797607421875,
        164.1595916748047,
        483.5973815917969,
        172.76043701171875
      ],
      "text": "p = 0.65\np = 0.8"
    },
    {
      "page_no": 5,
      "bbox": [
        310.8802490234375,
        253.29405212402344,
        334.3552551269531,
        263.6744079589844
      ],
      "text": "Positional\nembedding"
    },
    {
      "page_no": 5,
      "bbox": [
        403.116943359375,
        253.29405212402344,
        426.5919494628906,
        263.6744079589844
      ],
      "text": "Positional\nembedding"
    },
    {
      "page_no": 5,
      "bbox": [
        131.38851928710938,
        151.1100311279297,
        170.99453735351562,
        156.448486328125
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 5,
      "bbox": [
        134.53041076660156,
        209.19589233398438,
        166.2508087158203,
        215.6395721435547
      ],
      "text": "Self-Attention"
    },
    {
      "page_no": 5,
      "bbox": [
        130.64706420898438,
        190.25872802734375,
        170.25308227539062,
        195.59718322753906
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 5,
      "bbox": [
        126.58296966552734,
        169.45404052734375,
        174.3124542236328,
        175.89772033691406
      ],
      "text": "Switching FFN Layer"
    },
    {
      "page_no": 5,
      "bbox": [
        149.11849975585938,
        129.8926239013672,
        152.0843048095703,
        135.82423400878906
      ],
      "text": "y"
    },
    {
      "page_no": 5,
      "bbox": [
        148.82191467285156,
        230.73016357421875,
        151.7877197265625,
        236.66177368164062
      ],
      "text": "x"
    },
    {
      "page_no": 5,
      "bbox": [
        332.98016357421875,
        279.20928955078125,
        449.2100830078125,
        285.73406982421875
      ],
      "text": "More\nParameters"
    },
    {
      "page_no": 5,
      "bbox": [
        90.0,
        304.0721740722656,
        522.0587768554688,
        396.2773132324219
      ],
      "text": "Figure 2: Illustration of a Switch Transformer encoder block. We replace the dense feed\nforward network (FFN) layer present in the Transformer with a sparse Switch\nFFN layer (light blue). The layer operates independently on the tokens in the\nsequence. We diagram two tokens (x1 = “More” and x2 = “Parameters” below)\nbeing routed (solid lines) across four FFN experts, where the router independently\nroutes each token. The switch FFN layer returns the output of the selected FFN\nmultiplied by the router gate value (dotted-line)."
    },
    {
      "page_no": 5,
      "bbox": [
        89.99995422363281,
        430.6282043457031,
        262.84375,
        441.5373229980469
      ],
      "text": "2.1 Simplifying Sparse Routing"
    },
    {
      "page_no": 5,
      "bbox": [
        89.99993896484375,
        449.93719482421875,
        522.0447387695312,
        528.5923461914062
      ],
      "text": "Mixture of Expert Routing. Shazeer et al. (2017) proposed a natural language Mixture-\nof-Experts (MoE) layer which takes as an input a token representation x and then routes\nthis to the best determined top-k experts, selected from a set {Ei(x)}N\ni=1 of N experts.\nThe router variable Wr produces logits h(x) = Wr · x which are normalized via a softmax\ndistribution over the available N experts at that layer. The gate-value for expert i is given\nby,"
    },
    {
      "page_no": 5,
      "bbox": [
        260.66400146484375,
        529.0751953125,
        522.0028076171875,
        561.5252685546875
      ],
      "text": "pi(x) =\neh(x)i\nPN\nj eh(x)j .\n(1)"
    },
    {
      "page_no": 5,
      "bbox": [
        89.99996948242188,
        566.8418579101562,
        522.0658569335938,
        604.9902954101562
      ],
      "text": "The top-k gate values are selected for routing the token x. If T is the set of selected top-k\nindices then the output computation of the layer is the linearly weighted combination of\neach expert’s computation on the token by the gate value,"
    },
    {
      "page_no": 5,
      "bbox": [
        260.6820068359375,
        616.6331787109375,
        296.72076416015625,
        630.0623168945312
      ],
      "text": "y =\nX"
    },
    {
      "page_no": 5,
      "bbox": [
        281.2120056152344,
        619.1531982421875,
        522.0028686523438,
        642.6842041015625
      ],
      "text": "i∈T\npi(x)Ei(x).\n(2)"
    },
    {
      "page_no": 5,
      "bbox": [
        90.00005340576172,
        653.6881713867188,
        522.1095581054688,
        705.2453002929688
      ],
      "text": "Switch Routing: Rethinking Mixture-of-Experts. Shazeer et al. (2017) conjec-\ntured that routing to k > 1 experts was necessary in order to have non-trivial gradients to\nthe routing functions. The authors intuited that learning to route would not work without\nthe ability to compare at least two experts. Ramachandran and Le (2018) went further to"
    },
    {
      "page_no": 5,
      "bbox": [
        303.5090637207031,
        724.9639282226562,
        308.4903564453125,
        734.926513671875
      ],
      "text": "5"
    },
    {
      "page_no": 6,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 6,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0658569335938,
        212.597412109375
      ],
      "text": "study the top-k decision and found that higher k-values in lower layers in the model were\nimportant for models with many routing layers. Contrary to these ideas, we instead use\na simpliﬁed strategy where we route to only a single expert. We show this simpliﬁcation\npreserves model quality, reduces routing computation and performs better. This k = 1\nrouting strategy is later referred to as a Switch layer. Note that for both MoE and Switch\nRouting, the gate value pi(x) in Equation 2 permits diﬀerentiability of the router.\nThe beneﬁts for the Switch layer are three-fold: (1) The router computation is reduced\nas we are only routing a token to a single expert. (2) The batch size (expert capacity) of\neach expert can be at least halved since each token is only being routed to a single expert.3"
    },
    {
      "page_no": 6,
      "bbox": [
        90.0,
        215.23731994628906,
        522.0343627929688,
        239.6964111328125
      ],
      "text": "(3) The routing implementation is simpliﬁed and communication costs are reduced. Figure\n3 shows an example of routing with diﬀerent expert capacity factors."
    },
    {
      "page_no": 6,
      "bbox": [
        398.7242431640625,
        390.64935302734375,
        412.5634460449219,
        394.0596923828125
      ],
      "text": "Device 0"
    },
    {
      "page_no": 6,
      "bbox": [
        360.83160400390625,
        280.7607421875,
        450.4560546875,
        284.17108154296875
      ],
      "text": "Device 0\nDevice 1\nDevice 2"
    },
    {
      "page_no": 6,
      "bbox": [
        267.20721435546875,
        403.7639465332031,
        286.4142150878906,
        409.8267517089844
      ],
      "text": "Tokens"
    },
    {
      "page_no": 6,
      "bbox": [
        227.627197265625,
        267.35052490234375,
        325.2325439453125,
        273.413330078125
      ],
      "text": "Expert 1\nExpert 2\nExpert 3"
    },
    {
      "page_no": 6,
      "bbox": [
        239.4272003173828,
        251.78419494628906,
        312.287109375,
        259.36273193359375
      ],
      "text": "(Capacity Factor: 1.0)"
    },
    {
      "page_no": 6,
      "bbox": [
        396.0421447753906,
        403.7639465332031,
        415.2491455078125,
        409.8267517089844
      ],
      "text": "Tokens"
    },
    {
      "page_no": 6,
      "bbox": [
        352.6728515625,
        267.35052490234375,
        454.0674743652344,
        273.413330078125
      ],
      "text": "Expert 1\nExpert 2\nExpert 3"
    },
    {
      "page_no": 6,
      "bbox": [
        365.6096496582031,
        251.78419494628906,
        438.46954345703125,
        259.36273193359375
      ],
      "text": "(Capacity Factor: 1.5)"
    },
    {
      "page_no": 6,
      "bbox": [
        479.3171081542969,
        332.14691162109375,
        521.429443359375,
        345.4093017578125
      ],
      "text": "Across Device\nCommunication"
    },
    {
      "page_no": 6,
      "bbox": [
        231.99668884277344,
        280.7607421875,
        412.5634460449219,
        284.17108154296875
      ],
      "text": "Device 0\nDevice 1\nDevice 2\nDevice 1"
    },
    {
      "page_no": 6,
      "bbox": [
        269.8893127441406,
        390.64935302734375,
        283.7284851074219,
        394.0596923828125
      ],
      "text": "Device 0"
    },
    {
      "page_no": 6,
      "bbox": [
        126.59598541259766,
        251.78419494628906,
        167.44422912597656,
        259.36273193359375
      ],
      "text": "Terminology"
    },
    {
      "page_no": 6,
      "bbox": [
        106.29383087158203,
        269.41943359375,
        202.662353515625,
        297.66461181640625
      ],
      "text": "Experts: Split across devices,\neach having their own unique\nparameters. Perform standard feed-\nforward computation."
    },
    {
      "page_no": 6,
      "bbox": [
        106.29383087158203,
        314.5116882324219,
        202.6684112548828,
        342.7568359375
      ],
      "text": "Expert Capacity: Batch size of\neach expert. Calculated as \n(tokens_per_batch / num_experts) *\ncapacity_factor"
    },
    {
      "page_no": 6,
      "bbox": [
        106.29383087158203,
        361.49853515625,
        199.53175354003906,
        396.9432678222656
      ],
      "text": "Capacity Factor: Used when\ncalculating expert capacity. Expert\ncapacity allows more buffer to help\nmitigate token overﬂow during\nrouting."
    },
    {
      "page_no": 6,
      "bbox": [
        90.0,
        428.6001892089844,
        522.0587768554688,
        534.3533325195312
      ],
      "text": "Figure 3: Illustration of token routing dynamics. Each expert processes a ﬁxed batch-size\nof tokens modulated by the capacity factor. Each token is routed to the expert\nwith the highest router probability, but each expert has a ﬁxed batch size of\n(total tokens / num experts) × capacity factor. If the tokens are unevenly dis-\npatched then certain experts will overﬂow (denoted by dotted red lines), resulting\nin these tokens not being processed by this layer. A larger capacity factor allevi-\nates this overﬂow issue, but also increases computation and communication costs\n(depicted by padded white/empty slots)."
    },
    {
      "page_no": 6,
      "bbox": [
        90.0,
        574.9431762695312,
        245.83651733398438,
        585.852294921875
      ],
      "text": "2.2 Eﬃcient Sparse Routing"
    },
    {
      "page_no": 6,
      "bbox": [
        90.0,
        594.252197265625,
        522.054931640625,
        686.456298828125
      ],
      "text": "We use Mesh-Tensorﬂow (MTF) (Shazeer et al., 2018) which is a library, with similar seman-\ntics and API to Tensorﬂow (Abadi et al., 2016) that facilitates eﬃcient distributed data and\nmodel parallel architectures. It does so by abstracting the physical set of cores to a logical\nmesh of processors. Tensors and computations may then be sharded per named dimensions,\nfacilitating easy partitioning of models across dimensions. We design our model with TPUs\nin mind, which require statically declared sizes. Below we describe our distributed Switch\nTransformer implementation."
    },
    {
      "page_no": 6,
      "bbox": [
        93.68099975585938,
        695.8544921875,
        275.5823669433594,
        704.8208618164062
      ],
      "text": "3. See Section 2.2 for a technical description."
    },
    {
      "page_no": 6,
      "bbox": [
        303.5090026855469,
        724.9639282226562,
        308.49029541015625,
        734.926513671875
      ],
      "text": "6"
    },
    {
      "page_no": 7,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 7,
      "bbox": [
        89.99999237060547,
        93.29524230957031,
        522.0657958984375,
        171.95037841796875
      ],
      "text": "Distributed Switch Implementation. All of our tensor shapes are statically deter-\nmined at compilation time, but our computation is dynamic due to the routing decisions at\ntraining and inference. Because of this, one important technical consideration is how to set\nthe expert capacity. The expert capacity—the number of tokens each expert computes—is\nset by evenly dividing the number of tokens in the batch across the number of experts, and\nthen further expanding by a capacity factor,"
    },
    {
      "page_no": 7,
      "bbox": [
        167.4409942626953,
        175.2072296142578,
        344.691650390625,
        201.49835205078125
      ],
      "text": "expert capacity =\n\u0012 tokens per batch"
    },
    {
      "page_no": 7,
      "bbox": [
        261.5450134277344,
        198.0722198486328,
        348.3487243652344,
        208.9813232421875
      ],
      "text": "number of experts"
    },
    {
      "page_no": 7,
      "bbox": [
        349.5290222167969,
        183.05120849609375,
        522.0028686523438,
        201.49835205078125
      ],
      "text": "\u0013\n× capacity factor.\n(3)"
    },
    {
      "page_no": 7,
      "bbox": [
        90.00001525878906,
        220.1382598876953,
        522.07666015625,
        461.38348388671875
      ],
      "text": "A capacity factor greater than 1.0 creates additional buﬀer to accommodate for when to-\nkens are not perfectly balanced across experts. If too many tokens are routed to an expert\n(referred to later as dropped tokens), computation is skipped and the token representa-\ntion is passed directly to the next layer through the residual connection. Increasing the\nexpert capacity is not without drawbacks, however, since high values will result in wasted\ncomputation and memory. This trade-oﬀis explained in Figure 3. Empirically we ﬁnd en-\nsuring lower rates of dropped tokens are important for the scaling of sparse expert-models.\nThroughout our experiments we didn’t notice any dependency on the number of experts\nfor the number of tokens dropped (typically < 1%). Using the auxiliary load balancing loss\n(next section) with a high enough coeﬃcient ensured good load balancing. We study the\nimpact that these design decisions have on model quality and speed in Table 1.\nA Diﬀerentiable Load Balancing Loss. To encourage a balanced load across experts\nwe add an auxiliary loss (Shazeer et al., 2017, 2018; Lepikhin et al., 2020). As in Shazeer\net al. (2018); Lepikhin et al. (2020), Switch Transformers simpliﬁes the original design in\nShazeer et al. (2017) which had separate load-balancing and importance-weighting losses.\nFor each Switch layer, this auxiliary loss is added to the total model loss during training.\nGiven N experts indexed by i = 1 to N and a batch B with T tokens, the auxiliary loss is\ncomputed as the scaled dot-product between vectors f and P,"
    },
    {
      "page_no": 7,
      "bbox": [
        251.5360870361328,
        485.052001953125,
        313.48077392578125,
        496.10247802734375
      ],
      "text": "loss = α · N ·"
    },
    {
      "page_no": 7,
      "bbox": [
        315.903076171875,
        473.85430908203125,
        331.65582275390625,
        493.58349609375
      ],
      "text": "N\nX"
    },
    {
      "page_no": 7,
      "bbox": [
        316.9300842285156,
        485.0520324707031,
        522.0028686523438,
        508.54742431640625
      ],
      "text": "i=1\nfi · Pi\n(4)"
    },
    {
      "page_no": 7,
      "bbox": [
        90.00006103515625,
        514.2463989257812,
        358.8167724609375,
        526.79150390625
      ],
      "text": "where fi is the fraction of tokens dispatched to expert i,"
    },
    {
      "page_no": 7,
      "bbox": [
        232.373046875,
        535.8223876953125,
        263.5075988769531,
        555.7474975585938
      ],
      "text": "fi = 1"
    },
    {
      "page_no": 7,
      "bbox": [
        256.83599853515625,
        550.6851806640625,
        263.2069091796875,
        561.5942993164062
      ],
      "text": "T"
    },
    {
      "page_no": 7,
      "bbox": [
        267.9429931640625,
        540.6821899414062,
        283.69573974609375,
        551.59130859375
      ],
      "text": "X"
    },
    {
      "page_no": 7,
      "bbox": [
        267.7389831542969,
        540.8189086914062,
        522.0028076171875,
        566.7332153320312
      ],
      "text": "x∈B\n1{argmax p(x) = i}\n(5)"
    },
    {
      "page_no": 7,
      "bbox": [
        89.99996948242188,
        572.7930908203125,
        426.800048828125,
        587.0003051757812
      ],
      "text": "and Pi is the fraction of the router probability allocated for expert i, 2"
    },
    {
      "page_no": 7,
      "bbox": [
        265.1839294433594,
        595.2151489257812,
        297.98248291015625,
        615.1412963867188
      ],
      "text": "Pi = 1"
    },
    {
      "page_no": 7,
      "bbox": [
        291.30999755859375,
        610.0781860351562,
        297.680908203125,
        620.9873046875
      ],
      "text": "T"
    },
    {
      "page_no": 7,
      "bbox": [
        302.4169921875,
        600.076171875,
        318.16973876953125,
        610.9852905273438
      ],
      "text": "X"
    },
    {
      "page_no": 7,
      "bbox": [
        302.2139892578125,
        602.5951538085938,
        522.0028076171875,
        626.127197265625
      ],
      "text": "x∈B\npi(x).\n(6)"
    },
    {
      "page_no": 7,
      "bbox": [
        89.99998474121094,
        636.6392211914062,
        522.0629272460938,
        674.6463012695312
      ],
      "text": "Since we seek uniform routing of the batch of tokens across the N experts, we desire both\nvectors to have values of 1/N. The auxiliary loss of Equation 4 encourages uniform routing\nsince it is minimized under a uniform distribution. The objective can also be diﬀerentiated as"
    },
    {
      "page_no": 7,
      "bbox": [
        93.68099975585938,
        684.8955078125,
        522.0010986328125,
        704.8208618164062
      ],
      "text": "2. A potential source of confusion: pi(x) is the probability of routing token x to expert i.\nPi is the\nprobability fraction to expert i across all tokens in the batch B."
    },
    {
      "page_no": 7,
      "bbox": [
        303.509033203125,
        724.9639282226562,
        308.4903259277344,
        734.926513671875
      ],
      "text": "7"
    },
    {
      "page_no": 8,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 8,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0269165039062,
        139.14634704589844
      ],
      "text": "the P-vector is diﬀerentiable, but the f-vector is not. The ﬁnal loss is multiplied by expert\ncount N to keep the loss constant as the number of experts varies since under uniform\nrouting PN\ni=1(fi · Pi) = PN\ni=1( 1"
    },
    {
      "page_no": 8,
      "bbox": [
        233.9929962158203,
        118.3951416015625,
        256.84613037109375,
        134.92294311523438
      ],
      "text": "N · 1"
    },
    {
      "page_no": 8,
      "bbox": [
        250.9459991455078,
        118.3951416015625,
        285.5951232910156,
        135.0643310546875
      ],
      "text": "N ) = 1"
    },
    {
      "page_no": 8,
      "bbox": [
        89.99996948242188,
        120.39320373535156,
        522.032958984375,
        171.9503173828125
      ],
      "text": "N . Finally, a hyper-parameter α is a multiplicative\ncoeﬃcient for these auxiliary losses; throughout this work we use an α = 10−2 which was\nsuﬃciently large to ensure load balancing while small enough to not to overwhelm the\nprimary cross-entropy objective. We swept hyper-parameter ranges of α from 10−1 to 10−5"
    },
    {
      "page_no": 8,
      "bbox": [
        89.99993896484375,
        170.63124084472656,
        522.0653686523438,
        185.49932861328125
      ],
      "text": "in powers of 10 and found 10−2 balanced load quickly without interfering with training loss."
    },
    {
      "page_no": 8,
      "bbox": [
        89.99995422363281,
        204.5102081298828,
        384.65478515625,
        215.4193115234375
      ],
      "text": "2.3 Putting It All Together: The Switch Transformer"
    },
    {
      "page_no": 8,
      "bbox": [
        89.99992370605469,
        225.7912139892578,
        522.065673828125,
        441.909423828125
      ],
      "text": "Our ﬁrst test of the Switch Transformer starts with pre-training on the “Colossal Clean\nCrawled Corpus” (C4), introduced in (Raﬀel et al., 2019). For our pre-training objective,\nwe use a masked language modeling task (Taylor, 1953; Fedus et al., 2018; Devlin et al.,\n2018) where the model is trained to predict missing tokens. In our pre-training setting, as\ndetermined in Raﬀel et al. (2019) to be optimal, we drop out 15% of tokens and then replace\nthe masked sequence with a single sentinel token. To compare our models, we record the\nnegative log perplexity.4 Throughout all tables in the paper, ↑indicates that a higher value\nfor that metric is better and vice-versa for ↓. A comparison of all the models studied in\nthis work are in Table 9.\nA head-to-head comparison of the Switch Transformer and the MoE Transformer is\npresented in Table 1. Our Switch Transformer model is FLOP-matched to ‘T5-Base’ (Raﬀel\net al., 2019) (same amount of computation per token is applied). The MoE Transformer,\nusing top-2 routing, has two experts which each apply a separate FFN to each token and\nthus its FLOPS are larger. All models were trained for the same number of steps on identical\nhardware. Note that the MoE model going from capacity factor 2.0 to 1.25 actually slows\ndown (840 to 790) in the above experiment setup, which is unexpected.5"
    },
    {
      "page_no": 8,
      "bbox": [
        89.99993896484375,
        446.5202941894531,
        522.0548706054688,
        565.8234252929688
      ],
      "text": "We highlight three key ﬁndings from Table 1: (1) Switch Transformers outperform\nboth carefully tuned dense models and MoE Transformers on a speed-quality basis. For\na ﬁxed amount of computation and wall-clock time, Switch Transformers achieve the best\nresult. (2) The Switch Transformer has a smaller computational footprint than the MoE\ncounterpart. If we increase its size to match the training speed of the MoE Transformer,\nwe ﬁnd this outperforms all MoE and Dense models on a per step basis as well. (3) Switch\nTransformers perform better at lower capacity factors (1.0, 1.25). Smaller expert capacities\nare indicative of the scenario in the large model regime where model memory is very scarce\nand the capacity factor will want to be made as small as possible."
    },
    {
      "page_no": 8,
      "bbox": [
        89.99993896484375,
        584.8342895507812,
        374.45477294921875,
        595.743408203125
      ],
      "text": "2.4 Improved Training and Fine-Tuning Techniques"
    },
    {
      "page_no": 8,
      "bbox": [
        89.99993896484375,
        606.1152954101562,
        522.0440063476562,
        644.1224365234375
      ],
      "text": "Sparse expert models may introduce training diﬃculties over a vanilla Transformer. Insta-\nbility can result because of the hard-switching (routing) decisions at each of these layers.\nFurther, low precision formats like bﬂoat16 (Wang and Kanwar, 2019) can exacerbate issues"
    },
    {
      "page_no": 8,
      "bbox": [
        93.68099975585938,
        662.9774780273438,
        522.0866088867188,
        704.8208618164062
      ],
      "text": "4. We use log base-e for this metric so the units are nats.\n5. Note that speed measurements are both a function of the algorithm and the implementation details.\nSwitch Transformer reduces the necessary computation relative to MoE (algorithm), but the ﬁnal speed\ndiﬀerences are impacted by low-level optimizations (implementation)."
    },
    {
      "page_no": 8,
      "bbox": [
        303.5090026855469,
        724.9639282226562,
        308.49029541015625,
        734.926513671875
      ],
      "text": "8"
    },
    {
      "page_no": 9,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 9,
      "bbox": [
        112.51400756835938,
        95.60478210449219,
        499.4637145996094,
        257.29931640625
      ],
      "text": "Model\nCapacity\nQuality after\nTime to Quality\nSpeed (↑)\nFactor\n100k steps (↑)\nThreshold (↓)\n(examples/sec)\n(Neg. Log Perp.)\n(hours)\nT5-Base\n—\n-1.731\nNot achieved†\n1600\nT5-Large\n—\n-1.550\n131.1\n470\nMoE-Base\n2.0\n-1.547\n68.7\n840\nSwitch-Base\n2.0\n-1.554\n72.8\n860\nMoE-Base\n1.25\n-1.559\n80.7\n790\nSwitch-Base\n1.25\n-1.553\n65.0\n910\nMoE-Base\n1.0\n-1.572\n80.1\n860\nSwitch-Base\n1.0\n-1.561\n62.8\n1000\nSwitch-Base+\n1.0\n-1.534\n67.6\n780"
    },
    {
      "page_no": 9,
      "bbox": [
        90.0,
        273.73419189453125,
        522.0628662109375,
        433.68438720703125
      ],
      "text": "Table 1: Benchmarking Switch versus MoE. Head-to-head comparison measuring per step\nand per time beneﬁts of the Switch Transformer over the MoE Transformer and\nT5 dense baselines. We measure quality by the negative log perplexity and the\ntime to reach an arbitrary chosen quality threshold of Neg. Log Perp.=-1.50. All\nMoE and Switch Transformer models use 128 experts, with experts at every other\nfeed-forward layer. For Switch-Base+, we increase the model size until it matches\nthe speed of the MoE model by increasing the model hidden-size from 768 to 896\nand the number of heads from 14 to 16. All models are trained with the same\namount of computation (32 cores) and on the same hardware (TPUv3). Further\nnote that all our models required pre-training beyond 100k steps to achieve our\nlevel threshold of -1.50. † T5-Base did not achieve this negative log perplexity in\nthe 100k steps the models were trained."
    },
    {
      "page_no": 9,
      "bbox": [
        89.99996948242188,
        472.64227294921875,
        522.07666015625,
        705.245361328125
      ],
      "text": "in the softmax computation for our router. We describe training diﬃculties here and the\nmethods we use to overcome them to achieve stable and scalable training.\nSelective precision with large sparse models. Model instability hinders the ability\nto train using eﬃcient bﬂoat16 precision, and as a result, Lepikhin et al. (2020) trains with\nﬂoat32 precision throughout their MoE Transformer. However, we show that by instead\nselectively casting to ﬂoat32 precision within a localized part of the model, stability may be\nachieved, without incurring expensive communication cost of ﬂoat32 tensors. This technique\nis inline with modern mixed precision training strategies where certain parts of the model\nand gradient updates are done in higher precision Micikevicius et al. (2017). Table 2 shows\nthat our approach permits nearly equal speed to bﬂoat16 training while conferring the\ntraining stability of ﬂoat32.\nTo achieve this, we cast the router input to ﬂoat32 precision. The router function takes\nthe tokens as input and produces the dispatch and combine tensors used for the selection and\nrecombination of expert computation (refer to Code Block 15 in the Appendix for details).\nImportantly, the ﬂoat32 precision is only used within the body of the router function—on\ncomputations local to that device.\nBecause the resulting dispatch and combine tensors\nare recast to bﬂoat16 precision at the end of the function, no expensive ﬂoat32 tensors"
    },
    {
      "page_no": 9,
      "bbox": [
        303.50897216796875,
        724.9639892578125,
        308.4902648925781,
        734.9265747070312
      ],
      "text": "9"
    },
    {
      "page_no": 10,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 10,
      "bbox": [
        119.802001953125,
        95.74617004394531,
        492.1986389160156,
        161.25030517578125
      ],
      "text": "Model\nQuality\nSpeed\n(precision)\n(Neg. Log Perp.) (↑)\n(Examples/sec) (↑)\nSwitch-Base (ﬂoat32)\n-1.718\n1160\nSwitch-Base (bﬂoat16)\n-3.780 [diverged]\n1390\nSwitch-Base (Selective precision)\n-1.716\n1390"
    },
    {
      "page_no": 10,
      "bbox": [
        90.0,
        177.68519592285156,
        522.0519409179688,
        256.34033203125
      ],
      "text": "Table 2: Selective precision. We cast the local routing operations to ﬂoat32 while preserving\nbﬂoat16 precision elsewhere to stabilize our model while achieving nearly equal\nspeed to (unstable) bﬂoat16-precision training. We measure the quality of a 32\nexpert model after a ﬁxed step count early in training its speed performance. For\nboth Switch-Base in ﬂoat32 and with Selective prevision we notice similar learning\ndynamics."
    },
    {
      "page_no": 10,
      "bbox": [
        90.0,
        291.45220947265625,
        522.054931640625,
        370.6373596191406
      ],
      "text": "are broadcast through all-to-all communication operations, but we still beneﬁt from the\nincreased stability of ﬂoat32.\nSmaller parameter initialization for stability. Appropriate initialization is critical\nto successful training in deep learning and we especially observe this to be true for Switch\nTransformer.\nWe initialize our weight matrices by drawing elements from a truncated\nnormal distribution with mean µ = 0 and standard deviation σ =\np"
    },
    {
      "page_no": 10,
      "bbox": [
        90.0,
        359.7281799316406,
        521.9814453125,
        384.1863098144531
      ],
      "text": "s/n where s is a scale\nhyper-parameter and n is the number of input units in the weight tensor (e.g. fan-in).6"
    },
    {
      "page_no": 10,
      "bbox": [
        90.0,
        387.3561706542969,
        522.087646484375,
        438.9132995605469
      ],
      "text": "As an additional remedy to the instability, we recommend reducing the default Trans-\nformer initialization scale s = 1.0 by a factor of 10. This both improves quality and reduces\nthe likelihood of destabilized training in our experiments. Table 3 measures the improve-\nment of the model quality and reduction of the variance early in training. We ﬁnd that"
    },
    {
      "page_no": 10,
      "bbox": [
        139.2259979248047,
        456.5511779785156,
        472.8262023925781,
        508.5063171386719
      ],
      "text": "Model (Initialization scale)\nAverage Quality\nStd. Dev. of Quality\n(Neg. Log Perp.)\n(Neg. Log Perp.)\nSwitch-Base (0.1x-init)\n-2.72\n0.01\nSwitch-Base (1.0x-init)\n-3.60\n0.68"
    },
    {
      "page_no": 10,
      "bbox": [
        90.0,
        524.940185546875,
        522.0521240234375,
        590.0462646484375
      ],
      "text": "Table 3: Reduced initialization scale improves stability. Reducing the initialization scale\nresults in better model quality and more stable training of Switch Transformer.\nHere we record the average and standard deviation of model quality, measured by\nthe negative log perplexity, of a 32 expert model after 3.5k steps (3 random seeds\neach)."
    },
    {
      "page_no": 10,
      "bbox": [
        90.0,
        618.26318359375,
        522.0438232421875,
        683.3692626953125
      ],
      "text": "the average model quality, as measured by the Neg. Log Perp., is dramatically improved\nand there is a far reduced variance across runs. Further, this same initialization scheme is\nbroadly eﬀective for models spanning several orders of magnitude. We use the same ap-\nproach to stably train models as small as our 223M parameter baseline to enormous models\nin excess of one trillion parameters."
    },
    {
      "page_no": 10,
      "bbox": [
        93.68099975585938,
        695.8544921875,
        407.39739990234375,
        704.8208618164062
      ],
      "text": "6. Values greater than two standard deviations from the mean are resampled."
    },
    {
      "page_no": 10,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "10"
    },
    {
      "page_no": 11,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 11,
      "bbox": [
        90.00003051757812,
        93.29524230957031,
        522.0658569335938,
        199.04840087890625
      ],
      "text": "Regularizing large sparse models. Our paper considers the common NLP approach\nof pre-training on a large corpus followed by ﬁne-tuning on smaller downstream tasks such\nas summarization or question answering. One issue that naturally arises is overﬁtting since\nmany ﬁne-tuning tasks have very few examples.\nDuring ﬁne-tuning of standard Trans-\nformers, Raﬀel et al. (2019) use dropout (Srivastava et al., 2014) at each layer to prevent\noverﬁtting. Our Switch Transformers have signiﬁcantly more parameters than the FLOP\nmatched dense baseline, which can lead to more severe overﬁtting on these smaller down-\nstream tasks."
    },
    {
      "page_no": 11,
      "bbox": [
        128.25599670410156,
        216.6032257080078,
        483.81463623046875,
        295.6573486328125
      ],
      "text": "Model (dropout)\nGLUE\nCNNDM\nSQuAD\nSuperGLUE\nT5-Base (d=0.1)\n82.9\n19.6\n83.5\n72.4\nSwitch-Base (d=0.1)\n84.7\n19.1\n83.7\n73.0\nSwitch-Base (d=0.2)\n84.4\n19.2\n83.9\n73.2\nSwitch-Base (d=0.3)\n83.9\n19.6\n83.4\n70.7\nSwitch-Base (d=0.1, ed=0.4)\n85.2\n19.6\n83.7\n73.0"
    },
    {
      "page_no": 11,
      "bbox": [
        90.0,
        312.0911865234375,
        522.0656127929688,
        377.19732666015625
      ],
      "text": "Table 4: Fine-tuning regularization results.\nA sweep of dropout rates while ﬁne-tuning\nSwitch Transformer models pre-trained on 34B tokens of the C4 data set (higher\nnumbers are better).\nWe observe that using a lower standard dropout rate at\nall non-expert layer, with a much larger dropout rate on the expert feed-forward\nlayers, to perform the best."
    },
    {
      "page_no": 11,
      "bbox": [
        90.0,
        420.9232177734375,
        522.0658569335938,
        526.6763916015625
      ],
      "text": "We thus propose a simple way to alleviate this issue during ﬁne-tuning: increase the\ndropout inside the experts, which we name as expert dropout. During ﬁne-tuning we simply\nincrease the dropout rate by a signiﬁcant amount only at the interim feed-forward com-\nputation at each expert layer. Table 4 has the results for our expert dropout protocol.\nWe observe that simply increasing the dropout across all layers leads to worse performance.\nHowever, setting a smaller dropout rate (0.1) at non-expert layers and a much larger dropout\nrate (0.4) at expert layers leads to performance improvements on four smaller downstream\ntasks."
    },
    {
      "page_no": 11,
      "bbox": [
        90.0,
        547.7266845703125,
        213.7841033935547,
        559.681884765625
      ],
      "text": "3. Scaling Properties"
    },
    {
      "page_no": 11,
      "bbox": [
        90.0,
        570.8442993164062,
        522.0659790039062,
        707.0223999023438
      ],
      "text": "We present a study of the scaling properties of the Switch Transformer architecture dur-\ning pre-training. Per Kaplan et al. (2020), we consider a regime where the model is not\nbottlenecked by either the computational budget or amount of data. To avoid the data\nbottleneck, we use the large C4 corpus with over 180B target tokens (Raﬀel et al., 2019)\nand we train until diminishing returns are observed.\nThe number of experts is the most eﬃcient dimension for scaling our model. Increasing\nthe experts keeps the computational cost approximately ﬁxed since the model only selects\none expert per token, regardless of the number of experts to choose from.\nThe router\nmust compute a probability distribution over more experts, however, this is a lightweight\ncomputation of cost O(dmodel × num experts) where dmodel is the embedding dimension of"
    },
    {
      "page_no": 11,
      "bbox": [
        301.01898193359375,
        724.9639892578125,
        310.9815673828125,
        734.9265747070312
      ],
      "text": "11"
    },
    {
      "page_no": 12,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 12,
      "bbox": [
        90.0,
        93.29524230957031,
        522.000244140625,
        117.75334930419922
      ],
      "text": "tokens passed between the layers. In this section, we consider the scaling properties on a\nstep-basis and a time-basis with a ﬁxed computational budget."
    },
    {
      "page_no": 12,
      "bbox": [
        90.0,
        142.4992218017578,
        284.7710876464844,
        153.4083251953125
      ],
      "text": "3.1 Scaling Results on a Step-Basis"
    },
    {
      "page_no": 12,
      "bbox": [
        90.0,
        169.5152130126953,
        522.0767211914062,
        329.46539306640625
      ],
      "text": "Figure 4 demonstrates consistent scaling beneﬁts with the number of experts when training\nall models for a ﬁxed number of steps. We observe a clear trend: when keeping the FLOPS\nper token ﬁxed, having more parameters (experts) speeds up training.\nThe left Figure\ndemonstrates consistent scaling properties (with ﬁxed FLOPS per token) between sparse\nmodel parameters and test loss. This reveals the advantage of scaling along this additional\naxis of sparse model parameters. Our right Figure measures sample eﬃciency of a dense\nmodel variant and four FLOP-matched sparse variants. We ﬁnd that increasing the number\nof experts leads to more sample eﬃcient models. Our Switch-Base 64 expert model achieves\nthe same performance of the T5-Base model at step 60k at step 450k, which is a\n7.5x\nspeedup in terms of step time. In addition, consistent with the ﬁndings of Kaplan et al.\n(2020), we ﬁnd that larger models are also more sample eﬃcient—learning more quickly\nfor a ﬁxed number of observed tokens."
    },
    {
      "page_no": 12,
      "bbox": [
        175.33148193359375,
        503.2288513183594,
        267.3544616699219,
        510.79278564453125
      ],
      "text": "109\n1010"
    },
    {
      "page_no": 12,
      "bbox": [
        168.04092407226562,
        510.490966796875,
        233.93807983398438,
        517.6351928710938
      ],
      "text": "Sparse Model Parameters"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        497.78131103515625,
        116.4563217163086,
        504.925537109375
      ],
      "text": "4.8"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        477.67529296875,
        116.4563217163086,
        484.81951904296875
      ],
      "text": "5.0"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        457.5693054199219,
        116.4563217163086,
        464.7135314941406
      ],
      "text": "5.2"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        437.46331787109375,
        116.4563217163086,
        444.6075439453125
      ],
      "text": "5.4"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        417.3572998046875,
        116.4563217163086,
        424.50152587890625
      ],
      "text": "5.6"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        397.2513122558594,
        116.4563217163086,
        404.3955383300781
      ],
      "text": "5.8"
    },
    {
      "page_no": 12,
      "bbox": [
        108.28312683105469,
        377.1452941894531,
        116.4563217163086,
        384.2895202636719
      ],
      "text": "6.0"
    },
    {
      "page_no": 12,
      "bbox": [
        100.30029296875,
        426.4014587402344,
        107.44448852539062,
        451.00927734375
      ],
      "text": "Test Loss"
    },
    {
      "page_no": 12,
      "bbox": [
        126.41590881347656,
        370.4634704589844,
        134.31715393066406,
        379.39373779296875
      ],
      "text": "1e"
    },
    {
      "page_no": 12,
      "bbox": [
        134.48211669921875,
        383.0011901855469,
        142.38336181640625,
        391.93145751953125
      ],
      "text": "2e"
    },
    {
      "page_no": 12,
      "bbox": [
        146.60012817382812,
        400.46160888671875,
        154.50137329101562,
        409.3918762207031
      ],
      "text": "4e"
    },
    {
      "page_no": 12,
      "bbox": [
        162.82083129882812,
        420.7342834472656,
        170.72207641601562,
        429.66455078125
      ],
      "text": "8e"
    },
    {
      "page_no": 12,
      "bbox": [
        182.37850952148438,
        442.41986083984375,
        194.36636352539062,
        451.3501281738281
      ],
      "text": "16e"
    },
    {
      "page_no": 12,
      "bbox": [
        204.1965789794922,
        458.1241760253906,
        216.18443298339844,
        467.054443359375
      ],
      "text": "32e"
    },
    {
      "page_no": 12,
      "bbox": [
        227.36007690429688,
        469.34490966796875,
        239.3479461669922,
        478.2751770019531
      ],
      "text": "64e"
    },
    {
      "page_no": 12,
      "bbox": [
        251.26290893554688,
        479.33355712890625,
        267.3373718261719,
        488.2638244628906
      ],
      "text": "128e"
    },
    {
      "page_no": 12,
      "bbox": [
        275.5540771484375,
        486.6950378417969,
        291.6285400390625,
        495.62530517578125
      ],
      "text": "256e"
    },
    {
      "page_no": 12,
      "bbox": [
        339.9003601074219,
        503.9356994628906,
        498.32855224609375,
        517.6627807617188
      ],
      "text": "0\n1\n2\n3\n4\nTraining Step\n1e5"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        499.0433349609375,
        331.4819030761719,
        506.18756103515625
      ],
      "text": "2.0"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        483.0614929199219,
        331.4819030761719,
        490.2057189941406
      ],
      "text": "1.9"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        467.07965087890625,
        331.4819030761719,
        474.223876953125
      ],
      "text": "1.8"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        451.09783935546875,
        331.4819030761719,
        458.2420654296875
      ],
      "text": "1.7"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        435.115966796875,
        331.4819030761719,
        442.26019287109375
      ],
      "text": "1.6"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        419.1341552734375,
        331.4819030761719,
        426.27838134765625
      ],
      "text": "1.5"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        403.1523132324219,
        331.4819030761719,
        410.2965393066406
      ],
      "text": "1.4"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        387.17047119140625,
        331.4819030761719,
        394.314697265625
      ],
      "text": "1.3"
    },
    {
      "page_no": 12,
      "bbox": [
        323.3086853027344,
        371.1886291503906,
        331.4819030761719,
        378.3328552246094
      ],
      "text": "1.2"
    },
    {
      "page_no": 12,
      "bbox": [
        311.70538330078125,
        414.74261474609375,
        318.849609375,
        462.6705017089844
      ],
      "text": "Neg Log Perplexity"
    },
    {
      "page_no": 12,
      "bbox": [
        351.68280029296875,
        377.818115234375,
        390.28851318359375,
        409.97509765625
      ],
      "text": "Switch-Base: 128e\nSwitch-Base: 64e\nSwitch-Base: 32e\nSwitch-Base: 16e\nT5-Base"
    },
    {
      "page_no": 12,
      "bbox": [
        90.0,
        540.7761840820312,
        522.0589599609375,
        673.6282958984375
      ],
      "text": "Figure 4: Scaling properties of the Switch Transformer. Left Plot: We measure the quality\nimprovement, as measured by perplexity, as the parameters increase by scaling\nthe number of experts. The top-left point corresponds to the T5-Base model with\n223M parameters. Moving from top-left to bottom-right, we double the number of\nexperts from 2, 4, 8 and so on until the bottom-right point of a 256 expert model\nwith 14.7B parameters. Despite all models using an equal computational budget,\nwe observe consistent improvements scaling the number of experts. Right Plot:\nNegative log perplexity per step sweeping over the number of experts. The dense\nbaseline is shown with the purple line and we note improved sample eﬃciency of\nour Switch-Base models."
    },
    {
      "page_no": 12,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "12"
    },
    {
      "page_no": 13,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 13,
      "bbox": [
        90.0,
        93.29524230957031,
        288.611083984375,
        104.20433807373047
      ],
      "text": "3.2 Scaling Results on a Time-Basis"
    },
    {
      "page_no": 13,
      "bbox": [
        90.0,
        112.91127014160156,
        522.0657348632812,
        218.972412109375
      ],
      "text": "Figure 4 demonstrates that on a step basis, as we increase the number of experts, the\nperformance consistently improves. While our models have roughly the same amount of\nFLOPS per token as the baseline, our Switch Transformers incurs additional communication\ncosts across devices as well as the extra computation of the routing mechanism. Therefore,\nthe increased sample eﬃciency observed on a step-basis doesn’t necessarily translate to a\nbetter model quality as measured by wall-clock. This raises the question:\nFor a ﬁxed training duration and computational budget, should one train a dense or a\nsparse model?"
    },
    {
      "page_no": 13,
      "bbox": [
        224.74746704101562,
        429.57110595703125,
        424.8232421875,
        447.6646423339844
      ],
      "text": "50\n100\n150\n200\n250\n300\n350\nTraining Time"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        423.08123779296875,
        196.99188232421875,
        432.5582275390625
      ],
      "text": "2.0"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        401.880859375,
        196.99188232421875,
        411.35784912109375
      ],
      "text": "1.9"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        380.6804504394531,
        196.99188232421875,
        390.1574401855469
      ],
      "text": "1.8"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        359.48004150390625,
        196.99188232421875,
        368.95703125
      ],
      "text": "1.7"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        338.2796630859375,
        196.99188232421875,
        347.75665283203125
      ],
      "text": "1.6"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        317.0792541503906,
        196.99188232421875,
        326.5562438964844
      ],
      "text": "1.5"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        295.87884521484375,
        196.99188232421875,
        305.3558349609375
      ],
      "text": "1.4"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        274.678466796875,
        196.99188232421875,
        284.15545654296875
      ],
      "text": "1.3"
    },
    {
      "page_no": 13,
      "bbox": [
        186.14987182617188,
        253.47805786132812,
        196.99188232421875,
        262.9550476074219
      ],
      "text": "1.2"
    },
    {
      "page_no": 13,
      "bbox": [
        170.7577667236328,
        311.2537536621094,
        180.23477172851562,
        374.83154296875
      ],
      "text": "Neg Log Perplexity"
    },
    {
      "page_no": 13,
      "bbox": [
        292.1644592285156,
        313.39739990234375,
        349.4071044921875,
        326.6651916503906
      ],
      "text": "7x Speedup"
    },
    {
      "page_no": 13,
      "bbox": [
        361.45654296875,
        388.6878356933594,
        412.6682434082031,
        422.5761413574219
      ],
      "text": "Switch-Base: 128e\nSwitch-Base: 64e\nSwitch-Base: 32e\nT5-Base"
    },
    {
      "page_no": 13,
      "bbox": [
        90.0,
        472.8971862792969,
        522.0806884765625,
        538.0032958984375
      ],
      "text": "Figure 5: Speed advantage of Switch Transformer. All models trained on 32 TPUv3 cores\nwith equal FLOPs per example. For a ﬁxed amount of computation and training\ntime, Switch Transformers signiﬁcantly outperform the dense Transformer base-\nline. Our 64 expert Switch-Base model achieves the same quality in one-seventh\nthe time of the T5-Base and continues to improve."
    },
    {
      "page_no": 13,
      "bbox": [
        89.99998474121094,
        565.168212890625,
        522.0985107421875,
        616.7243041992188
      ],
      "text": "Figures 5 and 6 address this question. Figure 5 measures the pre-training model quality\nas a function of time.\nFor a ﬁxed training duration and computational budget, Switch\nTransformers yield a substantial speed-up. In this setting, our Switch-Base 64 expert model\ntrains in one-seventh the time that it would take the T5-Base to get similar perplexity."
    },
    {
      "page_no": 13,
      "bbox": [
        89.99998474121094,
        634.0722045898438,
        318.1747741699219,
        644.9813232421875
      ],
      "text": "3.3 Scaling Versus a Larger Dense Model"
    },
    {
      "page_no": 13,
      "bbox": [
        89.99998474121094,
        653.6881713867188,
        522.0440063476562,
        705.2453002929688
      ],
      "text": "The above analysis shows that a computationally-matched dense model is outpaced by its\nSwitch counterpart. Figure 6 considers a diﬀerent scenario: what if we instead had allocated\nour resources to a larger dense model? We do so now, measuring Switch-Base against the\nnext strong baseline, T5-Large. But despite T5-Large applying 3.5x more FLOPs per token,"
    },
    {
      "page_no": 13,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "13"
    },
    {
      "page_no": 14,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 14,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0439453125,
        144.85137939453125
      ],
      "text": "Switch-Base is still more sample eﬃcient and yields a 2.5x speedup. Furthermore, more\ngains can be had simply by designing a new, larger sparse version, Switch-Large, which is\nFLOP-matched to T5-Large. We do this and demonstrate superior scaling and ﬁne-tuning\nin the following section."
    },
    {
      "page_no": 14,
      "bbox": [
        124.58137512207031,
        306.9977111816406,
        283.0095520019531,
        320.7247619628906
      ],
      "text": "0\n1\n2\n3\n4\nTraining Step\n1e5"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        302.1053466796875,
        116.16290283203125,
        309.24957275390625
      ],
      "text": "2.0"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        286.1235046386719,
        116.16290283203125,
        293.2677307128906
      ],
      "text": "1.9"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        270.14166259765625,
        116.16290283203125,
        277.285888671875
      ],
      "text": "1.8"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        254.1598663330078,
        116.16290283203125,
        261.3040771484375
      ],
      "text": "1.7"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        238.17800903320312,
        116.16290283203125,
        245.32220458984375
      ],
      "text": "1.6"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        222.19618225097656,
        116.16290283203125,
        229.3403778076172
      ],
      "text": "1.5"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        206.21434020996094,
        116.16290283203125,
        213.35853576660156
      ],
      "text": "1.4"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        190.2324981689453,
        116.16290283203125,
        197.37669372558594
      ],
      "text": "1.3"
    },
    {
      "page_no": 14,
      "bbox": [
        107.98970031738281,
        174.2506561279297,
        116.16290283203125,
        181.3948516845703
      ],
      "text": "1.2"
    },
    {
      "page_no": 14,
      "bbox": [
        96.38641357421875,
        217.80462646484375,
        103.53060913085938,
        265.7325134277344
      ],
      "text": "Neg Log Perplexity"
    },
    {
      "page_no": 14,
      "bbox": [
        242.76239013671875,
        282.71954345703125,
        278.7527160644531,
        301.724609375
      ],
      "text": "Switch-Base: 64e\nT5-Large\nT5-Base"
    },
    {
      "page_no": 14,
      "bbox": [
        352.40533447265625,
        306.9977111816406,
        503.231689453125,
        320.6374816894531
      ],
      "text": "50\n100\n150\n200\n250\n300\n350\nTraining Time"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        302.1053466796875,
        331.4819030761719,
        309.24957275390625
      ],
      "text": "2.0"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        286.1235046386719,
        331.4819030761719,
        293.2677307128906
      ],
      "text": "1.9"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        270.14166259765625,
        331.4819030761719,
        277.285888671875
      ],
      "text": "1.8"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        254.1598663330078,
        331.4819030761719,
        261.3040771484375
      ],
      "text": "1.7"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        238.17800903320312,
        331.4819030761719,
        245.32220458984375
      ],
      "text": "1.6"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        222.19618225097656,
        331.4819030761719,
        229.3403778076172
      ],
      "text": "1.5"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        206.21434020996094,
        331.4819030761719,
        213.35853576660156
      ],
      "text": "1.4"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        190.2324981689453,
        331.4819030761719,
        197.37669372558594
      ],
      "text": "1.3"
    },
    {
      "page_no": 14,
      "bbox": [
        323.3086853027344,
        174.2506561279297,
        331.4819030761719,
        181.3948516845703
      ],
      "text": "1.2"
    },
    {
      "page_no": 14,
      "bbox": [
        311.70538330078125,
        217.80462646484375,
        318.849609375,
        265.7325134277344
      ],
      "text": "Neg Log Perplexity"
    },
    {
      "page_no": 14,
      "bbox": [
        446.0235595703125,
        224.57174682617188,
        481.75042724609375,
        231.7159423828125
      ],
      "text": "7.0x Speedup"
    },
    {
      "page_no": 14,
      "bbox": [
        446.0235595703125,
        206.192626953125,
        481.75042724609375,
        213.33682250976562
      ],
      "text": "2.5x Speedup"
    },
    {
      "page_no": 14,
      "bbox": [
        458.0813903808594,
        282.71954345703125,
        494.0716857910156,
        301.724609375
      ],
      "text": "Switch-Base: 64e\nT5-Large\nT5-Base"
    },
    {
      "page_no": 14,
      "bbox": [
        90.0,
        343.83917236328125,
        522.058837890625,
        408.9443359375
      ],
      "text": "Figure 6: Scaling Transformer models with Switch layers or with standard dense model\nscaling. Left Plot: Switch-Base is more sample eﬃcient than both the T5-Base,\nand T5-Large variant, which applies 3.5x more FLOPS per token. Right Plot: As\nbefore, on a wall-clock basis, we ﬁnd that Switch-Base is still faster, and yields a\n2.5x speedup over T5-Large."
    },
    {
      "page_no": 14,
      "bbox": [
        90.0,
        453.3246765136719,
        227.79559326171875,
        465.2798767089844
      ],
      "text": "4. Downstream Results"
    },
    {
      "page_no": 14,
      "bbox": [
        90.0,
        475.376220703125,
        522.0548095703125,
        567.580322265625
      ],
      "text": "Section 3 demonstrated the superior scaling properties while pre-training, but we now val-\nidate that these gains translate to improved language learning abilities on downstream\ntasks. We begin by ﬁne-tuning on a diverse set of NLP tasks. Next we study reducing\nthe memory footprint of our sparse models by over 90% by distilling into small—and easily\ndeployed—dense baselines. Finally, we conclude this section measuring the improvements\nin a multi-task, multilingual setting, where we show that Switch Transformers are strong\nmulti-task learners, improving over the multilingual T5-base model across all 101 languages."
    },
    {
      "page_no": 14,
      "bbox": [
        90.0,
        585.1041870117188,
        178.9200897216797,
        596.0133056640625
      ],
      "text": "4.1 Fine-Tuning"
    },
    {
      "page_no": 14,
      "bbox": [
        90.0,
        604.8982543945312,
        522.0330810546875,
        683.5533447265625
      ],
      "text": "Baseline and Switch models used for ﬁne-tuning. Our baselines are the highly-tuned\n223M parameter T5-Base model and the 739M parameter T5-Large model (Raﬀel et al.,\n2019). For both versions, we design a FLOP-matched Switch Transformer, with many more\nparameters, which is summarized in Table 9.7 Our baselines diﬀer slightly from those in\nRaﬀel et al. (2019) because we pre-train on an improved C4 corpus which removes intra-\nexample text duplication and thus increases the eﬃcacy as a pre-training task Lee et al."
    },
    {
      "page_no": 14,
      "bbox": [
        93.68099975585938,
        695.8544921875,
        409.20855712890625,
        704.8208618164062
      ],
      "text": "7. FLOPS are calculated for the forward pass as done in Kaplan et al. (2020)."
    },
    {
      "page_no": 14,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "14"
    },
    {
      "page_no": 15,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 15,
      "bbox": [
        90.0,
        89.33625793457031,
        522.0657958984375,
        171.95037841796875
      ],
      "text": "(2021). In our protocol we pre-train with 220 (1,048,576) tokens per batch for 550k steps\namounting to 576B total tokens. We then ﬁne-tune across a diverse set of tasks using a\ndropout rate of 0.1 for all layers except the Switch layers, which use a dropout rate of 0.4\n(see Table 4). We ﬁne-tune using a batch-size of 1M for 16k steps and for each task, we\nevaluate model quality every 200-steps and report the peak performance as computed on\nthe validation set."
    },
    {
      "page_no": 15,
      "bbox": [
        90.00004577636719,
        178.64125061035156,
        522.0767822265625,
        419.886474609375
      ],
      "text": "Fine-tuning tasks and data sets. We select tasks probing language capabilities in-\ncluding question answering, summarization and knowledge about the world. The language\nbenchmarks GLUE (Wang et al., 2018) and SuperGLUE (Wang et al., 2019) are handled\nas composite mixtures with all the tasks blended in proportion to the amount of tokens\npresent in each.\nThese benchmarks consist of tasks requiring sentiment analysis (SST-\n2), word sense disambiguation (WIC), sentence similarty (MRPC, STS-B, QQP), natural\nlanguage inference (MNLI, QNLI, RTE, CB), question answering (MultiRC, RECORD,\nBoolQ), coreference resolution (WNLI, WSC) and sentence completion (COPA) and sen-\ntence acceptability (CoLA). The CNNDM (Hermann et al., 2015) and BBC XSum (Narayan\net al., 2018) data sets are used to measure the ability to summarize articles. Question an-\nswering is probed with the SQuAD data set (Rajpurkar et al., 2016) and the ARC Reasoning\nChallenge (Clark et al., 2018). And as in Roberts et al. (2020), we evaluate the knowledge\nof our models by ﬁne-tuning on three closed-book question answering data sets: Natural\nQuestions (Kwiatkowski et al., 2019), Web Questions (Berant et al., 2013) and Trivia QA\n(Joshi et al., 2017). Closed-book refers to questions posed with no supplemental reference\nor context material. To gauge the model’s common sense reasoning we evaluate it on the\nWinogrande Schema Challenge (Sakaguchi et al., 2020). And ﬁnally, we test our model’s\nnatural language inference capabilities on the Adversarial NLI Benchmark (Nie et al., 2019)."
    },
    {
      "page_no": 15,
      "bbox": [
        90.00006103515625,
        426.578369140625,
        522.0548706054688,
        518.7825317382812
      ],
      "text": "Fine-tuning metrics. The following evaluation metrics are used throughout the paper:\nWe report the average scores across all subtasks for GLUE and SuperGLUE. The Rouge-2\nmetric is used both the CNNDM and XSum. In SQuAD and the closed book tasks (Web,\nNatural, and Trivia Questions) we report the percentage of answers exactly matching the\ntarget (refer to Roberts et al. (2020) for further details and deﬁciency of this measure).\nFinally, in ARC Easy, ARC Challenge, ANLI, and Winogrande we report the accuracy of\nthe generated responses."
    },
    {
      "page_no": 15,
      "bbox": [
        90.00006103515625,
        525.4744262695312,
        522.0549926757812,
        658.3255004882812
      ],
      "text": "Fine-tuning results. We observe signiﬁcant downstream improvements across many\nnatural language tasks.\nNotable improvements come from SuperGLUE, where we ﬁnd\nFLOP-matched Switch variants improve by 4.4 and 2 percentage points over the T5-Base\nand T5-Large baselines, respectively as well as large improvements in Winogrande, closed\nbook Trivia QA, and XSum.8 In our ﬁne-tuning study, the only tasks where we do not\nobserve gains are on the AI2 Reasoning Challenge (ARC) data sets where the T5-Base\noutperforms Switch-Base on the challenge data set and T5-Large outperforms Switch-Large\non the easy data set. Taken as a whole, we observe signiﬁcant improvements spanning both\nreasoning and knowledge-heavy tasks. This validates our architecture, not just as one that\npre-trains well, but can translate quality improvements to downstream tasks via ﬁne-tuning."
    },
    {
      "page_no": 15,
      "bbox": [
        93.68099975585938,
        681.0864868164062,
        521.9855346679688,
        704.8208618164062
      ],
      "text": "8. Our T5 and Switch models were pre-trained with 220 tokens per batch for 550k steps on a revised C4\ndata set for fair comparisons."
    },
    {
      "page_no": 15,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "15"
    },
    {
      "page_no": 16,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 16,
      "bbox": [
        105.89199829101562,
        95.74617004394531,
        506.17352294921875,
        161.25030517578125
      ],
      "text": "Model\nGLUE\nSQuAD\nSuperGLUE\nWinogrande (XL)\nT5-Base\n84.3\n85.5\n75.1\n66.6\nSwitch-Base\n86.7\n87.2\n79.5\n73.3\nT5-Large\n87.8\n88.1\n82.7\n79.1\nSwitch-Large\n88.5\n88.6\n84.7\n83.0"
    },
    {
      "page_no": 16,
      "bbox": [
        105.89199829101562,
        184.11720275878906,
        490.0498046875,
        249.621337890625
      ],
      "text": "Model\nXSum\nANLI (R3)\nARC Easy\nARC Chal.\nT5-Base\n18.7\n51.8\n56.7\n35.5\nSwitch-Base\n20.3\n54.0\n61.3\n32.8\nT5-Large\n20.9\n56.6\n68.8\n35.5\nSwitch-Large\n22.3\n58.6\n66.0\n35.5"
    },
    {
      "page_no": 16,
      "bbox": [
        105.89199829101562,
        272.4871826171875,
        409.1369934082031,
        337.9923095703125
      ],
      "text": "Model\nCB Web QA\nCB Natural QA\nCB Trivia QA\nT5-Base\n26.6\n25.8\n24.5\nSwitch-Base\n27.4\n26.8\n30.7\nT5-Large\n27.7\n27.6\n29.5\nSwitch-Large\n31.3\n29.5\n36.9"
    },
    {
      "page_no": 16,
      "bbox": [
        90.0,
        354.4261779785156,
        522.0330810546875,
        433.0813293457031
      ],
      "text": "Table 5: Fine-tuning results. Fine-tuning results of T5 baselines and Switch models across\na diverse set of natural language tests (validation sets; higher numbers are better).\nWe compare FLOP-matched Switch models to the T5-Base and T5-Large base-\nlines. For most tasks considered, we ﬁnd signiﬁcant improvements of the Switch-\nvariants. We observe gains across both model sizes and across both reasoning and\nknowledge-heavy language tasks."
    },
    {
      "page_no": 16,
      "bbox": [
        90.0,
        488.9872131347656,
        173.36734008789062,
        499.8963317871094
      ],
      "text": "4.2 Distillation"
    },
    {
      "page_no": 16,
      "bbox": [
        90.0,
        513.2462158203125,
        522.0657348632812,
        564.8033447265625
      ],
      "text": "Deploying massive neural networks with billions, or trillions, of parameters is inconvenient.\nTo alleviate this, we study distilling (Hinton et al., 2015) large sparse models into small\ndense models. Future work could additionally study distilling large models into smaller\nsparse models."
    },
    {
      "page_no": 16,
      "bbox": [
        89.99998474121094,
        572.3931884765625,
        522.0985107421875,
        705.2453002929688
      ],
      "text": "Distillation techniques.\nIn Table 6 we study a variety of distillation techniques.\nThese techniques are built oﬀof\nSanh et al. (2019), who study distillation methods for\nBERT models. We ﬁnd that initializing the dense model with the non-expert weights yields\na modest improvement. This is possible since all models are FLOP matched, so non-expert\nlayers will have the same dimensions. Since expert layers are usually only added at every\nor every other FFN layer in a Transformer, this allows for many of the weights to be\ninitialized with trained parameters. Furthermore, we observe a distillation improvement\nusing a mixture of 0.25 for the teacher probabilities and 0.75 for the ground truth label. By\ncombining both techniques we preserve ≈30% of the quality gains from the larger sparse\nmodels with only ≈1/20th of the parameters. The quality gain refers to the percent of"
    },
    {
      "page_no": 16,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "16"
    },
    {
      "page_no": 17,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 17,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0003051757812,
        117.75334930419922
      ],
      "text": "the quality diﬀerence between Switch-Base (Teacher) and T5-Base (Student). Therefore, a\nquality gain of 100% implies the Student equals the performance of the Teacher."
    },
    {
      "page_no": 17,
      "bbox": [
        141.10499572753906,
        147.46678161621094,
        470.9198913574219,
        254.55731201171875
      ],
      "text": "Technique\nParameters\nQuality (↑)\nT5-Base\n223M\n-1.636\nSwitch-Base\n3,800M\n-1.444\nDistillation\n223M\n(3%) -1.631\n+ Init. non-expert weights from teacher\n223M\n(20%) -1.598\n+ 0.75 mix of hard and soft loss\n223M\n(29%) -1.580\nInitialization Baseline (no distillation)\nInit. non-expert weights from teacher\n223M\n-1.639"
    },
    {
      "page_no": 17,
      "bbox": [
        90.0,
        268.99920654296875,
        522.0547485351562,
        347.65435791015625
      ],
      "text": "Table 6: Distilling Switch Transformers for Language Modeling. Initializing T5-Base with\nthe non-expert weights from Switch-Base and using a loss from a mixture of teacher\nand ground-truth labels obtains the best performance. We can distill 30% of the\nperformance improvement of a large sparse model with 100x more parameters back\ninto a small dense model. For a ﬁnal baseline, we ﬁnd no improvement of T5-Base\ninitialized with the expert weights, but trained normally without distillation."
    },
    {
      "page_no": 17,
      "bbox": [
        89.99998474121094,
        375.3382263183594,
        522.07666015625,
        562.575439453125
      ],
      "text": "Achievable compression rates. Using our best distillation technique described in\nTable 6, we distill a wide variety of sparse models into dense models. We distill Switch-\nBase versions, sweeping over an increasing number of experts, which corresponds to varying\nbetween 1.1B to 14.7B parameters. Through distillation, we can preserve 37% of the quality\ngain of the 1.1B parameter model while compressing 82%.\nAt the extreme, where we\ncompress the model 99%, we are still able to maintain 28% of the teacher’s model quality\nimprovement.\nDistilling a ﬁne-tuned model. We conclude this with a study of distilling a ﬁne-\ntuned sparse model into a dense model. Table 8 shows results of distilling a 7.4B parameter\nSwitch-Base model, ﬁne-tuned on the SuperGLUE task, into the 223M T5-Base. Similar\nto our pre-training results, we ﬁnd we are able to preserve 30% of the gains of the sparse\nmodel when distilling into a FLOP matched dense variant. One potential future avenue,\nnot considered here, may examine the speciﬁc experts being used for ﬁne-tuning tasks and\nextracting them to achieve better model compression."
    },
    {
      "page_no": 17,
      "bbox": [
        90.0,
        579.8042602539062,
        232.221923828125,
        590.71337890625
      ],
      "text": "4.3 Multilingual Learning"
    },
    {
      "page_no": 17,
      "bbox": [
        90.0,
        599.3023071289062,
        522.07080078125,
        705.2454223632812
      ],
      "text": "In our ﬁnal set of downstream experiments, we measure the model quality and speed trade-\noﬀs while pre-training on a mixture of 101 diﬀerent languages. We build and benchmark oﬀ\nthe recent work of mT5 (Xue et al., 2020), a multilingual extension to T5. We pre-train on\nthe multilingual variant of the Common Crawl data set (mC4) spanning 101 languages in-\ntroduced in mT5, but due to script variants within certain languages, the mixture contains\n107 tasks.\nIn Figure 7 we plot the quality improvement in negative log perplexity for all languages\nof a FLOP-matched Switch model, mSwitch-Base to the T5 base variant, mT5-Base. After"
    },
    {
      "page_no": 17,
      "bbox": [
        301.01898193359375,
        724.9640502929688,
        310.9815673828125,
        734.9266357421875
      ],
      "text": "17"
    },
    {
      "page_no": 18,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 18,
      "bbox": [
        108.55902099609375,
        95.74617004394531,
        503.4398193359375,
        175.19830322265625
      ],
      "text": "Dense\nSparse\nParameters\n223M\n1.1B\n2.0B\n3.8B\n7.4B\n14.7B\nPre-trained Neg. Log Perp. (↑)\n-1.636\n-1.505\n-1.474\n-1.444\n-1.432\n-1.427\nDistilled Neg. Log Perp. (↑)\n—\n-1.587\n-1.585\n-1.579\n-1.582\n-1.578\nPercent of Teacher Performance\n—\n37%\n32%\n30 %\n27 %\n28 %\nCompression Percent\n—\n82 %\n90 %\n95 %\n97 %\n99 %"
    },
    {
      "page_no": 18,
      "bbox": [
        90.0,
        205.18116760253906,
        522.0629272460938,
        310.935302734375
      ],
      "text": "Table 7: Distillation compression rates. We measure the quality when distilling large sparse\nmodels into a dense baseline. Our baseline, T5-Base, has a -1.636 Neg. Log Perp.\nquality.\nIn the right columns, we then distill increasingly large sparse models\ninto this same architecture. Through a combination of weight-initialization and\na mixture of hard and soft losses, we can shrink our sparse teachers by 95%+\nwhile preserving 30% of the quality gain. However, for signiﬁcantly better and\nlarger pre-trained teachers, we expect larger student models would be necessary\nto achieve these compression rates."
    },
    {
      "page_no": 18,
      "bbox": [
        163.64999389648438,
        341.4668273925781,
        448.3523864746094,
        393.56329345703125
      ],
      "text": "Model\nParameters\nFLOPS\nSuperGLUE (↑)\nT5-Base\n223M\n124B\n74.6\nSwitch-Base\n7410M\n124B\n81.3\nDistilled T5-Base\n223M\n124B\n(30%) 76.6"
    },
    {
      "page_no": 18,
      "bbox": [
        90.0,
        409.9971923828125,
        522.0438842773438,
        475.10333251953125
      ],
      "text": "Table 8: Distilling a ﬁne-tuned SuperGLUE model. We distill a Switch-Base model ﬁne-\ntuned on the SuperGLUE tasks into a T5-Base model. We observe that on smaller\ndata sets our large sparse model can be an eﬀective teacher for distillation. We\nﬁnd that we again achieve 30% of the teacher’s performance on a 97% compressed\nmodel."
    },
    {
      "page_no": 18,
      "bbox": [
        90.0,
        509.1732177734375,
        522.0438232421875,
        587.8283081054688
      ],
      "text": "pre-training both versions for 1M steps, we ﬁnd that on all 101 languages considered,\nSwitch Transformer increases the ﬁnal negative log perplexity over the baseline. In Figure\n8, we present a diﬀerent view and now histogram the per step speed-up of using Switch\nTransformer over the mT5-Base.9\nWe ﬁnd a mean speed-up over mT5-Base of 5x and\nthat 91% of languages achieve at least a 4x speedup. This presents evidence that Switch\nTransformers are eﬀective multi-task and multi-lingual learners."
    },
    {
      "page_no": 18,
      "bbox": [
        90.0,
        608.400634765625,
        464.46075439453125,
        620.3558349609375
      ],
      "text": "5. Designing Models with Data, Model, and Expert-Parallelism"
    },
    {
      "page_no": 18,
      "bbox": [
        90.0,
        631.0371704101562,
        522.07666015625,
        670.8223266601562
      ],
      "text": "Arbitrarily increasing the number of experts is subject to diminishing returns (Figure 4).\nHere we describe complementary scaling strategies. The common way to scale a Transformer\nis to increase dimensions in tandem, like dmodel or dff. This increases both the parameters"
    },
    {
      "page_no": 18,
      "bbox": [
        93.68099975585938,
        684.8955078125,
        522.014892578125,
        704.8208618164062
      ],
      "text": "9. The speedup on a step basis is computed as the ratio of the number of steps for the baseline divided by\nthe number of steps required by our model to reach that same quality."
    },
    {
      "page_no": 18,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "18"
    },
    {
      "page_no": 19,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 19,
      "bbox": [
        110.16116333007812,
        202.78521728515625,
        115.21337890625,
        205.71258544921875
      ],
      "text": "ja"
    },
    {
      "page_no": 19,
      "bbox": [
        113.95246887207031,
        202.7850341796875,
        119.00468444824219,
        206.9432373046875
      ],
      "text": "ny"
    },
    {
      "page_no": 19,
      "bbox": [
        117.74376678466797,
        202.78280639648438,
        122.79598236083984,
        207.01585388183594
      ],
      "text": "xh"
    },
    {
      "page_no": 19,
      "bbox": [
        121.53506469726562,
        202.78494262695312,
        126.5872802734375,
        207.55856323242188
      ],
      "text": "mr"
    },
    {
      "page_no": 19,
      "bbox": [
        125.32637023925781,
        202.78280639648438,
        130.3785858154297,
        207.01585388183594
      ],
      "text": "su"
    },
    {
      "page_no": 19,
      "bbox": [
        129.11766052246094,
        202.7850341796875,
        134.1698760986328,
        206.9432373046875
      ],
      "text": "zh"
    },
    {
      "page_no": 19,
      "bbox": [
        132.90896606445312,
        202.78656005859375,
        137.961181640625,
        207.25662231445312
      ],
      "text": "eo"
    },
    {
      "page_no": 19,
      "bbox": [
        136.66969299316406,
        202.78787231445312,
        141.72190856933594,
        215.4163360595703
      ],
      "text": "bg-latn"
    },
    {
      "page_no": 19,
      "bbox": [
        140.49156188964844,
        202.78262329101562,
        145.5437774658203,
        208.24649047851562
      ],
      "text": "ms"
    },
    {
      "page_no": 19,
      "bbox": [
        144.28286743164062,
        202.7850341796875,
        149.3350830078125,
        206.9432373046875
      ],
      "text": "zu"
    },
    {
      "page_no": 19,
      "bbox": [
        148.0741729736328,
        202.78404235839844,
        153.1263885498047,
        207.0961151123047
      ],
      "text": "so"
    },
    {
      "page_no": 19,
      "bbox": [
        151.86546325683594,
        202.78611755371094,
        156.9176788330078,
        206.17503356933594
      ],
      "text": "et"
    },
    {
      "page_no": 19,
      "bbox": [
        155.65676879882812,
        202.78610229492188,
        160.708984375,
        206.17503356933594
      ],
      "text": "ta"
    },
    {
      "page_no": 19,
      "bbox": [
        159.4480743408203,
        202.78521728515625,
        164.5002899169922,
        205.71258544921875
      ],
      "text": "la"
    },
    {
      "page_no": 19,
      "bbox": [
        163.23936462402344,
        202.78369140625,
        168.2915802001953,
        213.71559143066406
      ],
      "text": "hi-latn"
    },
    {
      "page_no": 19,
      "bbox": [
        167.03067016601562,
        202.78530883789062,
        172.0828857421875,
        207.17636108398438
      ],
      "text": "ha"
    },
    {
      "page_no": 19,
      "bbox": [
        170.8219757080078,
        202.78280639648438,
        175.8741912841797,
        207.01585388183594
      ],
      "text": "sn"
    },
    {
      "page_no": 19,
      "bbox": [
        174.61326599121094,
        202.7838897705078,
        179.6654815673828,
        206.24765014648438
      ],
      "text": "ht"
    },
    {
      "page_no": 19,
      "bbox": [
        178.40457153320312,
        202.78485107421875,
        183.456787109375,
        208.1738739013672
      ],
      "text": "my"
    },
    {
      "page_no": 19,
      "bbox": [
        182.1958770751953,
        202.78494262695312,
        187.2480926513672,
        205.47946166992188
      ],
      "text": "jv"
    },
    {
      "page_no": 19,
      "bbox": [
        185.98716735839844,
        202.78707885742188,
        191.0393829345703,
        206.02215576171875
      ],
      "text": "af"
    },
    {
      "page_no": 19,
      "bbox": [
        189.77847290039062,
        202.7827911376953,
        194.8306884765625,
        207.01585388183594
      ],
      "text": "mi"
    },
    {
      "page_no": 19,
      "bbox": [
        193.5697784423828,
        202.78475952148438,
        198.6219940185547,
        204.63099670410156
      ],
      "text": "fi"
    },
    {
      "page_no": 19,
      "bbox": [
        197.36106872558594,
        202.78369140625,
        202.4132843017578,
        205.39920043945312
      ],
      "text": "fil"
    },
    {
      "page_no": 19,
      "bbox": [
        201.15237426757812,
        202.7868194580078,
        206.20458984375,
        207.86813354492188
      ],
      "text": "sw"
    },
    {
      "page_no": 19,
      "bbox": [
        204.9436798095703,
        202.78431701660156,
        209.9958953857422,
        207.32923889160156
      ],
      "text": "no"
    },
    {
      "page_no": 19,
      "bbox": [
        208.73497009277344,
        202.78530883789062,
        213.7871856689453,
        207.17636108398438
      ],
      "text": "eu"
    },
    {
      "page_no": 19,
      "bbox": [
        212.52626037597656,
        202.78424072265625,
        217.57847595214844,
        205.86546325683594
      ],
      "text": "lo"
    },
    {
      "page_no": 19,
      "bbox": [
        216.31756591796875,
        202.78475952148438,
        221.36978149414062,
        206.71009826660156
      ],
      "text": "sv"
    },
    {
      "page_no": 19,
      "bbox": [
        220.10887145996094,
        202.78628540039062,
        225.1610870361328,
        207.02349853515625
      ],
      "text": "yo"
    },
    {
      "page_no": 19,
      "bbox": [
        223.90017700195312,
        202.78814697265625,
        228.952392578125,
        207.33306884765625
      ],
      "text": "de"
    },
    {
      "page_no": 19,
      "bbox": [
        227.69146728515625,
        202.78530883789062,
        232.74368286132812,
        207.17636108398438
      ],
      "text": "en"
    },
    {
      "page_no": 19,
      "bbox": [
        231.48277282714844,
        202.78387451171875,
        236.5349884033203,
        206.24765014648438
      ],
      "text": "th"
    },
    {
      "page_no": 19,
      "bbox": [
        235.27406311035156,
        202.78656005859375,
        240.32627868652344,
        207.25662231445312
      ],
      "text": "co"
    },
    {
      "page_no": 19,
      "bbox": [
        239.06536865234375,
        202.78591918945312,
        244.11758422851562,
        205.3265838623047
      ],
      "text": "tr"
    },
    {
      "page_no": 19,
      "bbox": [
        242.85667419433594,
        202.7827911376953,
        247.9088897705078,
        207.01585388183594
      ],
      "text": "ml"
    },
    {
      "page_no": 19,
      "bbox": [
        246.64796447753906,
        202.78680419921875,
        251.70018005371094,
        205.78903198242188
      ],
      "text": "fy"
    },
    {
      "page_no": 19,
      "bbox": [
        250.43927001953125,
        202.7850341796875,
        255.49148559570312,
        206.9432373046875
      ],
      "text": "es"
    },
    {
      "page_no": 19,
      "bbox": [
        254.23057556152344,
        202.78736877441406,
        259.28277587890625,
        206.2552947998047
      ],
      "text": "ar"
    },
    {
      "page_no": 19,
      "bbox": [
        258.0218811035156,
        202.78269958496094,
        263.0740661621094,
        205.5520782470703
      ],
      "text": "sl"
    },
    {
      "page_no": 19,
      "bbox": [
        261.8132019042969,
        202.78289794921875,
        266.8653869628906,
        208.47962951660156
      ],
      "text": "mn"
    },
    {
      "page_no": 19,
      "bbox": [
        265.6044921875,
        202.7860107421875,
        270.65667724609375,
        206.7903594970703
      ],
      "text": "ky"
    },
    {
      "page_no": 19,
      "bbox": [
        269.3957824707031,
        202.78269958496094,
        274.4479675292969,
        205.5520782470703
      ],
      "text": "si"
    },
    {
      "page_no": 19,
      "bbox": [
        273.1871032714844,
        202.78700256347656,
        278.2392883300781,
        206.63748168945312
      ],
      "text": "iw"
    },
    {
      "page_no": 19,
      "bbox": [
        276.9783630371094,
        202.7830810546875,
        282.0305480957031,
        207.2489776611328
      ],
      "text": "hu"
    },
    {
      "page_no": 19,
      "bbox": [
        280.7696838378906,
        202.78271484375,
        285.8218688964844,
        205.5520782470703
      ],
      "text": "is"
    },
    {
      "page_no": 19,
      "bbox": [
        284.5610046386719,
        202.78530883789062,
        289.6131896972656,
        207.17636108398438
      ],
      "text": "ko"
    },
    {
      "page_no": 19,
      "bbox": [
        288.3522644042969,
        202.78591918945312,
        293.4044494628906,
        213.64297485351562
      ],
      "text": "ja-latn"
    },
    {
      "page_no": 19,
      "bbox": [
        292.1435852050781,
        202.786376953125,
        297.1957702636719,
        206.40817260742188
      ],
      "text": "ro"
    },
    {
      "page_no": 19,
      "bbox": [
        295.9349060058594,
        202.7850341796875,
        300.9870910644531,
        206.9432373046875
      ],
      "text": "uz"
    },
    {
      "page_no": 19,
      "bbox": [
        299.7261657714844,
        202.78573608398438,
        304.7783508300781,
        214.87362670898438
      ],
      "text": "zh-latn"
    },
    {
      "page_no": 19,
      "bbox": [
        303.5174865722656,
        202.78610229492188,
        308.5696716308594,
        206.17503356933594
      ],
      "text": "te"
    },
    {
      "page_no": 19,
      "bbox": [
        307.3088073730469,
        202.78512573242188,
        312.3609924316406,
        208.40701293945312
      ],
      "text": "am"
    },
    {
      "page_no": 19,
      "bbox": [
        311.1000671386719,
        202.78387451171875,
        316.1522521972656,
        208.32675170898438
      ],
      "text": "km"
    },
    {
      "page_no": 19,
      "bbox": [
        314.8913879394531,
        202.7850341796875,
        319.9435729980469,
        206.9432373046875
      ],
      "text": "kk"
    },
    {
      "page_no": 19,
      "bbox": [
        318.68267822265625,
        202.7840576171875,
        323.73486328125,
        207.0961151123047
      ],
      "text": "ku"
    },
    {
      "page_no": 19,
      "bbox": [
        322.4739685058594,
        202.78297424316406,
        327.5261535644531,
        205.7852020263672
      ],
      "text": "nl"
    },
    {
      "page_no": 19,
      "bbox": [
        326.2652893066406,
        202.78359985351562,
        331.3174743652344,
        206.0145263671875
      ],
      "text": "st"
    },
    {
      "page_no": 19,
      "bbox": [
        330.05657958984375,
        202.78379821777344,
        335.1087646484375,
        204.78387451171875
      ],
      "text": "it"
    },
    {
      "page_no": 19,
      "bbox": [
        333.8478698730469,
        202.78814697265625,
        338.9000549316406,
        207.33306884765625
      ],
      "text": "da"
    },
    {
      "page_no": 19,
      "bbox": [
        337.5780334472656,
        202.7841339111328,
        342.6302185058594,
        208.5598907470703
      ],
      "text": "mg"
    },
    {
      "page_no": 19,
      "bbox": [
        341.4304504394531,
        202.78379821777344,
        346.4826354980469,
        204.78387451171875
      ],
      "text": "lt"
    },
    {
      "page_no": 19,
      "bbox": [
        345.2217712402344,
        202.78485107421875,
        350.2739562988281,
        206.09478759765625
      ],
      "text": "sr"
    },
    {
      "page_no": 19,
      "bbox": [
        349.0130615234375,
        202.78564453125,
        354.06524658203125,
        207.17254638671875
      ],
      "text": "sq"
    },
    {
      "page_no": 19,
      "bbox": [
        352.80438232421875,
        202.78369140625,
        357.8565673828125,
        207.47830200195312
      ],
      "text": "mt"
    },
    {
      "page_no": 19,
      "bbox": [
        356.5650939941406,
        202.78424072265625,
        361.6172790527344,
        205.86546325683594
      ],
      "text": "gl"
    },
    {
      "page_no": 19,
      "bbox": [
        360.386962890625,
        202.78297424316406,
        365.43914794921875,
        205.7852020263672
      ],
      "text": "hi"
    },
    {
      "page_no": 19,
      "bbox": [
        364.17828369140625,
        202.7850341796875,
        369.23046875,
        206.9432373046875
      ],
      "text": "cs"
    },
    {
      "page_no": 19,
      "bbox": [
        367.9695739746094,
        202.7819061279297,
        373.0217590332031,
        210.71160888671875
      ],
      "text": "hmn"
    },
    {
      "page_no": 19,
      "bbox": [
        371.73028564453125,
        202.78424072265625,
        376.782470703125,
        205.86546325683594
      ],
      "text": "ig"
    },
    {
      "page_no": 19,
      "bbox": [
        375.5521545410156,
        202.78834533691406,
        380.6043395996094,
        210.2606201171875
      ],
      "text": "haw"
    },
    {
      "page_no": 19,
      "bbox": [
        379.3434753417969,
        202.78494262695312,
        384.3956604003906,
        205.47946166992188
      ],
      "text": "lv"
    },
    {
      "page_no": 19,
      "bbox": [
        383.134765625,
        202.7869110107422,
        388.18695068359375,
        205.1737060546875
      ],
      "text": "fr"
    },
    {
      "page_no": 19,
      "bbox": [
        386.9260559082031,
        202.78262329101562,
        391.9782409667969,
        208.24649047851562
      ],
      "text": "sm"
    },
    {
      "page_no": 19,
      "bbox": [
        390.7173767089844,
        202.78512573242188,
        395.7695617675781,
        206.32791137695312
      ],
      "text": "ru"
    },
    {
      "page_no": 19,
      "bbox": [
        394.447509765625,
        202.78656005859375,
        399.49969482421875,
        207.25662231445312
      ],
      "text": "ga"
    },
    {
      "page_no": 19,
      "bbox": [
        398.2999572753906,
        202.78378295898438,
        403.3521423339844,
        206.86297607421875
      ],
      "text": "sk"
    },
    {
      "page_no": 19,
      "bbox": [
        402.0912780761719,
        202.78512573242188,
        407.1434631347656,
        206.32791137695312
      ],
      "text": "ur"
    },
    {
      "page_no": 19,
      "bbox": [
        405.8214111328125,
        202.78512573242188,
        410.87359619140625,
        206.32791137695312
      ],
      "text": "tg"
    },
    {
      "page_no": 19,
      "bbox": [
        409.6738586425781,
        202.78494262695312,
        414.7260437011719,
        205.47946166992188
      ],
      "text": "yi"
    },
    {
      "page_no": 19,
      "bbox": [
        413.4651794433594,
        202.78672790527344,
        418.5173645019531,
        206.40435791015625
      ],
      "text": "pt"
    },
    {
      "page_no": 19,
      "bbox": [
        417.2564697265625,
        202.78726196289062,
        422.30865478515625,
        206.87062072753906
      ],
      "text": "az"
    },
    {
      "page_no": 19,
      "bbox": [
        421.0477600097656,
        202.78564453125,
        426.0999450683594,
        207.17254638671875
      ],
      "text": "ps"
    },
    {
      "page_no": 19,
      "bbox": [
        424.8085021972656,
        202.78717041015625,
        429.8606872558594,
        207.48594665527344
      ],
      "text": "bg"
    },
    {
      "page_no": 19,
      "bbox": [
        428.63037109375,
        202.78582763671875,
        433.68255615234375,
        214.25830078125
      ],
      "text": "ru-latn"
    },
    {
      "page_no": 19,
      "bbox": [
        432.4216613769531,
        202.78753662109375,
        437.4738464355469,
        207.103759765625
      ],
      "text": "ca"
    },
    {
      "page_no": 19,
      "bbox": [
        436.2129821777344,
        202.78582763671875,
        441.2651672363281,
        205.94190979003906
      ],
      "text": "pl"
    },
    {
      "page_no": 19,
      "bbox": [
        440.0042724609375,
        202.78387451171875,
        445.05645751953125,
        208.32675170898438
      ],
      "text": "mk"
    },
    {
      "page_no": 19,
      "bbox": [
        443.7955627441406,
        202.78582763671875,
        448.8477478027344,
        205.94190979003906
      ],
      "text": "id"
    },
    {
      "page_no": 19,
      "bbox": [
        447.5868835449219,
        202.7840576171875,
        452.6390686035156,
        207.0961151123047
      ],
      "text": "kn"
    },
    {
      "page_no": 19,
      "bbox": [
        451.378173828125,
        202.78530883789062,
        456.43035888671875,
        207.17636108398438
      ],
      "text": "ne"
    },
    {
      "page_no": 19,
      "bbox": [
        455.1694641113281,
        202.78707885742188,
        460.2216491699219,
        206.02215576171875
      ],
      "text": "fa"
    },
    {
      "page_no": 19,
      "bbox": [
        458.96075439453125,
        202.78814697265625,
        464.012939453125,
        207.33306884765625
      ],
      "text": "be"
    },
    {
      "page_no": 19,
      "bbox": [
        462.7520751953125,
        202.78628540039062,
        467.80426025390625,
        207.02349853515625
      ],
      "text": "ka"
    },
    {
      "page_no": 19,
      "bbox": [
        466.5433654785156,
        202.78591918945312,
        471.5955505371094,
        213.64297485351562
      ],
      "text": "el-latn"
    },
    {
      "page_no": 19,
      "bbox": [
        470.33465576171875,
        202.7840576171875,
        475.3868408203125,
        207.0961151123047
      ],
      "text": "uk"
    },
    {
      "page_no": 19,
      "bbox": [
        474.0648193359375,
        202.78433227539062,
        479.11700439453125,
        207.32923889160156
      ],
      "text": "gu"
    },
    {
      "page_no": 19,
      "bbox": [
        477.9172668457031,
        202.78591918945312,
        482.9694519042969,
        207.4056854248047
      ],
      "text": "bn"
    },
    {
      "page_no": 19,
      "bbox": [
        481.70855712890625,
        202.78726196289062,
        486.7607421875,
        206.87062072753906
      ],
      "text": "cy"
    },
    {
      "page_no": 19,
      "bbox": [
        485.4998779296875,
        202.7850341796875,
        490.55206298828125,
        206.9432373046875
      ],
      "text": "hy"
    },
    {
      "page_no": 19,
      "bbox": [
        489.2911682128906,
        202.78582763671875,
        494.3433532714844,
        205.94190979003906
      ],
      "text": "lb"
    },
    {
      "page_no": 19,
      "bbox": [
        493.08245849609375,
        202.78814697265625,
        498.1346435546875,
        207.33306884765625
      ],
      "text": "pa"
    },
    {
      "page_no": 19,
      "bbox": [
        496.873779296875,
        202.78521728515625,
        501.92596435546875,
        205.71258544921875
      ],
      "text": "el"
    },
    {
      "page_no": 19,
      "bbox": [
        500.6650695800781,
        202.78939819335938,
        505.7172546386719,
        209.492431640625
      ],
      "text": "ceb"
    },
    {
      "page_no": 19,
      "bbox": [
        504.45635986328125,
        202.78494262695312,
        509.508544921875,
        205.47946166992188
      ],
      "text": "vi"
    },
    {
      "page_no": 19,
      "bbox": [
        508.2477111816406,
        202.78564453125,
        513.2999267578125,
        207.17254638671875
      ],
      "text": "sd"
    },
    {
      "page_no": 19,
      "bbox": [
        512.0083618164062,
        202.78717041015625,
        517.0606079101562,
        207.48594665527344
      ],
      "text": "gd"
    },
    {
      "page_no": 19,
      "bbox": [
        303.561767578125,
        215.15736389160156,
        324.4995422363281,
        221.10113525390625
      ],
      "text": "Language"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        186.4900665283203,
        106.97724914550781,
        192.433837890625
      ],
      "text": "1.8"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        173.9588623046875,
        106.97724914550781,
        179.9026336669922
      ],
      "text": "1.6"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        161.42767333984375,
        106.97724914550781,
        167.37144470214844
      ],
      "text": "1.4"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        148.89646911621094,
        106.97724914550781,
        154.84024047851562
      ],
      "text": "1.2"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        136.36526489257812,
        106.97724914550781,
        142.3090362548828
      ],
      "text": "1.0"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        123.83406829833984,
        106.97724914550781,
        129.77784729003906
      ],
      "text": "0.8"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        111.30286407470703,
        106.97724914550781,
        117.24665069580078
      ],
      "text": "0.6"
    },
    {
      "page_no": 19,
      "bbox": [
        100.1773681640625,
        98.77166748046875,
        106.97724914550781,
        104.7154541015625
      ],
      "text": "0.4"
    },
    {
      "page_no": 19,
      "bbox": [
        90.52374267578125,
        126.66175842285156,
        96.467529296875,
        167.8964385986328
      ],
      "text": "Neg. Log Perplexity"
    },
    {
      "page_no": 19,
      "bbox": [
        500.13226318359375,
        183.52371215820312,
        514.358154296875,
        196.33920288085938
      ],
      "text": "Switch\nDense"
    },
    {
      "page_no": 19,
      "bbox": [
        90.0,
        239.6361846923828,
        522.0587768554688,
        291.19329833984375
      ],
      "text": "Figure 7: Multilingual pre-training on 101 languages.\nImprovements of Switch T5 Base\nmodel over dense baseline when multi-task training on 101 languages. We observe\nSwitch Transformers to do quite well in the multi-task training setup and yield\nimprovements on all 101 languages."
    },
    {
      "page_no": 19,
      "bbox": [
        241.8482666015625,
        473.49810791015625,
        411.5443420410156,
        488.2065734863281
      ],
      "text": "4\n6\n8\n10\n12\n14\n16\nSwitch Speedup over Dense Baseline"
    },
    {
      "page_no": 19,
      "bbox": [
        211.85922241210938,
        467.5772399902344,
        215.64291381835938,
        475.8455505371094
      ],
      "text": "0"
    },
    {
      "page_no": 19,
      "bbox": [
        208.07382202148438,
        438.2176513671875,
        215.64120483398438,
        446.4859619140625
      ],
      "text": "10"
    },
    {
      "page_no": 19,
      "bbox": [
        208.07382202148438,
        408.85809326171875,
        215.64120483398438,
        417.12640380859375
      ],
      "text": "20"
    },
    {
      "page_no": 19,
      "bbox": [
        208.07382202148438,
        379.49853515625,
        215.64120483398438,
        387.766845703125
      ],
      "text": "30"
    },
    {
      "page_no": 19,
      "bbox": [
        208.07382202148438,
        350.138916015625,
        215.64120483398438,
        358.4072265625
      ],
      "text": "40"
    },
    {
      "page_no": 19,
      "bbox": [
        208.07382202148438,
        320.77935791015625,
        215.64120483398438,
        329.04766845703125
      ],
      "text": "50"
    },
    {
      "page_no": 19,
      "bbox": [
        198.72857666015625,
        365.03497314453125,
        206.99688720703125,
        430.460205078125
      ],
      "text": "Number of Languages"
    },
    {
      "page_no": 19,
      "bbox": [
        90.0,
        507.24420166015625,
        522.0768432617188,
        572.3502807617188
      ],
      "text": "Figure 8: Multilingual pre-training on 101 languages. We histogram for each language, the\nstep speedup of Switch Transformers over the FLOP matched T5 dense baseline\nto reach the same quality. Over all 101 languages, we achieve a mean step speed-\nup over mT5-Base of 5x and, for 91% of languages, we record a 4x, or greater,\nspeedup to reach the ﬁnal perplexity of mT5-Base."
    },
    {
      "page_no": 19,
      "bbox": [
        90.0,
        610.8281860351562,
        522.0438232421875,
        705.2452392578125
      ],
      "text": "and computation performed and is ultimately limited by the memory per accelerator. Once\nit exceeds the size of the accelerator’s memory, single program multiple data (SPMD) model-\nparallelism can be employed. This section studies the trade-oﬀs of combining data, model,\nand expert-parallelism.\nReviewing the Feed-Forward Network (FFN) Layer. We use the FFN layer as\nan example of how data, model and expert-parallelism works in Mesh TensorFlow (Shazeer\net al., 2018) and review it brieﬂy here. We assume B tokens in the batch, each of dimension"
    },
    {
      "page_no": 19,
      "bbox": [
        301.01904296875,
        724.9639282226562,
        310.98162841796875,
        734.926513671875
      ],
      "text": "19"
    },
    {
      "page_no": 20,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 20,
      "bbox": [
        89.99996948242188,
        93.29524230957031,
        522.0175170898438,
        159.53631591796875
      ],
      "text": "dmodel. Both the input (x) and output (y) of the FFN are of size [B, dmodel] and the inter-\nmediate (h) is of size [B, dff] where dff is typically several times larger than dmodel. In the\nFFN, the intermediate is h = xWin and then the output of the layer is y = ReLU(h)Wout.\nThus Win and Wout are applied independently to each token and have sizes [dmodel, dff]\nand [dff, dmodel]."
    },
    {
      "page_no": 20,
      "bbox": [
        89.99996948242188,
        164.93629455566406,
        522.0330200195312,
        297.7884521484375
      ],
      "text": "We describe two aspects of partitioning: how the weights and batches of data divide\nover cores, depicted in Figure 9. We denote all cores available as N which Mesh Tensorﬂow\nmay then remap into a logical multidimensional mesh of processors.\nHere we create a\ntwo-dimensional logical mesh, with one dimension representing the number of ways for\ndata-parallel sharding (n) and the other, the model-parallel sharding (m). The total cores\nmust equal the ways to shard across both data and model-parallelism, e.g. N = n × m.\nTo shard the layer across cores, the tensors containing that batch of B tokens are sharded\nacross n data-parallel cores, so each core contains B/n tokens. Tensors and variables with\ndff are then sharded across m model-parallel cores. For the variants with experts-layers,\nwe consider E experts, each of which can process up to C tokens."
    },
    {
      "page_no": 20,
      "bbox": [
        172.88600158691406,
        322.1571960449219,
        439.1468505859375,
        414.7603454589844
      ],
      "text": "Term\nDescription\nB\nNumber of tokens in the batch.\nN\nNumber of total cores.\nn\nNumber of ways for data-parallelism sharding.\nm\nNumber of ways for model-parallelism sharding.\nE\nNumber of experts in Switch layers.\nC\nExpert capacity, the batch size of each expert."
    },
    {
      "page_no": 20,
      "bbox": [
        90.00000762939453,
        453.490234375,
        203.84738159179688,
        464.39935302734375
      ],
      "text": "5.1 Data Parallelism"
    },
    {
      "page_no": 20,
      "bbox": [
        90.0,
        476.6952209472656,
        522.1093139648438,
        541.8013305664062
      ],
      "text": "When training data parallel models, which is the standard for distributed training, then all\ncores are allocated to the data-parallel dimension or n = N, m = 1. This has the advantage\nthat no communication is needed until the entire forward and backward pass is ﬁnished and\nthe gradients need to be then aggregated across all cores. This corresponds to the left-most\ncolumn of Figure 9."
    },
    {
      "page_no": 20,
      "bbox": [
        90.0,
        562.7372436523438,
        211.88735961914062,
        573.6463623046875
      ],
      "text": "5.2 Model Parallelism"
    },
    {
      "page_no": 20,
      "bbox": [
        90.0,
        585.9421997070312,
        522.054931640625,
        705.245361328125
      ],
      "text": "We now consider a scenario where all cores are allocated exclusively to the model-parallel\ndimension and so n = 1, m = N. Now all cores must keep the full B tokens and each\ncore will contain a unique slice of the weights. For each forward and backward pass, a\ncommunication cost is now incurred. Each core sends a tensor of [B, dmodel] to compute the\nsecond matrix multiplication ReLU(h)Wout because the dff dimension is partitioned and\nmust be summed over. As a general rule, whenever a dimension that is partitioned across\ncores must be summed, then an all-reduce operation is added for both the forward and\nbackward pass. This contrasts with pure data parallelism where an all-reduce only occurs\nat the end of the entire forward and backward pass."
    },
    {
      "page_no": 20,
      "bbox": [
        301.01910400390625,
        724.9639282226562,
        310.981689453125,
        734.926513671875
      ],
      "text": "20"
    },
    {
      "page_no": 21,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 21,
      "bbox": [
        362.48291015625,
        111.81315612792969,
        416.0080261230469,
        118.84391021728516
      ],
      "text": "Expert and Data"
    },
    {
      "page_no": 21,
      "bbox": [
        194.9120330810547,
        111.81315612792969,
        407.8102722167969,
        127.19293212890625
      ],
      "text": "Parallelism\nModel \nParallelism"
    },
    {
      "page_no": 21,
      "bbox": [
        438.2557678222656,
        111.81315612792969,
        516.0018920898438,
        118.84391021728516
      ],
      "text": "Expert, Model and Data"
    },
    {
      "page_no": 21,
      "bbox": [
        458.5584411621094,
        120.16217803955078,
        495.6878356933594,
        127.19293212890625
      ],
      "text": "Parallelism"
    },
    {
      "page_no": 21,
      "bbox": [
        197.33572387695312,
        92.84762573242188,
        414.1676025390625,
        103.39376068115234
      ],
      "text": "How the model weights are split over cores"
    },
    {
      "page_no": 21,
      "bbox": [
        226.85939025878906,
        229.06849670410156,
        385.09356689453125,
        239.6146240234375
      ],
      "text": "How the data is split over cores"
    },
    {
      "page_no": 21,
      "bbox": [
        274.40625,
        111.81315612792969,
        328.3180847167969,
        118.84391021728516
      ],
      "text": "Model and Data"
    },
    {
      "page_no": 21,
      "bbox": [
        107.02760314941406,
        111.81315612792969,
        319.9258728027344,
        127.19293212890625
      ],
      "text": "Parallelism\nData \nParallelism"
    },
    {
      "page_no": 21,
      "bbox": [
        362.48291015625,
        248.0340118408203,
        416.0080261230469,
        255.0647735595703
      ],
      "text": "Expert and Data"
    },
    {
      "page_no": 21,
      "bbox": [
        194.9120330810547,
        248.0340118408203,
        407.8102722167969,
        263.413818359375
      ],
      "text": "Parallelism\nModel \nParallelism"
    },
    {
      "page_no": 21,
      "bbox": [
        438.2557678222656,
        248.0340118408203,
        516.0018920898438,
        255.0647735595703
      ],
      "text": "Expert, Model and Data"
    },
    {
      "page_no": 21,
      "bbox": [
        278.80047607421875,
        248.0340118408203,
        495.6878356933594,
        263.413818359375
      ],
      "text": "Parallelism\nModel and Data"
    },
    {
      "page_no": 21,
      "bbox": [
        107.02760314941406,
        248.0340118408203,
        324.3200988769531,
        263.413818359375
      ],
      "text": "Parallelism\nData \nParallelism"
    },
    {
      "page_no": 21,
      "bbox": [
        90.0,
        358.5008239746094,
        522.037109375,
        532.1414184570312
      ],
      "text": "Figure 9: Data and weight partitioning strategies. Each 4×4 dotted-line grid represents 16\ncores and the shaded squares are the data contained on that core (either model\nweights or batch of tokens). We illustrate both how the model weights and the\ndata tensors are split for each strategy. First Row: illustration of how model\nweights are split across the cores. Shapes of diﬀerent sizes in this row represent\nlarger weight matrices in the Feed Forward Network (FFN) layers (e.g larger dff\nsizes). Each color of the shaded squares identiﬁes a unique weight matrix. The\nnumber of parameters per core is ﬁxed, but larger weight matrices will apply\nmore computation to each token. Second Row: illustration of how the data\nbatch is split across cores. Each core holds the same number of tokens which\nmaintains a ﬁxed memory usage across all strategies. The partitioning strategies\nhave diﬀerent properties of allowing each core to either have the same tokens or\ndiﬀerent tokens across cores, which is what the diﬀerent colors symbolize."
    },
    {
      "page_no": 21,
      "bbox": [
        89.99995422363281,
        602.6173095703125,
        266.9783020019531,
        613.5264282226562
      ],
      "text": "5.3 Model and Data Parallelism"
    },
    {
      "page_no": 21,
      "bbox": [
        89.99995422363281,
        640.1393432617188,
        522.070068359375,
        706.3803100585938
      ],
      "text": "It is common to mix both model and data parallelism for large scale models, which was done\nin the largest T5 models (Raﬀel et al., 2019; Xue et al., 2020) and in GPT-3 (Brown et al.,\n2020). With a total of N = n × m cores, now each core will be responsible for B/n tokens\nand dff/m of both the weights and intermediate activation. In the forward and backward\npass each core communicates a tensor of size [B/n, dmodel] in an all-reduce operation."
    },
    {
      "page_no": 21,
      "bbox": [
        301.0190124511719,
        724.9640502929688,
        310.9815979003906,
        734.9266357421875
      ],
      "text": "21"
    },
    {
      "page_no": 22,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 22,
      "bbox": [
        90.0,
        93.29524230957031,
        270.2292785644531,
        104.20433807373047
      ],
      "text": "5.4 Expert and Data Parallelism"
    },
    {
      "page_no": 22,
      "bbox": [
        90.0,
        112.60426330566406,
        522.087646484375,
        205.94329833984375
      ],
      "text": "Next we describe the partitioning strategy for expert and data parallelism. Switch Trans-\nformers will allocate all of their cores to the data partitioning dimension n, which will also\ncorrespond to the number of experts in the model. For each token per core a router locally\ncomputes assignments to the experts. The output is a binary matrix of size [n, B/n, E,\nC] which is partitioned across the ﬁrst dimension and determines expert assignment. This\nbinary matrix is then used to do a gather via matrix multiplication with the input tensor\nof [n, B/n, dmodel]."
    },
    {
      "page_no": 22,
      "bbox": [
        167.009033203125,
        213.94532775878906,
        522.001708984375,
        225.98931884765625
      ],
      "text": "einsum([n, B/n, dmodel], [n, B/n, E, C], dimension = [B/n])\n(7)"
    },
    {
      "page_no": 22,
      "bbox": [
        90.00003051757812,
        233.99134826660156,
        522.0221557617188,
        312.646484375
      ],
      "text": "resulting in the ﬁnal tensor of shape [n, E, C, dmodel], which is sharded across the ﬁrst\ndimension. Because each core has its own expert, we do an all-to-all communication of\nsize [E, C, dmodel] to now shard the E dimension instead of the n-dimension. There are\nadditional communication costs of bﬂoat16 tensors of size E×C ×dmodel in the forward pass\nto analogusly receive the tokens from each expert located on diﬀerent cores. See Appendix F\nfor a detailed analysis of the expert partitioning code."
    },
    {
      "page_no": 22,
      "bbox": [
        90.00009155273438,
        329.6863708496094,
        312.633056640625,
        340.5954895019531
      ],
      "text": "5.5 Expert, Model and Data Parallelism"
    },
    {
      "page_no": 22,
      "bbox": [
        90.00003051757812,
        348.995361328125,
        522.054931640625,
        522.49462890625
      ],
      "text": "In the design of our best model, we seek to balance the FLOPS per token and the parameter\ncount. When we scale the number of experts, we increase the number of parameters, but do\nnot change the FLOPs per token. In order to increase FLOPs, we must also increase the dff\ndimension (which also increases parameters, but at a slower rate). This presents a trade-oﬀ:\nas we increase dff we will run out of memory per core, which then necessitates increasing\nm. But since we have a ﬁxed number of cores N, and N = n × m, we must decrease n,\nwhich forces use of a smaller batch-size (in order to hold tokens per core constant).\nWhen combining both model and expert-parallelism, we will have all-to-all communica-\ntion costs from routing the tokens to the correct experts along with the internal all-reduce\ncommunications from the model parallelism. Balancing the FLOPS, communication costs\nand memory per core becomes quite complex when combining all three methods where the\nbest mapping is empirically determined. See our further analysis in section 5.6 for how the\nnumber of experts eﬀects the downstream performance as well."
    },
    {
      "page_no": 22,
      "bbox": [
        90.00003051757812,
        539.5344848632812,
        307.658447265625,
        550.443603515625
      ],
      "text": "5.6 Towards Trillion Parameter Models"
    },
    {
      "page_no": 22,
      "bbox": [
        90.00003051757812,
        558.844482421875,
        522.0440063476562,
        705.24560546875
      ],
      "text": "Combining expert, model and data parallelism, we design two large Switch Transformer\nmodels, one with 395 billion and 1.6 trillion parameters, respectively. We study how these\nmodels perform on both up-stream pre-training as language models and their downstream\nﬁne-tuning performance. The parameters, FLOPs per sequence and hyper-parameters of\nthe two diﬀerent models are listed below in Table 9. Standard hyper-parameters of the\nTransformer, including dmodel, dff, dkv, number of heads and number of layers are described,\nas well as a less common feature, FFNGEGLU, which refers to a variation of the FFN layer\nwhere the expansion matrix is substituted with two sets of weights which are non-linearly\ncombined (Shazeer, 2020).\nThe Switch-C model is designed using only expert-parallelism, and no model-parallelism,\nas described earlier in Section 5.4. As a result, the hyper-parameters controlling the width,"
    },
    {
      "page_no": 22,
      "bbox": [
        301.01904296875,
        724.9641723632812,
        310.98162841796875,
        734.9267578125
      ],
      "text": "22"
    },
    {
      "page_no": 23,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 23,
      "bbox": [
        102.5699691772461,
        95.1133804321289,
        515.6041870117188,
        129.7481689453125
      ],
      "text": "Model\nParameters\nFLOPs/seq\ndmodel\nFFNGEGLU\ndff\ndkv\nNum. Heads\nT5-Base\n0.2B\n124B\n768\n✓\n2048\n64\n12\nT5-Large\n0.7B\n425B\n1024\n✓\n2816\n64\n16\nT5-XXL\n11B\n6.3T\n4096\n✓\n10240\n64\n64"
    },
    {
      "page_no": 23,
      "bbox": [
        96.40896606445312,
        133.57107543945312,
        499.22637939453125,
        169.52865600585938
      ],
      "text": "Switch-Base\n7B\n124B\n768\n✓\n2048\n64\n12\nSwitch-Large\n26B\n425B\n1024\n✓\n2816\n64\n16\nSwitch-XXL\n395B\n6.3T\n4096\n✓\n10240\n64\n64\nSwitch-C\n1571B\n890B\n2080\n6144\n64\n32"
    },
    {
      "page_no": 23,
      "bbox": [
        102.5699691772461,
        184.77243041992188,
        449.5240783691406,
        219.40728759765625
      ],
      "text": "Model\nExpert Freq.\nNum. Layers\nNum Experts\nNeg. Log Perp. @250k\nNeg. Log Perp. @ 500k\nT5-Base\n–\n12\n–\n-1.599\n-1.556\nT5-Large\n–\n24\n–\n-1.402\n-1.350\nT5-XXL\n–\n24\n–\n-1.147\n-1.095"
    },
    {
      "page_no": 23,
      "bbox": [
        96.40898132324219,
        224.8182373046875,
        423.0184326171875,
        259.187744140625
      ],
      "text": "Switch-Base\n1/2\n12\n128\n-1.370\n-1.306\nSwitch-Large\n1/2\n24\n128\n-1.248\n-1.177\nSwitch-XXL\n1/2\n24\n64\n-1.086\n-1.008\nSwitch-C\n1\n15\n2048\n-1.096\n-1.043"
    },
    {
      "page_no": 23,
      "bbox": [
        90.0,
        274.1431884765625,
        522.0520629882812,
        352.79833984375
      ],
      "text": "Table 9: Switch model design and pre-training performance.\nWe compare the hyper-\nparameters and pre-training performance of the T5 models to our Switch Trans-\nformer variants. The last two columns record the pre-training model quality on the\nC4 data set after 250k and 500k steps, respectively. We observe that the Switch-\nC Transformer variant is 4x faster to a ﬁxed perplexity (with the same compute\nbudget) than the T5-XXL model, with the gap increasing as training progresses."
    },
    {
      "page_no": 23,
      "bbox": [
        90.0,
        404.98822021484375,
        522.0767211914062,
        651.8113403320312
      ],
      "text": "depth, number of heads, and so on, are all much smaller than the T5-XXL model.\nIn\ncontrast, the Switch-XXL is FLOP-matched to the T5-XXL model, which allows for larger\ndimensions of the hyper-parameters, but at the expense of additional communication costs\ninduced by model-parallelism (see Section 5.5 for more details).\nSample eﬃciency versus T5-XXL. In the ﬁnal two columns of Table 9 we record\nthe negative log perplexity on the C4 corpus after 250k and 500k steps, respectively. After\n250k steps, we ﬁnd both Switch Transformer variants to improve over the T5-XXL version’s\nnegative log perplexity by over 0.061.10 To contextualize the signiﬁcance of a gap of 0.061,\nwe note that the T5-XXL model had to train for an additional 250k steps to increase\n0.052. The gap continues to increase with additional training, with the Switch-XXL model\nout-performing the T5-XXL by 0.087 by 500k steps.\nTraining instability. However, as described in the introduction, large sparse models\ncan be unstable, and as we increase the scale, we encounter some sporadic issues.\nWe\nﬁnd that the larger Switch-C model, with 1.6T parameters and 2048 experts, exhibits no\ntraining instability at all. Instead, the Switch XXL version, with nearly 10x larger FLOPs\nper sequence, is sometimes unstable. As a result, though this is our better model on a\nstep-basis, we do not pre-train for a full 1M steps, in-line with the ﬁnal reported results of\nT5 (Raﬀel et al., 2019)."
    },
    {
      "page_no": 23,
      "bbox": [
        89.072998046875,
        673.9364624023438,
        522.052001953125,
        704.8208618164062
      ],
      "text": "10. This reported quality diﬀerence is a lower bound, and may actually be larger. The T5-XXL was pre-\ntrained on an easier C4 data set which included duplicated, and thus easily copied, snippets within\nexamples."
    },
    {
      "page_no": 23,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "23"
    },
    {
      "page_no": 24,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 24,
      "bbox": [
        90.0,
        93.29524230957031,
        522.1093139648438,
        432.2225036621094
      ],
      "text": "Reasoning ﬁne-tuning performance.\nAs a preliminary assessment of the model\nquality, we use a Switch-XXL model partially pre-trained on 503B tokens, or approximately\nhalf the text used by the T5-XXL model. Using this checkpoint, we conduct multi-task\ntraining for eﬃciency, where all tasks are learned jointly, rather than individually ﬁne-tuned.\nWe ﬁnd that SQuAD accuracy on the validation set increases to 89.7 versus state-of-the-art\nof 91.3. Next, the average SuperGLUE test score is recorded at 87.5 versus the T5 version\nobtaining a score of 89.3 compared to the state-of-the-art of 90.0 (Wang et al., 2019). On\nANLI (Nie et al., 2019), Switch XXL improves over the prior state-of-the-art to get a 65.7\naccuracy versus the prior best of 49.4 (Yang et al., 2020). We note that while the Switch-\nXXL has state-of-the-art Neg. Log Perp. on the upstream pre-training task, its gains have\nnot yet fully translated to SOTA downstream performance. We study this issue more in\nAppendix E.\nKnowledge-based ﬁne-tuning performance. Finally, we also conduct an early ex-\namination of the model’s knowledge with three closed-book knowledge-based tasks: Natural\nQuestions, WebQuestions and TriviaQA, without additional pre-training using Salient Span\nMasking (Guu et al., 2020). In all three cases, we observe improvements over the prior state-\nof-the-art T5-XXL model (without SSM). Natural Questions exact match increases to 34.4\nversus the prior best of 32.8, Web Questions increases to 41.0 over 37.2, and TriviaQA\nincreases to 47.5 versus 42.9.\nSumming up, despite training on less than half the data of other models, we already\nﬁnd comparable, and sometimes state-of-the-art, model quality.\nCurrently, the Switch\nTransformer translates substantial upstream gains better to knowledge-based tasks, than\nreasoning-tasks (see Appendix E). Extracting stronger ﬁne-tuning performance from large\nexpert models is an active research question, and the pre-training perplexity indicates future\nimprovements should be possible."
    },
    {
      "page_no": 24,
      "bbox": [
        90.0,
        453.14385986328125,
        188.17608642578125,
        465.09906005859375
      ],
      "text": "6. Related Work"
    },
    {
      "page_no": 24,
      "bbox": [
        89.99996948242188,
        476.12939453125,
        522.0657958984375,
        705.2454833984375
      ],
      "text": "The importance of scale in neural networks is widely recognized and several approaches have\nbeen proposed. Recent works have scaled models to billions of parameters through using\nmodel parallelism (e.g. splitting weights and tensors across multiple cores) (Shazeer et al.,\n2018; Rajbhandari et al., 2019; Raﬀel et al., 2019; Brown et al., 2020; Shoeybi et al., 2019).\nAlternatively, Harlap et al. (2018); Huang et al. (2019) propose using pipeline based model\nparallelism, where diﬀerent layers are split across devices and micro-batches are pipelined to\nthe diﬀerent layers. Finally, Product Key networks (Lample et al., 2019) were proposed to\nscale up the capacity of neural networks by doing a lookup for learnable embeddings based\non the incoming token representations to a given layer.\nOur work studies a speciﬁc model in a class of methods that do conditional computation,\nwhere computation decisions are made dynamically based on the input. Cho and Bengio\n(2014) proposed adaptively selecting weights based on certain bit patterns occuring in the\nmodel hidden-states.\nEigen et al. (2013) built stacked expert layers with dense matrix\nmultiplications and ReLU activations and showed promising results on jittered MNIST and\nmonotone speech. In computer vision Puigcerver et al. (2020) manually route tokens based\non semantic classes during upstream pre-training and then select the relevant experts to be\nused according to the downstream task."
    },
    {
      "page_no": 24,
      "bbox": [
        301.01898193359375,
        724.963134765625,
        310.9815673828125,
        734.9257202148438
      ],
      "text": "24"
    },
    {
      "page_no": 25,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 25,
      "bbox": [
        90.0,
        93.29524230957031,
        522.07666015625,
        348.9764404296875
      ],
      "text": "Mixture of Experts (MoE), in the context of modern deep learning architectures, was\nproven eﬀective in Shazeer et al. (2017). That work added an MoE layer which was stacked\nbetween LSTM (Hochreiter and Schmidhuber, 1997) layers, and tokens were separately\nrouted to combinations of experts.\nThis resulted in state-of-the-art results in language\nmodeling and machine translation benchmarks. The MoE layer was reintroduced into the\nTransformer architecture by the Mesh Tensorﬂow library (Shazeer et al., 2018) where MoE\nlayers were introduced as a substitute of the FFN layers, however, there were no accom-\npanying NLP results. More recently, through advances in machine learning infrastructure,\nGShard (Lepikhin et al., 2020), which extended the XLA compiler, used the MoE Trans-\nformer to dramatically improve machine translation across 100 languages. Finally Fan et al.\n(2021) chooses a diﬀerent deterministic MoE strategy to split the model parameters into\nnon-overlapping groups of languages.\nSparsity along the sequence length dimension (L) in the Transformer attention patterns\nhas been a successful technique to reduce the attention complexity from O(L2) (Child et al.,\n2019; Correia et al., 2019; Sukhbaatar et al., 2019; Kitaev et al., 2020; Zaheer et al., 2020;\nBeltagy et al., 2020). This has enabled learning longer sequences than previously possi-\nble. This version of the Switch Transformer does not employ attention sparsity, but these\ntechniques are complimentary, and, as future work, these could be combined to potentially\nimprove learning on tasks requiring long contexts."
    },
    {
      "page_no": 25,
      "bbox": [
        90.00006103515625,
        369.3647766113281,
        167.67300415039062,
        381.3199768066406
      ],
      "text": "7. Discussion"
    },
    {
      "page_no": 25,
      "bbox": [
        90.00003051757812,
        391.8193054199219,
        522.0548095703125,
        705.2454833984375
      ],
      "text": "We pose and discuss questions about the Switch Transformer, and sparse expert models\ngenerally, where sparsity refers to weights, not on attention patterns.\nIsn’t Switch Transformer better due to sheer parameter count? Yes, and by\ndesign! Parameters, independent of the total FLOPs used, are a useful axis to scale neural\nlanguage models. Large models have been exhaustively shown to perform better (Kaplan\net al., 2020). But in this case, our model is more sample eﬃcient and faster while using the\nsame computational resources.\nI don’t have access to a supercomputer—is this still useful for me? Though\nthis work has focused on extremely large models, we also ﬁnd that models with as few as two\nexperts improves performance while easily ﬁtting within memory constraints of commonly\navailable GPUs or TPUs (details in Appendix D). We therefore believe our techniques are\nuseful in small-scale settings.\nDo sparse models outperform dense models on the speed-accuracy Pareto\ncurve? Yes. Across a wide variety of diﬀerent models sizes, sparse models outperform\ndense models per step and on wall clock time. Our controlled experiments show for a ﬁxed\namount of computation and time, sparse models outperform dense models.\nI can’t deploy a trillion parameter model—can we shrink these models? We\ncannot fully preserve the model quality, but compression rates of 10 to 100x are achievable\nby distilling our sparse models into dense models while achieving ≈30% of the quality gain\nof the expert model.\nWhy use Switch Transformer instead of a model-parallel dense model? On a\ntime basis, Switch Transformers can be far more eﬃcient than dense-models with sharded\nparameters (Figure 6). Also, we point out that this decision is not mutually exclusive—we"
    },
    {
      "page_no": 25,
      "bbox": [
        301.01904296875,
        724.964111328125,
        310.98162841796875,
        734.9266967773438
      ],
      "text": "25"
    },
    {
      "page_no": 26,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 26,
      "bbox": [
        90.0,
        93.29524230957031,
        522.087646484375,
        199.609375
      ],
      "text": "can, and do, use model-parallelism in Switch Transformers, increasing the FLOPs per token,\nbut incurring the slowdown of conventional model-parallelism.\nWhy aren’t sparse models widely used already? The motivation to try sparse\nmodels has been stymied by the massive success of scaling dense models (the success of\nwhich is partially driven by co-adaptation with deep learning hardware as argued in Hooker\n(2020)). Further, sparse models have been subject to multiple issues including (1) model\ncomplexity, (2) training diﬃculties, and (3) communication costs.\nSwitch Transformer\nmakes strides to alleviate these issues."
    },
    {
      "page_no": 26,
      "bbox": [
        90.0,
        219.6726837158203,
        182.0311279296875,
        231.6278839111328
      ],
      "text": "8. Future Work"
    },
    {
      "page_no": 26,
      "bbox": [
        90.0,
        241.8012237548828,
        522.0765991210938,
        279.808349609375
      ],
      "text": "This paper lays out a simpliﬁed architecture, improved training procedures, and a study\nof how sparse models scale. However, there remain many open future directions which we\nbrieﬂy describe here:"
    },
    {
      "page_no": 26,
      "bbox": [
        103.33300018310547,
        297.2102355957031,
        522.0787353515625,
        375.8653869628906
      ],
      "text": "1. A signiﬁcant challenge is further improving training stability for the largest models.\nWhile our stability techniques were eﬀective for our Switch-Base, Switch-Large and\nSwitch-C models (no observed instability), they were not suﬃcient for Switch-XXL.\nWe have taken early steps towards stabilizing these models, which we think may be\ngenerally useful for large models, including using regularizers for improving stability\nand adapted forms of gradient clipping, but this remains unsolved."
    },
    {
      "page_no": 26,
      "bbox": [
        103.33300018310547,
        389.7172546386719,
        522.0569458007812,
        495.4704284667969
      ],
      "text": "2. Generally we ﬁnd that improved pre-training quality leads to better downstream re-\nsults (Appendix E), though we sometimes encounter striking anomalies. For instance,\ndespite similar perplexities modeling the C4 data set, the 1.6T parameter Switch-C\nachieves only an 87.7 exact match score in SQuAD, which compares unfavorably to\n89.6 for the smaller Switch-XXL model. One notable diﬀerence is that the Switch-\nXXL model applies ≈10x the FLOPS per token than the Switch-C model, even though\nit has ≈4x less unique parameters (395B vs 1.6T). This suggests a poorly understood\ndependence between ﬁne-tuning quality, FLOPS per token and number of parameters."
    },
    {
      "page_no": 26,
      "bbox": [
        103.33297729492188,
        509.32232666015625,
        522.054931640625,
        574.4284057617188
      ],
      "text": "3. Perform a comprehensive study of scaling relationships to guide the design of ar-\nchitectures blending data, model and expert-parallelism. Ideally, given the specs of\na hardware conﬁguration (computation, memory, communication) one could more\nrapidly design an optimal model. And, vice versa, this may also help in the design of\nfuture hardware."
    },
    {
      "page_no": 26,
      "bbox": [
        103.33297729492188,
        588.2803344726562,
        522.0897216796875,
        653.3853759765625
      ],
      "text": "4. Our work falls within the family of adaptive computation algorithms. Our approach\nalways used identical, homogeneous experts, but future designs (facilitated by more\nﬂexible infrastructure) could support heterogeneous experts. This would enable more\nﬂexible adaptation by routing to larger experts when more computation is desired—\nperhaps for harder examples."
    },
    {
      "page_no": 26,
      "bbox": [
        103.33297729492188,
        667.2373046875,
        522.06591796875,
        705.2454223632812
      ],
      "text": "5. Investigating expert layers outside the FFN layer of the Transformer. We ﬁnd pre-\nliminary evidence that this similarly can improve model quality.\nIn Appendix A,\nwe report quality improvement adding these inside Self-Attention layers, where our"
    },
    {
      "page_no": 26,
      "bbox": [
        301.01898193359375,
        724.9640502929688,
        310.9815673828125,
        734.9266357421875
      ],
      "text": "26"
    },
    {
      "page_no": 27,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 27,
      "bbox": [
        117.27301025390625,
        93.29524230957031,
        522.0552368164062,
        117.75334930419922
      ],
      "text": "layer replaces the weight matrices which produce Q, K, V. However, due to training\ninstabilities with the bﬂoat16 format, we instead leave this as an area for future work."
    },
    {
      "page_no": 27,
      "bbox": [
        103.3330078125,
        131.0072784423828,
        522.0550537109375,
        169.014404296875
      ],
      "text": "6. Examining Switch Transformer in new and across diﬀerent modalities. We have thus\nfar only considered language, but we believe that model sparsity can similarly provide\nadvantages in new modalities, as well as multi-modal networks."
    },
    {
      "page_no": 27,
      "bbox": [
        90.00001525878906,
        185.66932678222656,
        522.0548095703125,
        210.12744140625
      ],
      "text": "This list could easily be extended, but we hope this gives a ﬂavor for the types of\nchallenges that we are thinking about and what we suspect are promising future directions."
    },
    {
      "page_no": 27,
      "bbox": [
        90.00001525878906,
        230.04078674316406,
        170.6737060546875,
        241.99598693847656
      ],
      "text": "9. Conclusion"
    },
    {
      "page_no": 27,
      "bbox": [
        90.00001525878906,
        252.0203399658203,
        522.087646484375,
        371.322509765625
      ],
      "text": "Switch Transformers are scalable and eﬀective natural language learners. We simplify Mix-\nture of Experts to produce an architecture that is easy to understand, stable to train and\nvastly more sample eﬃcient than equivalently-sized dense models. We ﬁnd that these models\nexcel across a diverse set of natural language tasks and in diﬀerent training regimes, includ-\ning pre-training, ﬁne-tuning and multi-task training. These advances make it possible to\ntrain models with hundreds of billion to trillion parameters and which achieve substantial\nspeedups relative to dense T5 baselines. We hope our work motivates sparse models as\nan eﬀective architecture and that this encourages researchers and practitioners to consider\nthese ﬂexible models in natural language tasks, and beyond."
    },
    {
      "page_no": 27,
      "bbox": [
        90.00001525878906,
        395.1568603515625,
        195.480712890625,
        407.112060546875
      ],
      "text": "Acknowledgments"
    },
    {
      "page_no": 27,
      "bbox": [
        90.00001525878906,
        424.33538818359375,
        522.1094360351562,
        543.6385498046875
      ],
      "text": "The authors would like to thank Margaret Li who provided months of key insights into\nalgorithmic improvements and suggestions for empirical studies. Hugo Larochelle for sage\nadvising and clarifying comments on the draft, Irwan Bello for detailed comments and\ncareful revisions, Colin Raﬀel and Adam Roberts for timely advice on neural language\nmodels and the T5 code-base, Yoshua Bengio for advising and encouragement on research\nin adaptive computation, Jascha Sohl-dickstein for interesting new directions for stabilizing\nnew large scale models and paper revisions, and the Google Brain Team for useful discussions\non the paper. Blake Hechtman who provided invaluable help in proﬁling and improving the\ntraining performance of our models."
    },
    {
      "page_no": 27,
      "bbox": [
        90.00001525878906,
        563.5518798828125,
        230.96376037597656,
        575.507080078125
      ],
      "text": "A. Switch for Attention"
    },
    {
      "page_no": 27,
      "bbox": [
        90.0,
        585.5303955078125,
        522.0985717773438,
        705.2454833984375
      ],
      "text": "Shazeer et al. (2018); Lepikhin et al. (2020) designed MoE Transformers (Shazeer et al.,\n2017) by adding MoE layers into the dense feedfoward network (FFN) computations of\nthe Transformer. Similarly, our work also replaced the FFN layer in the Transformer, but\nwe brieﬂy explore here an alternate design. We add Switch layers into the Transformer\nSelf-Attention layers. To do so, we replace the trainable weight matrices that produce the\nqueries, keys and values with Switch layers as seen in Figure 10.\nTable 10 records the quality after a ﬁxed number of steps as well as training time\nfor several variants. Though we ﬁnd improvements, we also found these layers to be more\nunstable when using bﬂoat16 precision and thus we did not include them in the ﬁnal variant."
    },
    {
      "page_no": 27,
      "bbox": [
        301.01898193359375,
        724.9641723632812,
        310.9815673828125,
        734.9267578125
      ],
      "text": "27"
    },
    {
      "page_no": 28,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 28,
      "bbox": [
        333.53765869140625,
        243.11578369140625,
        346.88623046875,
        247.56382751464844
      ],
      "text": "Router"
    },
    {
      "page_no": 28,
      "bbox": [
        300.750732421875,
        214.90963745117188,
        369.9433288574219,
        218.8016815185547
      ],
      "text": "FFN 1\nFFN 2\nFFN 4\nFFN 3"
    },
    {
      "page_no": 28,
      "bbox": [
        358.4840393066406,
        113.41642761230469,
        395.6091003417969,
        118.42047119140625
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 28,
      "bbox": [
        391.1015625,
        214.90963745117188,
        460.0161437988281,
        218.8016815185547
      ],
      "text": "FFN 1\nFFN 2\nFFN 4\nFFN 3"
    },
    {
      "page_no": 28,
      "bbox": [
        358.76202392578125,
        158.73086547851562,
        395.8870544433594,
        163.7349090576172
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 28,
      "bbox": [
        316.4274597167969,
        282.5699157714844,
        409.05804443359375,
        289.58441162109375
      ],
      "text": "x1\nx2"
    },
    {
      "page_no": 28,
      "bbox": [
        313.61700439453125,
        93.95623779296875,
        404.9442138671875,
        100.15850067138672
      ],
      "text": "y1\ny2"
    },
    {
      "page_no": 28,
      "bbox": [
        288.57073974609375,
        227.95350646972656,
        469.4248352050781,
        235.73757934570312
      ],
      "text": "p = 0.5\np = 0.7"
    },
    {
      "page_no": 28,
      "bbox": [
        312.53106689453125,
        267.302001953125,
        334.5355529785156,
        277.0321044921875
      ],
      "text": "Positional\nembedding"
    },
    {
      "page_no": 28,
      "bbox": [
        399.5458984375,
        267.302001953125,
        421.5503845214844,
        277.0321044921875
      ],
      "text": "Positional\nembedding"
    },
    {
      "page_no": 28,
      "bbox": [
        140.94699096679688,
        147.33274841308594,
        178.072021484375,
        152.3367919921875
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 28,
      "bbox": [
        132.56781005859375,
        201.77999877929688,
        184.94888305664062,
        207.82003784179688
      ],
      "text": "Switching Self-Attention"
    },
    {
      "page_no": 28,
      "bbox": [
        140.25198364257812,
        184.02908325195312,
        177.37701416015625,
        189.0331268310547
      ],
      "text": "Add + Normalize"
    },
    {
      "page_no": 28,
      "bbox": [
        137.07232666015625,
        164.52764892578125,
        180.55360412597656,
        170.56768798828125
      ],
      "text": "Feed Forward Layer"
    },
    {
      "page_no": 28,
      "bbox": [
        157.5663299560547,
        127.44441986083984,
        160.3463592529297,
        133.0044708251953
      ],
      "text": "y"
    },
    {
      "page_no": 28,
      "bbox": [
        157.288330078125,
        221.96533203125,
        160.068359375,
        227.52537536621094
      ],
      "text": "x"
    },
    {
      "page_no": 28,
      "bbox": [
        333.2466125488281,
        291.5938720703125,
        442.7516784667969,
        297.7099304199219
      ],
      "text": "More\nParameters"
    },
    {
      "page_no": 28,
      "bbox": [
        319.9806823730469,
        177.93528747558594,
        345.70733642578125,
        186.27537536621094
      ],
      "text": "Self-Attention\nQ        K        V"
    },
    {
      "page_no": 28,
      "bbox": [
        420.27447509765625,
        243.11578369140625,
        433.623046875,
        247.56382751464844
      ],
      "text": "Router"
    },
    {
      "page_no": 28,
      "bbox": [
        354.900390625,
        132.55734252929688,
        398.63580322265625,
        138.59738159179688
      ],
      "text": "Feed-Forward Layer"
    },
    {
      "page_no": 28,
      "bbox": [
        407.551513671875,
        177.93528747558594,
        433.2781677246094,
        186.27537536621094
      ],
      "text": "Self-Attention\nQ        K        V"
    },
    {
      "page_no": 28,
      "bbox": [
        90.0,
        315.8431701660156,
        522.0657958984375,
        421.5973205566406
      ],
      "text": "Figure 10: Switch layers in attention. We diagram how to incorporate the Switch layer into\nthe Self-Attention transformer block. For each token (here we show two tokens,\nx1 = “More” and x2 = “Parameters”), one set of weights produces the query\nand the other set of unique weights produces the shared keys and values. We\nexperimented with each expert being a linear operation, as well as a FFN, as\nwas the case throughout this work. While we found quality improvements using\nthis, we found this to be more unstable when used with low precision number\nformats, and thus leave it for future work."
    },
    {
      "page_no": 28,
      "bbox": [
        89.99999237060547,
        459.044189453125,
        522.02197265625,
        483.5032958984375
      ],
      "text": "However, when these layers do train stably, we believe the preliminary positive results\nsuggests a future promising direction."
    },
    {
      "page_no": 28,
      "bbox": [
        112.84700012207031,
        503.4761962890625,
        499.1546630859375,
        596.0792846679688
      ],
      "text": "Model\nPrecision\nQuality\nQuality\nSpeed\n@100k Steps (↑)\n@16H (↑)\n(ex/sec) (↑)\nExperts FF\nﬂoat32\n-1.548\n-1.614\n1480\nExpert Attention\nﬂoat32\n-1.524\n-1.606\n1330\nExpert Attention\nbﬂoat16\n[diverges]\n[diverges]\n–\nExperts FF + Attention\nﬂoat32\n-1.513\n-1.607\n1240\nExpert FF + Attention\nbﬂoat16\n[diverges]\n[diverges]\n–"
    },
    {
      "page_no": 28,
      "bbox": [
        90.0,
        612.51318359375,
        522.0744018554688,
        691.1682739257812
      ],
      "text": "Table 10: Switch attention layer results. All models have 32 experts and train with 524k to-\nkens per batch. Experts FF is when experts replace the FFN in the Transformer,\nwhich is our standard setup throughout the paper. Experts FF + Attention is\nwhen experts are used to replace both the FFN and the Self-Attention layers.\nWhen training with bﬂoat16 precision the models that have experts attention\ndiverge."
    },
    {
      "page_no": 28,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "28"
    },
    {
      "page_no": 29,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        92.47767639160156,
        442.16265869140625,
        104.43287658691406
      ],
      "text": "B. Preventing Token Dropping with No-Token-Left-Behind"
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        114.04426574707031,
        522.0875244140625,
        382.38848876953125
      ],
      "text": "Due to software constraints on TPU accelerators, the shapes of our Tensors must be stat-\nically sized.\nAs a result, each expert has a ﬁnite and ﬁxed capacity to process token\nrepresentations. This, however, presents an issue for our model which dynamically routes\ntokens at run-time that may result in an uneven distribution over experts. If the number of\ntokens sent to an expert is less than the expert capacity, then the computation may simply\nbe padded – an ineﬃcient use of the hardware, but mathematically correct. However, when\nthe number of tokens sent to an expert is larger than its capacity (expert overﬂow), a proto-\ncol is needed to handle this. Lepikhin et al. (2020) adapts a Mixture-of-Expert model and\naddresses expert overﬂow by passing its representation to the next layer without processing\nthrough a residual connection which we also follow.\nWe suspected that having no computation applied to tokens could be very wasteful,\nespecially since if there is overﬂow on one expert, that means another expert will have extra\ncapacity. With this intuition we create No-Token-Left-Behind, which iteratively reroutes\nany tokens that are at ﬁrst routed to an expert that is overﬂowing. Figure\n11 shows a\ngraphical description of this method, which will allow us to guarantee almost no tokens\nwill be dropped during training and inference. We hypothesised that this could improve\nperformance and further stabilize training, but we found no empirical beneﬁts. We suspect\nthat once the network learns associations between diﬀerent tokens and experts, if this as-\nsociation is changed (e.g. sending a token to its second highest expert) then performance\ncould be degraded."
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        401.88983154296875,
        349.9538269042969,
        413.84503173828125
      ],
      "text": "C. Encouraging Exploration Across Experts"
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        423.4573669433594,
        522.054931640625,
        556.3085327148438
      ],
      "text": "At each expert-layer, the router determines to which expert to send the token. This is a\ndiscrete decision over the available experts, conditioned on information about the token’s\nrepresentation.\nBased on the incoming token representation, the router determines the\nbest expert, however, it receives no counterfactual information about how well it would\nhave done selecting an alternate expert. As in reinforcement learning, a classic exploration-\nexploitation dilemma arises (Sutton and Barto, 2018). These issues have been similarly\nnoted and addressed diﬀerently by Rosenbaum et al. (2017) which demonstrated success\nin multi-task learning. This particular setting most closely matches that of a contextual\nbandit (Robbins, 1952). Deterministically selecting the top expert always amounts to an\nexploitative strategy – we consider balancing exploration to seek better expert assignment."
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        574.6124267578125,
        522.0875854492188,
        639.718505859375
      ],
      "text": "To introduce exploration, we consider several approaches: 1) deterministic or argmax 2)\nsampling from the softmax distribution 3) input dropout on the incoming representation 4)\nmultiplicative jitter noise on the incoming representation. The resulting impact on model\nquality is reported in Table 11. Throughout this work, we use input jitter to inject noise as\nwe have found it to empirically perform the best."
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        659.2198486328125,
        398.9822082519531,
        671.175048828125
      ],
      "text": "D. Switch Transformers in Lower Compute Regimes"
    },
    {
      "page_no": 29,
      "bbox": [
        90.0,
        680.786376953125,
        522.054931640625,
        705.2455444335938
      ],
      "text": "Switch Transformer is also an eﬀective architecture at small scales as well as in regimes\nwith thousands of cores and trillions of parameters. Many of our prior experiments were"
    },
    {
      "page_no": 29,
      "bbox": [
        301.01898193359375,
        724.9641723632812,
        310.9815673828125,
        734.9267578125
      ],
      "text": "29"
    },
    {
      "page_no": 30,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 30,
      "bbox": [
        321.787109375,
        334.5082702636719,
        347.8596496582031,
        342.7382507324219
      ],
      "text": "Tokens"
    },
    {
      "page_no": 30,
      "bbox": [
        267.54486083984375,
        92.75293731689453,
        400.03912353515625,
        100.98290252685547
      ],
      "text": "Expert 1\nExpert 2\nExpert 3"
    },
    {
      "page_no": 30,
      "bbox": [
        212.10507202148438,
        329.8789367675781,
        256.9255065917969,
        347.8819885253906
      ],
      "text": "Router\nProbabilities"
    },
    {
      "page_no": 30,
      "bbox": [
        204.51004028320312,
        298.02899169921875,
        213.08978271484375,
        318.60394287109375
      ],
      "text": "0.1\n0.7\n0.2"
    },
    {
      "page_no": 30,
      "bbox": [
        214.79750061035156,
        298.02899169921875,
        223.3772430419922,
        318.60394287109375
      ],
      "text": "0.7\n0.2\n0.1"
    },
    {
      "page_no": 30,
      "bbox": [
        225.0849609375,
        298.02899169921875,
        233.66470336914062,
        318.60394287109375
      ],
      "text": "0.5\n0.3\n0.2"
    },
    {
      "page_no": 30,
      "bbox": [
        235.37242126464844,
        298.02899169921875,
        243.95216369628906,
        318.60394287109375
      ],
      "text": "0.8\n0.1\n0.1"
    },
    {
      "page_no": 30,
      "bbox": [
        245.65988159179688,
        298.02899169921875,
        254.2396240234375,
        318.60394287109375
      ],
      "text": "0.3\n0.1\n0.6"
    },
    {
      "page_no": 30,
      "bbox": [
        255.9473419189453,
        298.02899169921875,
        264.5270690917969,
        318.60394287109375
      ],
      "text": "0.7\n0.1\n0.2"
    },
    {
      "page_no": 30,
      "bbox": [
        199.35826110839844,
        214.18617248535156,
        249.10226440429688,
        227.5598907470703
      ],
      "text": "Route token to\nhighest probability"
    },
    {
      "page_no": 30,
      "bbox": [
        208.6491241455078,
        202.0778045654297,
        234.65994262695312,
        209.27903747558594
      ],
      "text": "Stage-1"
    },
    {
      "page_no": 30,
      "bbox": [
        202.61328125,
        132.40084838867188,
        245.83914184570312,
        152.9757843017578
      ],
      "text": "Route token to\nsecond highest\nprobability if not"
    },
    {
      "page_no": 30,
      "bbox": [
        215.48065185546875,
        154.0045166015625,
        232.97962951660156,
        160.177001953125
      ],
      "text": "routed"
    },
    {
      "page_no": 30,
      "bbox": [
        208.6491241455078,
        119.77811431884766,
        234.65994262695312,
        126.97933959960938
      ],
      "text": "Stage-2"
    },
    {
      "page_no": 30,
      "bbox": [
        90.0,
        366.9101867675781,
        522.058349609375,
        459.1153259277344
      ],
      "text": "Figure 11: Diagram of the No-Token-Left-Behind Routing. Stage 1 is equivalent to Switch\nrouting where tokens are routed to the expert with the highest probability from\nthe router. In Stage 2 we look at all tokens that have overﬂowed and route them\nto the expert with which has the second highest probability. Tokens can still be\noverﬂowed if their second highest expert has too many tokens, but this allows\nmost of the tokens to be routed.\nThis process can be iterated to guarantee\nvirtually no tokens are dropped at all."
    },
    {
      "page_no": 30,
      "bbox": [
        192.25,
        487.5058288574219,
        419.7516174316406,
        553.15234375
      ],
      "text": "Model\nQuality (Neg. Log Perp.) (↑)\nArgmax\n-1.471\nSample softmax\n-1.570\nInput dropout\n-1.480\nInput jitter\n-1.468"
    },
    {
      "page_no": 30,
      "bbox": [
        90.0,
        567.5932006835938,
        522.065673828125,
        619.1502685546875
      ],
      "text": "Table 11: Router Exploration Strategies. Quality of the Switch Transformer, measured by\nthe negative log perplexity, under diﬀerent randomness-strategies for selecting\nthe expert (lower is better). There is no material speed performance diﬀerence\nbetween the variants."
    },
    {
      "page_no": 30,
      "bbox": [
        90.0,
        639.1251831054688,
        522.0658569335938,
        690.6823120117188
      ],
      "text": "at the scale of 10B+ parameter models, but we show in Figure 12 as few as 2 experts\nproduce compelling gains over a FLOP-matched counterpart. Even if a super computer is\nnot readily available, training Switch Transformers with 2, 4, or 8 experts (as we typically\nrecommend one expert per core) results in solid improvements over T5 dense baselines."
    },
    {
      "page_no": 30,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "30"
    },
    {
      "page_no": 31,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 31,
      "bbox": [
        203.8326416015625,
        449.4941101074219,
        418.31903076171875,
        467.70343017578125
      ],
      "text": "0.0\n0.2\n0.4\n0.6\n0.8\nTraining Step\n1e5"
    },
    {
      "page_no": 31,
      "bbox": [
        186.14987182617188,
        443.0042419433594,
        196.99188232421875,
        452.4812316894531
      ],
      "text": "2.0"
    },
    {
      "page_no": 31,
      "bbox": [
        186.14987182617188,
        409.0836181640625,
        196.99188232421875,
        418.56060791015625
      ],
      "text": "1.9"
    },
    {
      "page_no": 31,
      "bbox": [
        186.14987182617188,
        375.1629638671875,
        196.99188232421875,
        384.63995361328125
      ],
      "text": "1.8"
    },
    {
      "page_no": 31,
      "bbox": [
        186.14987182617188,
        341.2423400878906,
        196.99188232421875,
        350.7193298339844
      ],
      "text": "1.7"
    },
    {
      "page_no": 31,
      "bbox": [
        186.14987182617188,
        307.32171630859375,
        196.99188232421875,
        316.7987060546875
      ],
      "text": "1.6"
    },
    {
      "page_no": 31,
      "bbox": [
        186.14987182617188,
        273.40106201171875,
        196.99188232421875,
        282.8780517578125
      ],
      "text": "1.5"
    },
    {
      "page_no": 31,
      "bbox": [
        170.7577667236328,
        331.1767578125,
        180.23477172851562,
        394.7545471191406
      ],
      "text": "Neg Log Perplexity"
    },
    {
      "page_no": 31,
      "bbox": [
        223.78900146484375,
        282.19525146484375,
        268.0617980957031,
        316.0835876464844
      ],
      "text": "Switch-Base: 8e\nSwitch-Base: 4e\nSwitch-Base: 2e\nT5-Base"
    },
    {
      "page_no": 31,
      "bbox": [
        90.0,
        492.8201904296875,
        522.0330200195312,
        530.8273315429688
      ],
      "text": "Figure 12: Switch Transformer with few experts. Switch Transformer improves over the\nbaseline even with very few experts. Here we show scaling properties at very\nsmall scales, where we improve over the T5-Base model using 2, 4, and 8 experts."
    },
    {
      "page_no": 31,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "31"
    },
    {
      "page_no": 32,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 32,
      "bbox": [
        90.0,
        92.47767639160156,
        450.5927429199219,
        104.43287658691406
      ],
      "text": "E. Relation of Upstream to Downstream Model Performance"
    },
    {
      "page_no": 32,
      "bbox": [
        90.0,
        114.04426574707031,
        522.0548095703125,
        179.150390625
      ],
      "text": "There is no guarantee that a model’s quality on a pre-training objective will translate to\ndownstream task results. Figure 13 presents the correlation of the upstream model quality,\nfor both dense and Switch models, on the C4 pre-training task with two downstream task\nmeasures: average SuperGLUE performance and TriviaQA score.\nWe choose these two\ntasks as one probes the model’s reasoning and the other factual knowledge."
    },
    {
      "page_no": 32,
      "bbox": [
        133.41319274902344,
        340.3287353515625,
        272.0823059082031,
        354.0557861328125
      ],
      "text": "1.7\n1.6\n1.5\n1.4\n1.3\n1.2\n1.1\n1.0\nC4 Neg. Log Perplexity"
    },
    {
      "page_no": 32,
      "bbox": [
        109.62449645996094,
        333.3893127441406,
        116.1630630493164,
        340.5335388183594
      ],
      "text": "65"
    },
    {
      "page_no": 32,
      "bbox": [
        109.62449645996094,
        311.7225036621094,
        116.1630630493164,
        318.8667297363281
      ],
      "text": "70"
    },
    {
      "page_no": 32,
      "bbox": [
        109.62449645996094,
        290.05572509765625,
        116.1630630493164,
        297.199951171875
      ],
      "text": "75"
    },
    {
      "page_no": 32,
      "bbox": [
        109.62449645996094,
        268.3889465332031,
        116.1630630493164,
        275.5331726074219
      ],
      "text": "80"
    },
    {
      "page_no": 32,
      "bbox": [
        109.62449645996094,
        246.72215270996094,
        116.1630630493164,
        253.86634826660156
      ],
      "text": "85"
    },
    {
      "page_no": 32,
      "bbox": [
        109.62449645996094,
        225.0553741455078,
        116.1630630493164,
        232.19956970214844
      ],
      "text": "90"
    },
    {
      "page_no": 32,
      "bbox": [
        101.64166259765625,
        251.7298126220703,
        108.78585815429688,
        298.46405029296875
      ],
      "text": "SuperGLUE Score"
    },
    {
      "page_no": 32,
      "bbox": [
        260.616455078125,
        310.405029296875,
        277.71551513671875,
        334.0683898925781
      ],
      "text": "SOTA\nDense\nSwitch"
    },
    {
      "page_no": 32,
      "bbox": [
        348.732177734375,
        340.3287353515625,
        487.40130615234375,
        354.0557861328125
      ],
      "text": "1.7\n1.6\n1.5\n1.4\n1.3\n1.2\n1.1\n1.0\nC4 Neg. Log Perplexity"
    },
    {
      "page_no": 32,
      "bbox": [
        324.9434814453125,
        323.54864501953125,
        331.4820556640625,
        330.69287109375
      ],
      "text": "10"
    },
    {
      "page_no": 32,
      "bbox": [
        324.9434814453125,
        295.27276611328125,
        331.4820556640625,
        302.4169921875
      ],
      "text": "20"
    },
    {
      "page_no": 32,
      "bbox": [
        324.9434814453125,
        266.9969177246094,
        331.4820556640625,
        274.1411437988281
      ],
      "text": "30"
    },
    {
      "page_no": 32,
      "bbox": [
        324.9434814453125,
        238.72105407714844,
        331.4820556640625,
        245.86524963378906
      ],
      "text": "40"
    },
    {
      "page_no": 32,
      "bbox": [
        324.9434814453125,
        210.4451904296875,
        331.4820556640625,
        217.58938598632812
      ],
      "text": "50"
    },
    {
      "page_no": 32,
      "bbox": [
        316.96063232421875,
        256.24481201171875,
        324.1048583984375,
        293.9414978027344
      ],
      "text": "TriviaQA Score"
    },
    {
      "page_no": 32,
      "bbox": [
        475.9354553222656,
        310.405029296875,
        493.0345153808594,
        334.0683898925781
      ],
      "text": "SOTA\nDense\nSwitch"
    },
    {
      "page_no": 32,
      "bbox": [
        90.0,
        377.169189453125,
        522.0692749023438,
        537.119384765625
      ],
      "text": "Figure 13: Upstream pre-trained quality to downstream model quality. We correlate the\nupstream performance with downstream quality on both SuperGLUE and Triv-\niaQA (SOTA recorded without SSM), reasoning and knowledge-heavy bench-\nmarks, respectively (validation sets). We ﬁnd that, as with the baseline, the\nSwitch model scales with improvements in the upstream pre-training task. For\nSuperGLUE, we ﬁnd a loosely linear relation between negative log perplexity\nand the average SuperGLUE score. However, the dense model often performs\nbetter for a ﬁxed perplexity, particularly in the large-scale regime. Conversely,\non the knowledge-heavy task, TriviaQA, we ﬁnd that the Switch Transformer\nmay follow an improved scaling relationship – for a given upstream perplexity,\nit does better than a dense counterpart. Further statistics (expensive to collect\nand left to future work) would be necessary to conﬁrm these observations."
    },
    {
      "page_no": 32,
      "bbox": [
        89.99998474121094,
        564.2763061523438,
        522.0765991210938,
        683.578369140625
      ],
      "text": "We ﬁnd a consistent correlation, indicating that for both baseline and Switch models,\nimproved pre-training leads to better downstream results.\nAdditionally, for a ﬁxed up-\nstream perplexity we ﬁnd that both Switch and dense models perform similarly in the small\nto medium model size regime. However, in the largest model regime (T5-11B/T5-XXL)\nour largest Switch models, as mentioned in Section 5.6, do not always translate their up-\nstream perplexity well to downstream ﬁne-tuning on the SuperGLUE task. This warrants\nfuture investigation and study to fully realize the potential of sparse models. Understand-\ning the ﬁne-tuning dynamics with expert-models is very complicated and is dependent on\nregularization, load-balancing, and ﬁne-tuning hyper-parameters."
    },
    {
      "page_no": 32,
      "bbox": [
        301.01898193359375,
        724.9639892578125,
        310.9815673828125,
        734.9265747070312
      ],
      "text": "32"
    },
    {
      "page_no": 33,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 33,
      "bbox": [
        90.0,
        92.47767639160156,
        331.82977294921875,
        104.43287658691406
      ],
      "text": "F. Pseudo Code for Switch Transformers"
    },
    {
      "page_no": 33,
      "bbox": [
        90.0,
        114.04426574707031,
        522.0220336914062,
        138.50238037109375
      ],
      "text": "Pseudocode for Switch Transformers in Mesh Tensorﬂow (Shazeer et al., 2018). No model\nparallelism is being used for the below code (see 5.4 for more details)."
    },
    {
      "page_no": 33,
      "bbox": [
        90.0,
        156.03240966796875,
        203.97927856445312,
        163.50440979003906
      ],
      "text": "import mesh tensorflow as mtf"
    },
    {
      "page_no": 33,
      "bbox": [
        90.0,
        172.9683837890625,
        280.0477294921875,
        180.4403839111328
      ],
      "text": "def load balance loss(router probs, expert mask):"
    },
    {
      "page_no": 33,
      "bbox": [
        104.29000091552734,
        181.0388946533203,
        456.71429443359375,
        222.78138732910156
      ],
      "text": "\"\"\"Calculate load−balancing loss to ensure diverse expert routing.\"\"\"\n# router probs is the probability assigned for each expert per token.\n# router probs shape: [num cores, tokens per core, num experts]\n# expert index contains the expert with the highest router probability in one−hot format.\n# expert mask shape: [num cores, tokens per core, num experts]"
    },
    {
      "page_no": 33,
      "bbox": [
        104.29000091552734,
        232.24639892578125,
        371.5071105957031,
        256.65435791015625
      ],
      "text": "# For each core, get the fraction of tokens routed to each expert.\n# density 1 shape: [num cores, num experts]\ndensity 1 = mtf.reduce mean(expert mask, reduced dim=tokens per core)"
    },
    {
      "page_no": 33,
      "bbox": [
        104.29000091552734,
        266.119384765625,
        398.1820983886719,
        298.99639892578125
      ],
      "text": "# For each core, get fraction of probability mass assigned to each expert\n# from the router across all tokens.\n# density 1 proxy shape: [num cores, num experts]\ndensity 1 proxy = mtf.reduce mean(router probs, reduced dim=tokens per core)"
    },
    {
      "page_no": 33,
      "bbox": [
        104.29000091552734,
        308.46038818359375,
        477.3067321777344,
        358.27337646484375
      ],
      "text": "# density l for a single core: vector of length num experts that sums to 1.\n# density l proxy for a single core: vector of length num experts that sums to 1.\n# Want both vectors to have uniform allocation (1/num experts) across all num expert elements.\n# The two vectors will be pushed towards uniform allocation when the dot product is minimized.\nloss = mtf.reduce mean(density 1 proxy ∗density 1) ∗(num experts ˆ 2)\nreturn loss"
    },
    {
      "page_no": 33,
      "bbox": [
        90.0,
        382.27618408203125,
        522.0330200195312,
        406.73431396484375
      ],
      "text": "Figure 14: Pseudo code for the load balance loss for Switch Transformers in Mesh Tensor-\nﬂow."
    },
    {
      "page_no": 33,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "33"
    },
    {
      "page_no": 34,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 34,
      "bbox": [
        90.0,
        96.0924072265625,
        203.97927856445312,
        103.56440734863281
      ],
      "text": "import mesh tensorflow as mtf"
    },
    {
      "page_no": 34,
      "bbox": [
        90.0,
        113.02838134765625,
        231.77508544921875,
        120.50038146972656
      ],
      "text": "def router(inputs, capacity factor):"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        121.49639892578125,
        384.9654846191406,
        154.37342834472656
      ],
      "text": "\"\"\"Produce the combine and dispatch tensors used for sending and\nreceiving tokens from their highest probability expert. \"\"\"\n# Core layout is split across num cores for all tensors and operations.\n# inputs shape: [num cores, tokens per core, d model]"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        163.83837890625,
        335.1385803222656,
        171.3103790283203
      ],
      "text": "router weights = mtf.Variable(shape=[d model, num experts])"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        180.7744140625,
        389.605712890625,
        196.71437072753906
      ],
      "text": "# router logits shape: [num cores, tokens per core, num experts]\nrouter logits = mtf.einsum([inputs, router weights], reduced dim=d model)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        206.17938232421875,
        162.70372009277344,
        213.65138244628906
      ],
      "text": "if is training:"
    },
    {
      "page_no": 34,
      "bbox": [
        118.58000183105469,
        214.64739990234375,
        472.4736633300781,
        230.58741760253906
      ],
      "text": "# Add noise for exploration across experts.\nrouter logits += mtf.random uniform(shape=router logits.shape, minval=1−eps, maxval=1+eps)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        240.05242919921875,
        405.8746032714844,
        255.9923858642578
      ],
      "text": "# Convert input to softmax operation from bfloat16 to float32 for stability.\nrouter logits = mtf.to float32(router logits)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        265.4564208984375,
        370.166015625,
        281.3963623046875
      ],
      "text": "# Probabilities for each token of what expert it should be sent to.\nrouter probs = mtf.softmax(router logits, axis=−1)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        290.4629211425781,
        401.4025573730469,
        340.67437744140625
      ],
      "text": "# Get the top−1 expert for each token. expert gate is the top−1 probability\n# from the router for each token. expert index is what expert each token\n# is going to be routed to.\n# expert gate shape: [num cores, tokens per core]\n# expert index shape: [num cores, tokens per core]\nexpert gate, expert index = mtf.top 1(router probs, reduced dim=num experts)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        350.139404296875,
        345.9379577636719,
        366.07940673828125
      ],
      "text": "# expert mask shape: [num cores, tokens per core, num experts]\nexpert mask = mtf.one hot(expert index, dimension=num experts)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        375.54339599609375,
        317.04510498046875,
        391.4833984375
      ],
      "text": "# Compute load balancing loss.\naux loss = load balance loss(router probs, expert mask)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        400.9483947753906,
        435.0204772949219,
        442.29339599609375
      ],
      "text": "# Experts have a fixed capacity, ensure we do not exceed it. Construct\n# the batch indices, to each expert, with position in expert\n# make sure that not more that expert capacity examples can be routed to\n# each expert.\nposition in expert = mtf.cumsum(expert mask, dimension=tokens per core) ∗expert mask"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        451.75738525390625,
        379.4474792480469,
        476.1663818359375
      ],
      "text": "# Keep only tokens that fit within expert capacity.\nexpert mask ∗= mtf.less(position in expert, expert capacity)\nexpert mask flat = mtf.reduce sum(expert mask, reduced dim=experts dim)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        485.6304016113281,
        358.2556457519531,
        501.57037353515625
      ],
      "text": "# Mask out the experts that have overflowed the expert capacity.\nexpert gate ∗= expert mask flat"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        511.035400390625,
        448.4250793457031,
        535.443359375
      ],
      "text": "# combine tensor used for combining expert outputs and scaling with router probability.\n# combine tensor shape: [num cores, tokens per core, num experts, expert capacity]\ncombine tensor = ("
    },
    {
      "page_no": 34,
      "bbox": [
        118.58000183105469,
        536.4403686523438,
        348.3152160644531,
        560.848388671875
      ],
      "text": "expert gate ∗expert mask flat ∗\nmtf.one hot(expert index, dimension=num experts) ∗\nmtf.one hot(position in expert, dimension=expert capacity))"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        570.3134155273438,
        334.4499206542969,
        586.25341796875
      ],
      "text": "# Cast back outputs to bfloat16 for the rest of the layer.\ncombine tensor = mtf.to bfloat16(combine tensor)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        595.7174072265625,
        481.27435302734375,
        620.1264038085938
      ],
      "text": "# Create binary dispatch tensor that is 1 if the token gets routed to the corresponding expert.\n# dispatch tensor shape: [num cores, tokens per core, num experts, expert capacity]\ndispatch tensor = mtf.cast(combine tensor, tf.bool)"
    },
    {
      "page_no": 34,
      "bbox": [
        104.29000091552734,
        629.5903930664062,
        291.4834899902344,
        637.0623779296875
      ],
      "text": "return dispatch tensor, combine tensor, aux loss"
    },
    {
      "page_no": 34,
      "bbox": [
        106.77300262451172,
        659.0722045898438,
        505.2715148925781,
        669.9813232421875
      ],
      "text": "Figure 15: Pseudo code for the router for Switch Transformers in Mesh Tensorﬂow."
    },
    {
      "page_no": 34,
      "bbox": [
        301.0190124511719,
        724.9639282226562,
        310.9815979003906,
        734.926513671875
      ],
      "text": "34"
    },
    {
      "page_no": 35,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 35,
      "bbox": [
        90.0,
        96.0924072265625,
        203.97927856445312,
        103.56440734863281
      ],
      "text": "import mesh tensorflow as mtf"
    },
    {
      "page_no": 35,
      "bbox": [
        90.0,
        113.02838134765625,
        316.87957763671875,
        120.50038146972656
      ],
      "text": "def switch layer(inputs, n, capacity factor, num experts):"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        121.09791564941406,
        349.2196044921875,
        179.7783966064453
      ],
      "text": "\"\"\"Distributed switch transformer feed−forward layer.\"\"\"\n# num cores (n) = total cores for training the model (scalar).\n# d model = model hidden size (scalar).\n# num experts = total number of experts.\n# capacity factor = extra buffer for each expert.\n# inputs shape: [batch, seq len, d model]\nbatch, seq len, d model = inputs.get shape()"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        189.24237060546875,
        375.9192199707031,
        205.18238830566406
      ],
      "text": "# Each core will route tokens per core tokens to the correct experts.\ntokens per core = batch ∗seq len / num cores"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        214.64739990234375,
        370.8673400878906,
        247.52442932128906
      ],
      "text": "# Each expert will have shape [num cores, expert capacity, d model].\n# Each core is responsible for sending expert capacity tokens\n# to each expert.\nexpert capacity = tokens per core ∗capacity factor / num experts"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        256.9884033203125,
        398.2037353515625,
        289.86541748046875
      ],
      "text": "# Reshape to setup per core expert dispatching.\n# shape: [batch, seq len, d model] −> [num cores, tokens per core, d model]\n# Core layout: [n, 1, 1] −> [n, 1, 1]\ninputs = mtf.reshape(inputs, [num cores, tokens per core, d model])"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        298.9309387207031,
        466.7666015625,
        357.61138916015625
      ],
      "text": "# Core Layout: [n, 1, 1] −> [n, 1, 1, 1], [n, 1, 1, 1]\n# dispatch tensor (boolean) shape: [num cores, tokens per core, num experts, expert capacity]\n# dispatch tensor is used for routing tokens to the correct expert.\n# combine tensor (float) shape: [num cores, tokens per core, num experts, expert capacity]\n# combine tensor used for combining expert outputs and scaling with router\n# probability.\ndispatch tensor, combine tensor, aux loss = router(inputs, expert capacity)"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        367.0754089355469,
        432.1587219238281,
        399.952392578125
      ],
      "text": "# Matmul with large boolean tensor to assign tokens to the correct expert.\n# Core Layout: [n, 1, 1], −> [1, n, 1, 1]\n# expert inputs shape: [num experts, num cores, expert capacity, d model]\nexpert inputs = mtf.einsum([inputs, dispatch tensor], reduce dims=[tokens per core])"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        409.0179443359375,
        470.7403564453125,
        450.76141357421875
      ],
      "text": "# All−to−All communication. Cores split across num cores and now we want to split\n# across num experts. This sends tokens, routed locally, to the correct expert now\n# split across different cores.\n# Core layout: [1, n, 1, 1] −> [n, 1, 1, 1]\nexpert inputs = mtf.reshape(expert inputs, [num experts, num cores, expert capacity, d model])"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        460.2264099121094,
        392.4637145996094,
        501.57037353515625
      ],
      "text": "# Standard feed forward computation, where each expert will have its own\n# unique set of parameters.\n# Total unique parameters created: num experts ∗(d model ∗d ff ∗2).\n# expert outputs shape: [num experts, num cores, expert capacity, d model]\nexpert outputs = feed forward(expert inputs)"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        510.6369323730469,
        478.6793518066406,
        543.912353515625
      ],
      "text": "# All−to−All communication. Cores are currently split across the experts\n# dimension, which needs to be switched back to being split across num cores.\n# Core Layout: [n, 1, 1, 1] −> [1, n, 1, 1]\nexpert outputs = mtf.reshape(expert outputs, [num experts, num cores, expert capacity, d model])"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        553.3764038085938,
        497.4167175292969,
        594.7213745117188
      ],
      "text": "# Convert back to input shape and multiply outputs of experts by the routing probability.\n# expert outputs shape: [num experts, num cores, tokens per core, d model]\n# expert outputs combined shape: [num cores, tokens per core, d model]\n# Core Layout: [1, n, 1, 1] −> [n, 1, 1]\nexpert outputs combined = mtf.einsum([expert outputs, combine tensor], reduce dims=[tokens per core])"
    },
    {
      "page_no": 35,
      "bbox": [
        104.29000091552734,
        604.1853637695312,
        451.2928771972656,
        637.0623779296875
      ],
      "text": "# Remove tokens per core shapes used for local routing dispatching to match input shape.\n# Core Layout: [n, 1, 1] −> [n, 1, 1]\noutputs = mtf.reshape(expert outputs combined, [batch, seq len, d model])\nreturn outputs, aux loss"
    },
    {
      "page_no": 35,
      "bbox": [
        122.60600280761719,
        659.0722045898438,
        489.4244079589844,
        669.9813232421875
      ],
      "text": "Figure 16: Pseudo code of the Switch Transformer layer in Mesh Tensorﬂow."
    },
    {
      "page_no": 35,
      "bbox": [
        301.01898193359375,
        724.9639282226562,
        310.9815673828125,
        734.926513671875
      ],
      "text": "35"
    },
    {
      "page_no": 36,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        92.47767639160156,
        152.93215942382812,
        104.43287658691406
      ],
      "text": "References"
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        114.04426574707031,
        522.0875244140625,
        165.60137939453125
      ],
      "text": "Mart´ın Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeﬀrey Dean,\nMatthieu Devin, Sanjay Ghemawat, Geoﬀrey Irving, Michael Isard, et al. Tensorﬂow:\nA system for large-scale machine learning. In 12th {USENIX} symposium on operating\nsystems design and implementation ({OSDI} 16), pages 265–283, 2016."
    },
    {
      "page_no": 36,
      "bbox": [
        89.99998474121094,
        176.40028381347656,
        522.0331420898438,
        200.8583984375
      ],
      "text": "Iz Beltagy, Matthew E Peters, and Arman Cohan. Longformer: The long-document trans-\nformer. arXiv preprint arXiv:2004.05150, 2020."
    },
    {
      "page_no": 36,
      "bbox": [
        89.99998474121094,
        211.6582794189453,
        522.0658569335938,
        249.6654052734375
      ],
      "text": "Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. Semantic parsing on free-\nbase from question-answer pairs.\nIn Proceedings of the 2013 conference on empirical\nmethods in natural language processing, pages 1533–1544, 2013."
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        260.46527099609375,
        522.0875244140625,
        298.472412109375
      ],
      "text": "Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla\nDhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al.\nLanguage models are few-shot learners. arXiv preprint arXiv:2005.14165, 2020."
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        309.27130126953125,
        522.0548095703125,
        333.73040771484375
      ],
      "text": "Rewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences\nwith sparse transformers. arXiv preprint arXiv:1904.10509, 2019."
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        344.529296875,
        522.07666015625,
        368.9874267578125
      ],
      "text": "Kyunghyun Cho and Yoshua Bengio. Exponentially increasing the capacity-to-computation\nratio for conditional computation in deep learning. arXiv preprint arXiv:1406.7362, 2014."
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        379.78729248046875,
        522.0874633789062,
        417.79443359375
      ],
      "text": "Peter Clark, Isaac Cowhey, Oren Etzioni, Tushar Khot, Ashish Sabharwal, Carissa\nSchoenick, and Oyvind Tafjord. Think you have solved question answering? try arc,\nthe ai2 reasoning challenge. arXiv preprint arXiv:1803.05457, 2018."
    },
    {
      "page_no": 36,
      "bbox": [
        90.0,
        428.59332275390625,
        522.0657348632812,
        453.05242919921875
      ],
      "text": "Gon¸calo M Correia, Vlad Niculae, and Andr´e FT Martins. Adaptively sparse transformers.\narXiv preprint arXiv:1909.00015, 2019."
    },
    {
      "page_no": 36,
      "bbox": [
        90.00001525878906,
        463.851318359375,
        522.0548706054688,
        501.85845947265625
      ],
      "text": "Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova.\nBert:\nPre-\ntraining of deep bidirectional transformers for language understanding. arXiv preprint\narXiv:1810.04805, 2018."
    },
    {
      "page_no": 36,
      "bbox": [
        89.99999237060547,
        512.6583251953125,
        522.0657348632812,
        537.116455078125
      ],
      "text": "David Eigen, Marc’Aurelio Ranzato, and Ilya Sutskever. Learning factored representations\nin a deep mixture of experts. arXiv preprint arXiv:1312.4314, 2013."
    },
    {
      "page_no": 36,
      "bbox": [
        89.99996948242188,
        547.9153442382812,
        522.1092529296875,
        599.4724731445312
      ],
      "text": "Angela Fan, Shruti Bhosale, Holger Schwenk, Zhiyi Ma, Ahmed El-Kishky, Siddharth Goyal,\nMandeep Baines, Onur Celebi, Guillaume Wenzek, Vishrav Chaudhary, et al. Beyond\nenglish-centric multilingual machine translation. Journal of Machine Learning Research,\n22(107):1–48, 2021."
    },
    {
      "page_no": 36,
      "bbox": [
        89.99996948242188,
        610.2713012695312,
        522.065673828125,
        634.73046875
      ],
      "text": "William Fedus, Ian Goodfellow, and Andrew M Dai. Maskgan: Better text generation via\nﬁlling in the . arXiv preprint arXiv:1801.07736, 2018."
    },
    {
      "page_no": 36,
      "bbox": [
        90.00003051757812,
        645.5291748046875,
        522.0657348632812,
        669.9873046875
      ],
      "text": "Trevor Gale, Matei Zaharia, CliﬀYoung, and Erich Elsen. Sparse gpu kernels for deep\nlearning. arXiv preprint arXiv:2006.10901, 2020."
    },
    {
      "page_no": 36,
      "bbox": [
        90.00001525878906,
        680.7871704101562,
        522.065673828125,
        705.2453002929688
      ],
      "text": "Scott Gray, Alec Radford, and Diederik P Kingma. Gpu kernels for block-sparse weights.\nhttps://openai.com/blog/block-sparse-gpu-kernels/, 2017."
    },
    {
      "page_no": 36,
      "bbox": [
        301.0190124511719,
        724.9639282226562,
        310.9815979003906,
        734.926513671875
      ],
      "text": "36"
    },
    {
      "page_no": 37,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 37,
      "bbox": [
        90.0,
        93.29524230957031,
        522.087646484375,
        131.3023681640625
      ],
      "text": "Kelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Ming-Wei Chang. Realm:\nRetrieval-augmented language model pre-training.\narXiv preprint arXiv:2002.08909,\n2020."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99996948242188,
        143.38124084472656,
        522.0874633789062,
        181.38934326171875
      ],
      "text": "Aaron Harlap, Deepak Narayanan, Amar Phanishayee, Vivek Seshadri, Nikhil Devanur,\nGreg Ganger, and Phil Gibbons. Pipedream: Fast and eﬃcient pipeline parallel dnn\ntraining. arXiv preprint arXiv:1806.03377, 2018."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99996948242188,
        193.4682159423828,
        522.0545654296875,
        272.64739990234375
      ],
      "text": "Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay,\nMustafa Suleyman, and Phil Blunsom.\nTeaching machines to read and comprehend.\nIn C. Cortes, N. Lawrence, D. Lee, M. Sugiyama, and R. Garnett, editors, Ad-\nvances in Neural Information Processing Systems, volume 28, pages 1693–1701. Cur-\nran Associates, Inc., 2015. URL https://proceedings.neurips.cc/paper/2015/file/\nafdec7005cc9f14302cd0474fd0f3c96-Paper.pdf."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99995422363281,
        284.2022399902344,
        522.0765991210938,
        308.6613464355469
      ],
      "text": "Geoﬀrey Hinton, Oriol Vinyals, and JeﬀDean. Distilling the knowledge in a neural network.\narXiv preprint arXiv:1503.02531, 2015."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99995422363281,
        320.740234375,
        522.0026245117188,
        345.1983642578125
      ],
      "text": "Sepp Hochreiter and J¨urgen Schmidhuber. Long short-term memory. Neural computation,\n9(8):1735–1780, 1997."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99990844726562,
        357.27825927734375,
        452.9883117675781,
        368.1873779296875
      ],
      "text": "Sara Hooker. The hardware lottery. arXiv preprint arXiv:2009.06489, 2020."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99993896484375,
        380.2662658691406,
        522.1093139648438,
        431.8233947753906
      ],
      "text": "Yanping Huang, Youlong Cheng, Ankur Bapna, Orhan Firat, Dehao Chen, Mia Chen,\nHyoukJoong Lee, Jiquan Ngiam, Quoc V Le, Yonghui Wu, et al. Gpipe: Eﬃcient training\nof giant neural networks using pipeline parallelism. In Advances in neural information\nprocessing systems, pages 103–112, 2019."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99994659423828,
        443.90228271484375,
        522.065673828125,
        468.36041259765625
      ],
      "text": "Robert A Jacobs, Michael I Jordan, Steven J Nowlan, and Geoﬀrey E Hinton. Adaptive\nmixtures of local experts. Neural computation, 3(1):79–87, 1991."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99993896484375,
        480.4393005371094,
        522.0330200195312,
        504.8984069824219
      ],
      "text": "Michael I Jordan and Robert A Jacobs.\nHierarchical mixtures of experts and the em\nalgorithm. Neural computation, 6(2):181–214, 1994."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99995422363281,
        516.977294921875,
        522.0764770507812,
        554.984375
      ],
      "text": "Mandar Joshi, Eunsol Choi, Daniel S Weld, and Luke Zettlemoyer.\nTriviaqa: A large\nscale distantly supervised challenge dataset for reading comprehension. arXiv preprint\narXiv:1705.03551, 2017."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99993133544922,
        567.0642700195312,
        522.076416015625,
        605.0714111328125
      ],
      "text": "Jared Kaplan, Sam McCandlish, Tom Henighan, Tom B Brown, Benjamin Chess, Rewon\nChild, Scott Gray, Alec Radford, Jeﬀrey Wu, and Dario Amodei. Scaling laws for neural\nlanguage models. arXiv preprint arXiv:2001.08361, 2020."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99993896484375,
        617.1502685546875,
        522.02197265625,
        641.609375
      ],
      "text": "Nikita Kitaev,  Lukasz Kaiser, and Anselm Levskaya. Reformer: The eﬃcient transformer.\narXiv preprint arXiv:2001.04451, 2020."
    },
    {
      "page_no": 37,
      "bbox": [
        89.99995422363281,
        653.6882934570312,
        522.0763549804688,
        705.2454223632812
      ],
      "text": "Tom Kwiatkowski, Jennimaria Palomaki, Olivia Redﬁeld, Michael Collins, Ankur Parikh,\nChris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, et al. Natural\nquestions: a benchmark for question answering research. Transactions of the Association\nfor Computational Linguistics, 7:453–466, 2019."
    },
    {
      "page_no": 37,
      "bbox": [
        301.0189514160156,
        724.9640502929688,
        310.9815368652344,
        734.9266357421875
      ],
      "text": "37"
    },
    {
      "page_no": 38,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 38,
      "bbox": [
        90.0,
        93.29524230957031,
        522.065673828125,
        131.3023681640625
      ],
      "text": "Guillaume Lample, Alexandre Sablayrolles, Marc’Aurelio Ranzato, Ludovic Denoyer, and\nHerv´e J´egou. Large memory layers with product keys. In Advances in Neural Information\nProcessing Systems, pages 8548–8559, 2019."
    },
    {
      "page_no": 38,
      "bbox": [
        90.0,
        144.51124572753906,
        522.0657958984375,
        182.51837158203125
      ],
      "text": "Katherine Lee, Daphne Ippolito, Andrew Nystrom, Chiyuan Zhang, Douglas Eck, Chris\nCallison-Burch, and Nicholas Carlini. Deduplicating training data makes language models\nbetter. arXiv preprint arXiv:2107.06499, 2021."
    },
    {
      "page_no": 38,
      "bbox": [
        90.00001525878906,
        195.7262725830078,
        522.0985717773438,
        247.28338623046875
      ],
      "text": "Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping\nHuang, Maxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models\nwith conditional computation and automatic sharding. arXiv preprint arXiv:2006.16668,\n2020."
    },
    {
      "page_no": 38,
      "bbox": [
        90.00003051757812,
        260.49127197265625,
        522.0984497070312,
        298.4993896484375
      ],
      "text": "Paulius Micikevicius, Sharan Narang, Jonah Alben, Gregory Diamos, Erich Elsen, David\nGarcia, Boris Ginsburg, Michael Houston, Oleksii Kuchaiev, Ganesh Venkatesh, et al.\nMixed precision training. arXiv preprint arXiv:1710.03740, 2017."
    },
    {
      "page_no": 38,
      "bbox": [
        90.0,
        311.707275390625,
        522.07666015625,
        349.71539306640625
      ],
      "text": "Shashi Narayan, Shay B Cohen, and Mirella Lapata. Don’t give me the details, just the\nsummary! topic-aware convolutional neural networks for extreme summarization. arXiv\npreprint arXiv:1808.08745, 2018."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99998474121094,
        362.92327880859375,
        522.0767211914062,
        400.931396484375
      ],
      "text": "Yixin Nie, Adina Williams, Emily Dinan, Mohit Bansal, Jason Weston, and Douwe Kiela.\nAdversarial nli: A new benchmark for natural language understanding. arXiv preprint\narXiv:1910.14599, 2019."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99996185302734,
        414.1392822265625,
        522.0765380859375,
        452.14642333984375
      ],
      "text": "Joan Puigcerver, Carlos Riquelme, Basil Mustafa, Cedric Renggli, Andr´e Susano Pinto,\nSylvain Gelly, Daniel Keysers, and Neil Houlsby. Scalable transfer learning with expert\nmodels. arXiv preprint arXiv:2009.13239, 2020."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99995422363281,
        465.3553161621094,
        522.0765380859375,
        489.8134460449219
      ],
      "text": "Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language\nunderstanding by generative pre-training, 2018."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99995422363281,
        503.0223388671875,
        522.098388671875,
        541.0294799804688
      ],
      "text": "Colin Raﬀel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael\nMatena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning\nwith a uniﬁed text-to-text transformer. arXiv preprint arXiv:1910.10683, 2019."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99996948242188,
        554.2373657226562,
        522.0548095703125,
        592.2454833984375
      ],
      "text": "Samyam Rajbhandari, JeﬀRasley, Olatunji Ruwase, and Yuxiong He. Zero: Memory opti-\nmization towards training a trillion parameter models. arXiv preprint arXiv:1910.02054,\n2019."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99996948242188,
        605.453369140625,
        522.120361328125,
        629.9114990234375
      ],
      "text": "Pranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. Squad: 100,000+\nquestions for machine comprehension of text. arXiv preprint arXiv:1606.05250, 2016."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99993896484375,
        643.120361328125,
        522.0765380859375,
        667.5784912109375
      ],
      "text": "Prajit Ramachandran and Quoc V Le. Diversity and depth in per-example routing models.\nIn International Conference on Learning Representations, 2018."
    },
    {
      "page_no": 38,
      "bbox": [
        89.99993896484375,
        680.787353515625,
        522.0101928710938,
        705.2454833984375
      ],
      "text": "Herbert Robbins. Some aspects of the sequential design of experiments. Bulletin of the\nAmerican Mathematical Society, 58(5):527–535, 1952."
    },
    {
      "page_no": 38,
      "bbox": [
        301.0189208984375,
        724.9640502929688,
        310.98150634765625,
        734.9266357421875
      ],
      "text": "38"
    },
    {
      "page_no": 39,
      "bbox": [
        248.83700561523438,
        37.99241638183594,
        359.53155517578125,
        47.95501708984375
      ],
      "text": "Switch Transformers"
    },
    {
      "page_no": 39,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0330200195312,
        117.75334930419922
      ],
      "text": "Adam Roberts, Colin Raﬀel, and Noam Shazeer. How much knowledge can you pack into\nthe parameters of a language model? arXiv preprint arXiv:2002.08910, 2020."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        131.1912384033203,
        522.0330200195312,
        169.1983642578125
      ],
      "text": "Clemens Rosenbaum, Tim Klinger, and Matthew Riemer. Routing networks: Adaptive\nselection of non-linear functions for multi-task learning. arXiv preprint arXiv:1711.01239,\n2017."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        182.63624572753906,
        522.087646484375,
        220.64337158203125
      ],
      "text": "Keisuke Sakaguchi, Ronan Le Bras, Chandra Bhagavatula, and Yejin Choi. Winogrande: An\nadversarial winograd schema challenge at scale. In Proceedings of the AAAI Conference\non Artiﬁcial Intelligence, volume 34, pages 8732–8740, 2020."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00004577636719,
        234.0812530517578,
        522.0877075195312,
        258.53936767578125
      ],
      "text": "Victor Sanh, Lysandre Debut, Julien Chaumond, and Thomas Wolf. Distilbert, a distilled\nversion of bert: smaller, faster, cheaper and lighter, 2019."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00004577636719,
        271.97723388671875,
        357.3712158203125,
        282.8863525390625
      ],
      "text": "Noam Shazeer. Glu variants improve transformer, 2020."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00004577636719,
        296.32421875,
        522.0330200195312,
        334.33135986328125
      ],
      "text": "Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoﬀrey Hin-\nton, and JeﬀDean. Outrageously large neural networks: The sparsely-gated mixture-of-\nexperts layer. arXiv preprint arXiv:1701.06538, 2017."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00004577636719,
        347.76922607421875,
        522.0657958984375,
        399.32537841796875
      ],
      "text": "Noam Shazeer, Youlong Cheng, Niki Parmar, Dustin Tran, Ashish Vaswani, Penporn\nKoanantakool, Peter Hawkins, HyoukJoong Lee, Mingsheng Hong, CliﬀYoung, et al.\nMesh-tensorﬂow: Deep learning for supercomputers. In Advances in Neural Information\nProcessing Systems, pages 10414–10423, 2018."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        412.76324462890625,
        522.0765991210938,
        450.7713623046875
      ],
      "text": "Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley, Jared Casper, and\nBryan Catanzaro. Megatron-lm: Training multi-billion parameter language models using\ngpu model parallelism. arXiv preprint arXiv:1909.08053, 2019."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        464.208251953125,
        522.0875854492188,
        518.4024658203125
      ],
      "text": "Nitish Srivastava, Geoﬀrey E. Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan\nSalakhutdinov.\nDropout: a simple way to prevent neural networks from overﬁtting.\nJournal of Machine Learning Research, 15(1):1929–1958, 2014. URL http://www.cs.\ntoronto.edu/~rsalakhu/papers/srivastava14a.pdf."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        529.2032470703125,
        522.07666015625,
        553.661376953125
      ],
      "text": "Emma Strubell, Ananya Ganesh, and Andrew McCallum. Energy and policy considerations\nfor deep learning in nlp. arXiv preprint arXiv:1906.02243, 2019."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        567.0992431640625,
        522.1312255859375,
        591.557373046875
      ],
      "text": "Sainbayar Sukhbaatar, Edouard Grave, Piotr Bojanowski, and Armand Joulin. Adaptive\nattention span in transformers. arXiv preprint arXiv:1905.07799, 2019."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00006103515625,
        604.9952392578125,
        529.666748046875,
        629.453369140625
      ],
      "text": "Rich Sutton. The Bitter Lesson. http://www.incompleteideas.net/IncIdeas/BitterLesson.html,\n2019."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        642.8912353515625,
        522.0284423828125,
        667.349365234375
      ],
      "text": "Richard S Sutton and Andrew G Barto. Reinforcement learning: An introduction. Stanford\nUniversity, 2018."
    },
    {
      "page_no": 39,
      "bbox": [
        90.00003051757812,
        680.7872314453125,
        522.014404296875,
        705.245361328125
      ],
      "text": "Wilson L Taylor. “cloze procedure”: A new tool for measuring readability. Journalism\nquarterly, 30(4):415–433, 1953."
    },
    {
      "page_no": 39,
      "bbox": [
        301.01904296875,
        724.9639892578125,
        310.98162841796875,
        734.9265747070312
      ],
      "text": "39"
    },
    {
      "page_no": 40,
      "bbox": [
        240.4029998779297,
        37.99241638183594,
        367.9443664550781,
        47.95501708984375
      ],
      "text": "Fedus, Zoph and Shazeer"
    },
    {
      "page_no": 40,
      "bbox": [
        90.0,
        93.29524230957031,
        522.0438842773438,
        131.3023681640625
      ],
      "text": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N\nGomez,  Lukasz Kaiser, and Illia Polosukhin.\nAttention is all you need.\nIn Advances\nin neural information processing systems, pages 5998–6008, 2017."
    },
    {
      "page_no": 40,
      "bbox": [
        90.0,
        142.9092559814453,
        522.0768432617188,
        180.9163818359375
      ],
      "text": "Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel R Bow-\nman. Glue: A multi-task benchmark and analysis platform for natural language under-\nstanding. arXiv preprint arXiv:1804.07461, 2018."
    },
    {
      "page_no": 40,
      "bbox": [
        90.0,
        192.5232696533203,
        522.098388671875,
        244.07940673828125
      ],
      "text": "Alex Wang, Yada Pruksachatkun, Nikita Nangia, Amanpreet Singh, Julian Michael, Felix\nHill, Omer Levy, and Samuel Bowman. Superglue: A stickier benchmark for general-\npurpose language understanding systems. In Advances in Neural Information Processing\nSystems, pages 3266–3280, 2019."
    },
    {
      "page_no": 40,
      "bbox": [
        90.0,
        255.68629455566406,
        522.07666015625,
        280.1444091796875
      ],
      "text": "Shibo Wang and Pankaj Kanwar. Bﬂoat16: The secret to high performance on cloud tpus.\nGoogle Cloud Blog, 2019."
    },
    {
      "page_no": 40,
      "bbox": [
        90.00000762939453,
        291.75030517578125,
        522.0874633789062,
        329.7584228515625
      ],
      "text": "Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya Siddhant,\nAditya Barua, and Colin Raﬀel. mt5: A massively multilingual pre-trained text-to-text\ntransformer. arXiv preprint arXiv:2010.11934, 2020."
    },
    {
      "page_no": 40,
      "bbox": [
        90.00003051757812,
        341.36431884765625,
        522.109375,
        379.3724365234375
      ],
      "text": "Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, and\nQuoc V. Le. Xlnet: Generalized autoregressive pretraining for language understanding,\n2020."
    },
    {
      "page_no": 40,
      "bbox": [
        90.00003051757812,
        390.97833251953125,
        522.131103515625,
        428.9864501953125
      ],
      "text": "Manzil Zaheer, Guru Guruganesh, Avinava Dubey, Joshua Ainslie, Chris Alberti, Santi-\nago Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, et al.\nBig bird:\nTransformers for longer sequences. arXiv preprint arXiv:2007.14062, 2020."
    },
    {
      "page_no": 40,
      "bbox": [
        301.01904296875,
        724.9640502929688,
        310.98162841796875,
        734.9266357421875
      ],
      "text": "40"
    }
  ],
  "pictures": [],
  "tables": [
    {
      "page_no": 1,
      "index": 1,
      "flavor": "stream",
      "nrows": 19,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p1_table1_stream.csv"
    },
    {
      "page_no": 2,
      "index": 1,
      "flavor": "stream",
      "nrows": 26,
      "ncols": 10,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p2_table1_stream.csv"
    },
    {
      "page_no": 3,
      "index": 1,
      "flavor": "stream",
      "nrows": 11,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p3_table1_stream.csv"
    },
    {
      "page_no": 3,
      "index": 2,
      "flavor": "stream",
      "nrows": 24,
      "ncols": 9,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p3_table2_stream.csv"
    },
    {
      "page_no": 4,
      "index": 1,
      "flavor": "stream",
      "nrows": 25,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p4_table1_stream.csv"
    },
    {
      "page_no": 5,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p5_table1_stream.csv"
    },
    {
      "page_no": 6,
      "index": 1,
      "flavor": "stream",
      "nrows": 11,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p6_table1_stream.csv"
    },
    {
      "page_no": 6,
      "index": 2,
      "flavor": "stream",
      "nrows": 20,
      "ncols": 7,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p6_table2_stream.csv"
    },
    {
      "page_no": 6,
      "index": 3,
      "flavor": "stream",
      "nrows": 12,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p6_table3_stream.csv"
    },
    {
      "page_no": 7,
      "index": 1,
      "flavor": "stream",
      "nrows": 31,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p7_table1_stream.csv"
    },
    {
      "page_no": 8,
      "index": 1,
      "flavor": "stream",
      "nrows": 39,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p8_table1_stream.csv"
    },
    {
      "page_no": 9,
      "index": 1,
      "flavor": "stream",
      "nrows": 13,
      "ncols": 5,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p9_table1_stream.csv"
    },
    {
      "page_no": 9,
      "index": 2,
      "flavor": "stream",
      "nrows": 12,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p9_table2_stream.csv"
    },
    {
      "page_no": 10,
      "index": 1,
      "flavor": "stream",
      "nrows": 6,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p10_table1_stream.csv"
    },
    {
      "page_no": 11,
      "index": 1,
      "flavor": "stream",
      "nrows": 8,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p11_table1_stream.csv"
    },
    {
      "page_no": 11,
      "index": 2,
      "flavor": "stream",
      "nrows": 9,
      "ncols": 5,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p11_table2_stream.csv"
    },
    {
      "page_no": 12,
      "index": 1,
      "flavor": "stream",
      "nrows": 15,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p12_table1_stream.csv"
    },
    {
      "page_no": 12,
      "index": 2,
      "flavor": "stream",
      "nrows": 23,
      "ncols": 9,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p12_table2_stream.csv"
    },
    {
      "page_no": 12,
      "index": 3,
      "flavor": "stream",
      "nrows": 11,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p12_table3_stream.csv"
    },
    {
      "page_no": 13,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 7,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p13_table1_stream.csv"
    },
    {
      "page_no": 13,
      "index": 2,
      "flavor": "stream",
      "nrows": 15,
      "ncols": 6,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p13_table2_stream.csv"
    },
    {
      "page_no": 14,
      "index": 1,
      "flavor": "stream",
      "nrows": 15,
      "ncols": 13,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p14_table1_stream.csv"
    },
    {
      "page_no": 15,
      "index": 1,
      "flavor": "stream",
      "nrows": 44,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p15_table1_stream.csv"
    },
    {
      "page_no": 16,
      "index": 1,
      "flavor": "stream",
      "nrows": 16,
      "ncols": 5,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p16_table1_stream.csv"
    },
    {
      "page_no": 17,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p17_table1_stream.csv"
    },
    {
      "page_no": 17,
      "index": 2,
      "flavor": "stream",
      "nrows": 8,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p17_table2_stream.csv"
    },
    {
      "page_no": 18,
      "index": 1,
      "flavor": "stream",
      "nrows": 7,
      "ncols": 7,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p18_table1_stream.csv"
    },
    {
      "page_no": 19,
      "index": 1,
      "flavor": "stream",
      "nrows": 107,
      "ncols": 9,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p19_table1_stream.csv"
    },
    {
      "page_no": 20,
      "index": 1,
      "flavor": "stream",
      "nrows": 16,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p20_table1_stream.csv"
    },
    {
      "page_no": 20,
      "index": 2,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p20_table2_stream.csv"
    },
    {
      "page_no": 21,
      "index": 1,
      "flavor": "stream",
      "nrows": 13,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p21_table1_stream.csv"
    },
    {
      "page_no": 22,
      "index": 1,
      "flavor": "stream",
      "nrows": 42,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p22_table1_stream.csv"
    },
    {
      "page_no": 23,
      "index": 1,
      "flavor": "stream",
      "nrows": 16,
      "ncols": 8,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p23_table1_stream.csv"
    },
    {
      "page_no": 23,
      "index": 2,
      "flavor": "stream",
      "nrows": 11,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p23_table2_stream.csv"
    },
    {
      "page_no": 24,
      "index": 1,
      "flavor": "stream",
      "nrows": 43,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p24_table1_stream.csv"
    },
    {
      "page_no": 25,
      "index": 1,
      "flavor": "stream",
      "nrows": 43,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p25_table1_stream.csv"
    },
    {
      "page_no": 26,
      "index": 1,
      "flavor": "stream",
      "nrows": 13,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p26_table1_stream.csv"
    },
    {
      "page_no": 26,
      "index": 2,
      "flavor": "stream",
      "nrows": 29,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p26_table2_stream.csv"
    },
    {
      "page_no": 27,
      "index": 1,
      "flavor": "stream",
      "nrows": 34,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p27_table1_stream.csv"
    },
    {
      "page_no": 28,
      "index": 1,
      "flavor": "stream",
      "nrows": 9,
      "ncols": 6,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p28_table1_stream.csv"
    },
    {
      "page_no": 29,
      "index": 1,
      "flavor": "stream",
      "nrows": 41,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p29_table1_stream.csv"
    },
    {
      "page_no": 30,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 8,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p30_table1_stream.csv"
    },
    {
      "page_no": 31,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 5,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p31_table1_stream.csv"
    },
    {
      "page_no": 32,
      "index": 1,
      "flavor": "stream",
      "nrows": 6,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p32_table1_stream.csv"
    },
    {
      "page_no": 32,
      "index": 2,
      "flavor": "stream",
      "nrows": 15,
      "ncols": 12,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p32_table2_stream.csv"
    },
    {
      "page_no": 33,
      "index": 1,
      "flavor": "stream",
      "nrows": 6,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p33_table1_stream.csv"
    },
    {
      "page_no": 33,
      "index": 2,
      "flavor": "stream",
      "nrows": 20,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p33_table2_stream.csv"
    },
    {
      "page_no": 34,
      "index": 1,
      "flavor": "stream",
      "nrows": 48,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p34_table1_stream.csv"
    },
    {
      "page_no": 35,
      "index": 1,
      "flavor": "stream",
      "nrows": 53,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p35_table1_stream.csv"
    },
    {
      "page_no": 36,
      "index": 1,
      "flavor": "stream",
      "nrows": 37,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p36_table1_stream.csv"
    },
    {
      "page_no": 37,
      "index": 1,
      "flavor": "stream",
      "nrows": 16,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p37_table1_stream.csv"
    },
    {
      "page_no": 38,
      "index": 1,
      "flavor": "stream",
      "nrows": 36,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p38_table1_stream.csv"
    },
    {
      "page_no": 39,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p39_table1_stream.csv"
    },
    {
      "page_no": 40,
      "index": 1,
      "flavor": "stream",
      "nrows": 21,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2101.03961/2101.03961_p40_table1_stream.csv"
    }
  ]
}