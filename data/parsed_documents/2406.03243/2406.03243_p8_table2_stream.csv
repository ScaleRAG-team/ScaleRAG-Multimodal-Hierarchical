"","","Auto-scaling.
Llumnix scales the instances according to the"
"","Algorithm 1: Virtual Usage and Freeness Calculation",""
"","","cluster load in terms of the averages freeness for the normal"
"1","Function CalcVirtualUsage(req, instance):",""
"2","if req.isQueuing then","priority across instances. The policy maintains the average"
"3","if req.isHeadO f Line then",""
"","","freeness within a range [x, y], and adds or terminates an in-"
"4","return req.demand",""
"","","stance when the freeness is smaller than x or greater than y"
"5","return 0",""
"","","for a period, respectively. Llumnix chooses the instance with"
"6","if req.isFake then",""
"7","return ∞","fewest running requests for termination."
"8","return req.physicalUsage+GetHeadroom(req.priority, instance)",""
"9","Function GetHeadroom(p, instance):",""
"","return headroomForPriority[p]/instance.numRequests[p]",""
"10","","5
Implementation"
"11","Function CalcFreeness(instance):",""
"12","if instance.isTerminating then",""
"","",""
"13","AddFakeReq (instance.requests)","We implement Llumnix with 3,300 lines of Python code."
"","",""
"14","totalVirtualUsages = 0","Llumnix is a standalone library comprising both its own com-"
"15","for req in instance.requests do",""
"16","totalVirtualUsages+ =CalcVirtualUsage(req, instance)","ponents and an interface to integrate and communicate with"
"17","f reeness = (instance.M − totalVirtualUsage)/instance.B","backend inference engines. This architecture makes Llumnix"
"","",""
"18","return f reeness","non-intrusive and extensible to different backends. Llumnix"
"","","currently supports vLLM [11] as the backend, which is an"
