{
  "title": "Efficient Memory Management for Large Language Model Serving with PagedAttention",
  "authors": [],
  "source_path": "../data/pdf/2309.06180.pdf",
  "page_count": 16,
  "processed_pages": [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16
  ],
  "counts": {
    "texts": 590,
    "pictures": 3,
    "tables": 22
  },
  "stats_per_page": [
    {
      "page": 1,
      "text_blocks": 29,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 2,
      "text_blocks": 29,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 3,
      "text_blocks": 19,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 4,
      "text_blocks": 23,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 5,
      "text_blocks": 40,
      "layout_blocks": 3,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 3,
      "tables_found": 1
    },
    {
      "page": 6,
      "text_blocks": 90,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 7,
      "text_blocks": 49,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 8,
      "text_blocks": 28,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 9,
      "text_blocks": 36,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 10,
      "text_blocks": 78,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 11,
      "text_blocks": 63,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 12,
      "text_blocks": 56,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 13,
      "text_blocks": 35,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 14,
      "text_blocks": 9,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 15,
      "text_blocks": 3,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 16,
      "text_blocks": 3,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    }
  ],
  "texts": [
    {
      "page_no": 1,
      "bbox": [
        68.15399932861328,
        71.13632202148438,
        543.8460693359375,
        115.75819396972656
      ],
      "text": "Efficient Memory Management for Large Language\nModel Serving with PagedAttention"
    },
    {
      "page_no": 1,
      "bbox": [
        69.24700927734375,
        124.56510162353516,
        541.6807250976562,
        140.86033630371094
      ],
      "text": "Woosuk Kwon1,∗Zhuohan Li1,∗Siyuan Zhuang1 Ying Sheng1,2 Lianmin Zheng1 Cody Hao Yu3"
    },
    {
      "page_no": 1,
      "bbox": [
        195.25299072265625,
        138.5131072998047,
        416.25970458984375,
        154.8072967529297
      ],
      "text": "Joseph E. Gonzalez1 Hao Zhang4 Ion Stoica1"
    },
    {
      "page_no": 1,
      "bbox": [
        143.94000244140625,
        157.5404815673828,
        467.8923034667969,
        169.10025024414062
      ],
      "text": "1UC Berkeley\n2Stanford University\n3Independent Researcher\n4UC San Diego"
    },
    {
      "page_no": 1,
      "bbox": [
        54.0,
        179.05548095703125,
        95.61821746826172,
        189.96458435058594
      ],
      "text": "Abstract"
    },
    {
      "page_no": 1,
      "bbox": [
        53.63100051879883,
        196.4198455810547,
        295.73016357421875,
        433.65911865234375
      ],
      "text": "High throughput serving of large language models (LLMs)\nrequires batching sufficiently many requests at a time. How-\never, existing systems struggle because the key-value cache\n(KV cache) memory for each request is huge and grows\nand shrinks dynamically. When managed inefficiently, this\nmemory can be significantly wasted by fragmentation and\nredundant duplication, limiting the batch size. To address\nthis problem, we propose PagedAttention, an attention al-\ngorithm inspired by the classical virtual memory and pag-\ning techniques in operating systems. On top of it, we build\nvLLM, an LLM serving system that achieves (1) near-zero\nwaste in KV cache memory and (2) flexible sharing of KV\ncache within and across requests to further reduce mem-\nory usage. Our evaluations show that vLLM improves the\nthroughput of popular LLMs by 2-4× with the same level\nof latency compared to the state-of-the-art systems, such\nas FasterTransformer and Orca. The improvement is more\npronounced with longer sequences, larger models, and more\ncomplex decoding algorithms. vLLM’s source code is publicly\navailable at https://github.com/vllm-project/vllm."
    },
    {
      "page_no": 1,
      "bbox": [
        54.0,
        452.527587890625,
        133.58187866210938,
        463.4366760253906
      ],
      "text": "1\nIntroduction"
    },
    {
      "page_no": 1,
      "bbox": [
        53.70100021362305,
        469.9486999511719,
        295.7324523925781,
        599.46728515625
      ],
      "text": "The emergence of large language models (LLMs) like GPT [5,\n37] and PaLM [9] have enabled new applications such as pro-\ngramming assistants [6, 18] and universal chatbots [19, 35]\nthat are starting to profoundly impact our work and daily\nroutines. Many cloud companies [34, 44] are racing to pro-\nvide these applications as hosted services. However, running\nthese applications is very expensive, requiring a large num-\nber of hardware accelerators such as GPUs. According to\nrecent estimates, processing an LLM request can be 10× more\nexpensive than a traditional keyword query [43]. Given these\nhigh costs, increasing the throughput—and hence reducing"
    },
    {
      "page_no": 1,
      "bbox": [
        53.45000076293945,
        617.8886108398438,
        295.38995361328125,
        717.6334838867188
      ],
      "text": "Permission to make digital or hard copies of part or all of this work for\npersonal or classroom use is granted without fee provided that copies are\nnot made or distributed for profit or commercial advantage and that copies\nbear this notice and the full citation on the first page. Copyrights for third-\nparty components of this work must be honored. For all other uses, contact\nthe owner/author(s).\nSOSP ’23, October 23–26, 2023, Koblenz, Germany\n© 2023 Copyright held by the owner/author(s).\nACM ISBN 979-8-4007-0229-7/23/10.\nhttps://doi.org/10.1145/3600006.3613165"
    },
    {
      "page_no": 1,
      "bbox": [
        340.47979736328125,
        280.41436767578125,
        403.889892578125,
        288.5894470214844
      ],
      "text": "NVIDIA A100 40GB"
    },
    {
      "page_no": 1,
      "bbox": [
        331.3819274902344,
        230.12123107910156,
        373.65533447265625,
        246.9874267578125
      ],
      "text": "Parameters \n(26GB, 65%)"
    },
    {
      "page_no": 1,
      "bbox": [
        387.7007141113281,
        219.0908203125,
        411.48681640625,
        244.64808654785156
      ],
      "text": "KV \nCache\n(>30%)"
    },
    {
      "page_no": 1,
      "bbox": [
        388.6173400878906,
        264.2457275390625,
        410.56640625,
        272.4208068847656
      ],
      "text": "Others"
    },
    {
      "page_no": 1,
      "bbox": [
        443.9831848144531,
        237.17660522460938,
        449.2839660644531,
        242.03150939941406
      ],
      "text": "20"
    },
    {
      "page_no": 1,
      "bbox": [
        443.9831848144531,
        214.2001953125,
        449.2839660644531,
        219.0550994873047
      ],
      "text": "30"
    },
    {
      "page_no": 1,
      "bbox": [
        443.9831848144531,
        191.2238006591797,
        449.2839660644531,
        196.07870483398438
      ],
      "text": "40"
    },
    {
      "page_no": 1,
      "bbox": [
        436.62872314453125,
        191.59091186523438,
        442.4546203613281,
        241.4084930419922
      ],
      "text": "Memory usage (GB)"
    },
    {
      "page_no": 1,
      "bbox": [
        460.91192626953125,
        229.8506622314453,
        492.00103759765625,
        234.70556640625
      ],
      "text": "Parameter size"
    },
    {
      "page_no": 1,
      "bbox": [
        464.6403503417969,
        183.3847198486328,
        543.57421875,
        189.21060180664062
      ],
      "text": "Existing systems\nvLLM"
    },
    {
      "page_no": 1,
      "bbox": [
        450.8755187988281,
        296.3301086425781,
        544.6690673828125,
        307.7173156738281
      ],
      "text": "0\n10\n20\n30\n40\nBatch size (# requests)"
    },
    {
      "page_no": 1,
      "bbox": [
        446.6333312988281,
        291.8307189941406,
        449.2837219238281,
        296.6856384277344
      ],
      "text": "0"
    },
    {
      "page_no": 1,
      "bbox": [
        440.2391357421875,
        276.51312255859375,
        449.27801513671875,
        281.3680419921875
      ],
      "text": "0.4k"
    },
    {
      "page_no": 1,
      "bbox": [
        440.2391357421875,
        261.1955261230469,
        449.27801513671875,
        266.0504455566406
      ],
      "text": "0.8k"
    },
    {
      "page_no": 1,
      "bbox": [
        440.2391357421875,
        245.8779296875,
        449.27801513671875,
        250.7328338623047
      ],
      "text": "1.2k"
    },
    {
      "page_no": 1,
      "bbox": [
        432.8846435546875,
        244.74844360351562,
        438.7105407714844,
        297.5765380859375
      ],
      "text": "Throughput (token/s)"
    },
    {
      "page_no": 1,
      "bbox": [
        317.6059875488281,
        315.14093017578125,
        559.5328979492188,
        408.8883361816406
      ],
      "text": "Figure 1. Left: Memory layout when serving an LLM with\n13B parameters on NVIDIA A100. The parameters (gray)\npersist in GPU memory throughout serving. The memory\nfor the KV cache (red) is (de)allocated per serving request.\nA small amount of memory (yellow) is used ephemerally\nfor activation. Right: vLLM smooths out the rapid growth\ncurve of KV cache memory seen in existing systems [31, 60],\nleading to a notable boost in serving throughput."
    },
    {
      "page_no": 1,
      "bbox": [
        317.5870056152344,
        427.92529296875,
        559.6880493164062,
        701.0000610351562
      ],
      "text": "the cost per request—of LLM serving systems is becoming\nmore important.\nAt the core of LLMs lies an autoregressive Transformer\nmodel [53]. This model generates words (tokens), one at a\ntime, based on the input (prompt) and the previous sequence\nof the output’s tokens it has generated so far. For each re-\nquest, this expensive process is repeated until the model out-\nputs a termination token. This sequential generation process\nmakes the workload memory-bound, underutilizing the com-\nputation power of GPUs and limiting the serving throughput.\nImproving the throughput is possible by batching multi-\nple requests together. However, to process many requests\nin a batch, the memory space for each request should be\nefficiently managed. For example, Fig. 1 (left) illustrates the\nmemory distribution for a 13B-parameter LLM on an NVIDIA\nA100 GPU with 40GB RAM. Approximately 65% of the mem-\nory is allocated for the model weights, which remain static\nduring serving. Close to 30% of the memory is used to store\nthe dynamic states of the requests. For Transformers, these\nstates consist of the key and value tensors associated with the\nattention mechanism, commonly referred to as KV cache [41],\nwhich represent the context from earlier tokens to gener-\nate new output tokens in sequence. The remaining small"
    },
    {
      "page_no": 1,
      "bbox": [
        304.05499267578125,
        707.6091918945312,
        384.60162353515625,
        729.5302734375
      ],
      "text": "∗Equal contribution.\n1"
    },
    {
      "page_no": 1,
      "bbox": [
        10.940000534057617,
        212.25994873046875,
        37.619998931884766,
        560.0
      ],
      "text": "arXiv:2309.06180v1  [cs.LG]  12 Sep 2023"
    },
    {
      "page_no": 2,
      "bbox": [
        99.20628356933594,
        191.95266723632812,
        115.48397064208984,
        205.0172882080078
      ],
      "text": "Orca\n(Max)"
    },
    {
      "page_no": 2,
      "bbox": [
        146.21420288085938,
        191.95266723632812,
        165.7259521484375,
        205.0172882080078
      ],
      "text": "Orca\n(Pow2)"
    },
    {
      "page_no": 2,
      "bbox": [
        193.0844268798828,
        191.95266723632812,
        216.1406707763672,
        205.0172882080078
      ],
      "text": "Orca\n(Oracle)"
    },
    {
      "page_no": 2,
      "bbox": [
        72.29459381103516,
        186.96585083007812,
        260.5913391113281,
        198.61119079589844
      ],
      "text": "vLLM\n0"
    },
    {
      "page_no": 2,
      "bbox": [
        69.26568603515625,
        169.1876678466797,
        75.3240966796875,
        174.73643493652344
      ],
      "text": "20"
    },
    {
      "page_no": 2,
      "bbox": [
        69.26568603515625,
        151.4094696044922,
        75.3240966796875,
        156.95823669433594
      ],
      "text": "40"
    },
    {
      "page_no": 2,
      "bbox": [
        69.26568603515625,
        133.6312713623047,
        75.3240966796875,
        139.18003845214844
      ],
      "text": "60"
    },
    {
      "page_no": 2,
      "bbox": [
        69.26568603515625,
        115.85308074951172,
        75.3240966796875,
        121.40186309814453
      ],
      "text": "80"
    },
    {
      "page_no": 2,
      "bbox": [
        66.23678588867188,
        98.07489013671875,
        75.32440185546875,
        103.62367248535156
      ],
      "text": "100"
    },
    {
      "page_no": 2,
      "bbox": [
        57.83121871948242,
        116.55503845214844,
        64.48975372314453,
        173.73269653320312
      ],
      "text": "KV cache usage (%)"
    },
    {
      "page_no": 2,
      "bbox": [
        100.98493194580078,
        176.67710876464844,
        113.70759582519531,
        183.33563232421875
      ],
      "text": "20.4"
    },
    {
      "page_no": 2,
      "bbox": [
        100.98493194580078,
        161.6728973388672,
        113.70759582519531,
        168.3314208984375
      ],
      "text": "13.3"
    },
    {
      "page_no": 2,
      "bbox": [
        100.98493194580078,
        130.27362060546875,
        113.70759582519531,
        136.93214416503906
      ],
      "text": "57.3"
    },
    {
      "page_no": 2,
      "bbox": [
        102.80450439453125,
        100.83233642578125,
        111.89212036132812,
        107.4908676147461
      ],
      "text": "8.9"
    },
    {
      "page_no": 2,
      "bbox": [
        149.61892700195312,
        173.81552124023438,
        162.34158325195312,
        180.4740447998047
      ],
      "text": "26.8"
    },
    {
      "page_no": 2,
      "bbox": [
        149.61892700195312,
        153.9341583251953,
        162.34158325195312,
        160.59268188476562
      ],
      "text": "17.9"
    },
    {
      "page_no": 2,
      "bbox": [
        149.61892700195312,
        139.92054748535156,
        162.34158325195312,
        146.57907104492188
      ],
      "text": "13.6"
    },
    {
      "page_no": 2,
      "bbox": [
        149.61892700195312,
        115.3564453125,
        162.34158325195312,
        122.01498413085938
      ],
      "text": "41.6"
    },
    {
      "page_no": 2,
      "bbox": [
        198.25291442871094,
        168.77099609375,
        210.97557067871094,
        175.4295196533203
      ],
      "text": "38.2"
    },
    {
      "page_no": 2,
      "bbox": [
        198.25291442871094,
        140.5745391845703,
        210.97557067871094,
        147.23306274414062
      ],
      "text": "25.2"
    },
    {
      "page_no": 2,
      "bbox": [
        198.25291442871094,
        113.10655212402344,
        210.97557067871094,
        119.76509094238281
      ],
      "text": "36.6"
    },
    {
      "page_no": 2,
      "bbox": [
        246.88690185546875,
        142.9633331298828,
        259.60955810546875,
        149.62185668945312
      ],
      "text": "96.3"
    },
    {
      "page_no": 2,
      "bbox": [
        92.97108459472656,
        82.64888000488281,
        277.9379577636719,
        95.71350860595703
      ],
      "text": "Token states\nReservation\nInternal frag.\nExternal frag.\n& Others"
    },
    {
      "page_no": 2,
      "bbox": [
        54.0,
        222.04237365722656,
        294.04388427734375,
        243.93429565429688
      ],
      "text": "Figure 2. Average percentage of memory wastes in different\nLLM serving systems during the experiment in §6.2."
    },
    {
      "page_no": 2,
      "bbox": [
        53.70100021362305,
        265.7081298828125,
        295.7308044433594,
        718.0473022460938
      ],
      "text": "percentage of memory is used for other data, including ac-\ntivations – the ephemeral tensors created when evaluating\nthe LLM. Since the model weights are constant and the ac-\ntivations only occupy a small fraction of the GPU memory,\nthe way the KV cache is managed is critical in determining\nthe maximum batch size. When managed inefficiently, the\nKV cache memory can significantly limit the batch size and\nconsequently the throughput of the LLM, as illustrated in\nFig. 1 (right).\nIn this paper, we observe that existing LLM serving sys-\ntems [31, 60] fall short of managing the KV cache memory\nefficiently. This is mainly because they store the KV cache of\na request in contiguous memory space, as most deep learning\nframeworks [33, 39] require tensors to be stored in contigu-\nous memory. However, unlike the tensors in the traditional\ndeep learning workloads, the KV cache has unique charac-\nteristics: it dynamically grows and shrinks over time as the\nmodel generates new tokens, and its lifetime and length are\nnot known a priori. These characteristics make the existing\nsystems’ approach significantly inefficient in two ways:\nFirst, the existing systems [31, 60] suffer from internal and\nexternal memory fragmentation. To store the KV cache of\na request in contiguous space, they pre-allocate a contigu-\nous chunk of memory with the request’s maximum length\n(e.g., 2048 tokens). This can result in severe internal frag-\nmentation, since the request’s actual length can be much\nshorter than its maximum length (e.g., Fig. 11). Moreover,\neven if the actual length is known a priori, the pre-allocation\nis still inefficient: As the entire chunk is reserved during the\nrequest’s lifetime, other shorter requests cannot utilize any\npart of the chunk that is currently unused. Besides, external\nmemory fragmentation can also be significant, since the pre-\nallocated size can be different for each request. Indeed, our\nprofiling results in Fig. 2 show that only 20.4% - 38.2% of the\nKV cache memory is used to store the actual token states in\nthe existing systems.\nSecond, the existing systems cannot exploit the opportu-\nnities for memory sharing. LLM services often use advanced"
    },
    {
      "page_no": 2,
      "bbox": [
        317.5870056152344,
        74.41132354736328,
        559.6874389648438,
        646.34130859375
      ],
      "text": "decoding algorithms, such as parallel sampling and beam\nsearch, that generate multiple outputs per request. In these\nscenarios, the request consists of multiple sequences that can\npartially share their KV cache. However, memory sharing is\nnot possible in the existing systems because the KV cache of\nthe sequences is stored in separate contiguous spaces.\nTo address the above limitations, we propose PagedAt-\ntention, an attention algorithm inspired by the operating\nsystem’s (OS) solution to memory fragmentation and shar-\ning: virtual memory with paging. PagedAttention divides the\nrequest’s KV cache into blocks, each of which can contain\nthe attention keys and values of a fixed number of tokens. In\nPagedAttention, the blocks for the KV cache are not neces-\nsarily stored in contiguous space. Therefore, we can manage\nthe KV cache in a more flexible way as in OS’s virtual mem-\nory: one can think of blocks as pages, tokens as bytes, and\nrequests as processes. This design alleviates internal frag-\nmentation by using relatively small blocks and allocating\nthem on demand. Moreover, it eliminates external fragmen-\ntation as all blocks have the same size. Finally, it enables\nmemory sharing at the granularity of a block, across the\ndifferent sequences associated with the same request or even\nacross the different requests.\nIn this work, we build vLLM, a high-throughput distributed\nLLM serving engine on top of PagedAttention that achieves\nnear-zero waste in KV cache memory. vLLM uses block-level\nmemory management and preemptive request scheduling\nthat are co-designed with PagedAttention. vLLM supports\npopular LLMs such as GPT [5], OPT [62], and LLaMA [52]\nwith varying sizes, including the ones exceeding the memory\ncapacity of a single GPU. Our evaluations on various models\nand workloads show that vLLM improves the LLM serving\nthroughput by 2-4× compared to the state-of-the-art sys-\ntems [31, 60], without affecting the model accuracy at all. The\nimprovements are more pronounced with longer sequences,\nlarger models, and more complex decoding algorithms (§4.3).\nIn summary, we make the following contributions:\n• We identify the challenges in memory allocation in serving\nLLMs and quantify their impact on serving performance.\n• We propose PagedAttention, an attention algorithm that\noperates on KV cache stored in non-contiguous paged\nmemory, which is inspired by the virtual memory and\npaging in OS.\n• We design and implement vLLM, a distributed LLM serving\nengine built on top of PagedAttention.\n• We evaluate vLLM on various scenarios and demonstrate\nthat it substantially outperforms the previous state-of-the-\nart solutions such as FasterTransformer [31] and Orca [60]."
    },
    {
      "page_no": 2,
      "bbox": [
        317.9549865722656,
        663.612548828125,
        394.42779541015625,
        674.5216674804688
      ],
      "text": "2\nBackground"
    },
    {
      "page_no": 2,
      "bbox": [
        317.9549865722656,
        684.1950073242188,
        559.6799926757812,
        718.072265625
      ],
      "text": "In this section, we describe the generation and serving pro-\ncedures of typical LLMs and the iteration-level scheduling\nused in LLM serving."
    },
    {
      "page_no": 2,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "2"
    },
    {
      "page_no": 3,
      "bbox": [
        54.0,
        74.43571472167969,
        272.5694580078125,
        84.3983154296875
      ],
      "text": "2.1\nTransformer-Based Large Language Models"
    },
    {
      "page_no": 3,
      "bbox": [
        53.70100021362305,
        91.43933868408203,
        295.7307434082031,
        149.3160400390625
      ],
      "text": "The task of language modeling is to model the probability\nof a list of tokens (𝑥1, . . . ,𝑥𝑛). Since language has a natural\nsequential ordering, it is common to factorize the joint prob-\nability over the whole sequence as the product of conditional\nprobabilities (a.k.a. autoregressive decomposition [3]):"
    },
    {
      "page_no": 3,
      "bbox": [
        76.14900207519531,
        161.06002807617188,
        294.6423034667969,
        174.08631896972656
      ],
      "text": "𝑃(𝑥) = 𝑃(𝑥1) · 𝑃(𝑥2 | 𝑥1) · · · 𝑃(𝑥𝑛| 𝑥1, . . . ,𝑥𝑛−1).\n(1)"
    },
    {
      "page_no": 3,
      "bbox": [
        53.70100021362305,
        187.25448608398438,
        295.7321472167969,
        269.1153259277344
      ],
      "text": "Transformers [53] have become the de facto standard ar-\nchitecture for modeling the probability above at a large scale.\nThe most important component of a Transformer-based lan-\nguage model is its self-attention layers. For an input hidden\nstate sequence (𝑥1, . . . ,𝑥𝑛) ∈R𝑛×𝑑, a self-attention layer\nfirst applies linear transformations on each position 𝑖to get\nthe query, key, and value vectors:"
    },
    {
      "page_no": 3,
      "bbox": [
        108.02099609375,
        280.8780212402344,
        294.64227294921875,
        293.0813293457031
      ],
      "text": "𝑞𝑖= 𝑊𝑞𝑥𝑖, 𝑘𝑖= 𝑊𝑘𝑥𝑖, 𝑣𝑖= 𝑊𝑣𝑥𝑖.\n(2)"
    },
    {
      "page_no": 3,
      "bbox": [
        53.63100051879883,
        307.05859375,
        294.0469665527344,
        352.9123229980469
      ],
      "text": "Then, the self-attention layer computes the attention score\n𝑎𝑖𝑗by multiplying the query vector at one position with all\nthe key vectors before it and compute the output 𝑜𝑖as the\nweighted average over the value vectors:"
    },
    {
      "page_no": 3,
      "bbox": [
        90.906005859375,
        359.0652770996094,
        174.7227325439453,
        385.4703063964844
      ],
      "text": "𝑎𝑖𝑗=\nexp(𝑞⊤\n𝑖𝑘𝑗/\n√"
    },
    {
      "page_no": 3,
      "bbox": [
        114.99700164794922,
        366.0820007324219,
        185.01072692871094,
        397.5273132324219
      ],
      "text": "𝑑)\nÍ𝑖\n𝑡=1 exp(𝑞⊤\n𝑖𝑘𝑡/\n√"
    },
    {
      "page_no": 3,
      "bbox": [
        184.51199340820312,
        373.7090148925781,
        217.46185302734375,
        394.2228698730469
      ],
      "text": "𝑑)\n, 𝑜𝑖="
    },
    {
      "page_no": 3,
      "bbox": [
        220.22898864746094,
        364.14666748046875,
        233.40951538085938,
        382.36041259765625
      ],
      "text": "𝑖∑︁"
    },
    {
      "page_no": 3,
      "bbox": [
        221.86099243164062,
        373.7090148925781,
        294.6422424316406,
        396.45428466796875
      ],
      "text": "𝑗=1\n𝑎𝑖𝑗𝑣𝑗.\n(3)"
    },
    {
      "page_no": 3,
      "bbox": [
        53.750999450683594,
        409.36529541015625,
        295.7320251464844,
        479.1783142089844
      ],
      "text": "Besides the computation in Eq. 4, all other components\nin the Transformer model, including the embedding layer,\nfeed-forward layer, layer normalization [2], residual connec-\ntion [22], output logit computation, and the query, key, and\nvalue transformation in Eq. 2, are all applied independently\nposition-wise in a form of 𝑦𝑖= 𝑓(𝑥𝑖)."
    },
    {
      "page_no": 3,
      "bbox": [
        54.00001525878906,
        487.792724609375,
        264.51971435546875,
        497.75531005859375
      ],
      "text": "2.2\nLLM Service & Autoregressive Generation"
    },
    {
      "page_no": 3,
      "bbox": [
        53.6510009765625,
        504.9317626953125,
        295.72723388671875,
        718.072265625
      ],
      "text": "Once trained, LLMs are often deployed as a conditional gen-\neration service (e.g., completion API [34] or chatbot [19, 35]).\nA request to an LLM service provides a list of input prompt\ntokens (𝑥1, . . . ,𝑥𝑛), and the LLM service generates a list of\noutput tokens (𝑥𝑛+1, . . . ,𝑥𝑛+𝑇) according to Eq. 1. We refer to\nthe concatenation of the prompt and output lists as sequence.\nDue to the decomposition in Eq. 1, the LLM can only sam-\nple and generate new tokens one by one, and the generation\nprocess of each new token depends on all the previous tokens\nin that sequence, specifically their key and value vectors. In\nthis sequential generation process, the key and value vectors\nof existing tokens are often cached for generating future\ntokens, known as KV cache. Note that the KV cache of one\ntoken depends on all its previous tokens. This means that the\nKV cache of the same token appearing at different positions\nin a sequence will be different.\nGiven a request prompt, the generation computation in\nthe LLM service can be decomposed into two phases:"
    },
    {
      "page_no": 3,
      "bbox": [
        317.6260070800781,
        72.24503326416016,
        559.6852416992188,
        168.13430786132812
      ],
      "text": "The prompt phase takes the whole user prompt (𝑥1, . . . ,𝑥𝑛)\nas input and computes the probability of the first new to-\nken 𝑃(𝑥𝑛+1 | 𝑥1, . . . ,𝑥𝑛). During this process, also gener-\nates the key vectors 𝑘1, . . . ,𝑘𝑛and value vectors 𝑣1, . . . , 𝑣𝑛.\nSince prompt tokens 𝑥1, . . . ,𝑥𝑛are all known, the computa-\ntion of the prompt phase can be parallelized using matrix-\nmatrix multiplication operations. Therefore, this phase can\nefficiently use the parallelism inherent in GPUs."
    },
    {
      "page_no": 3,
      "bbox": [
        317.6260070800781,
        173.98678588867188,
        559.6870727539062,
        363.4023132324219
      ],
      "text": "The autoregressive generation phase generates the re-\nmaining new tokens sequentially. At iteration 𝑡, the model\ntakes one token 𝑥𝑛+𝑡as input and computes the probability\n𝑃(𝑥𝑛+𝑡+1 | 𝑥1, . . . ,𝑥𝑛+𝑡) with the key vectors 𝑘1, . . . ,𝑘𝑛+𝑡and\nvalue vectors 𝑣1, . . . , 𝑣𝑛+𝑡. Note that the key and value vectors\nat positions 1 to 𝑛+ 𝑡−1 are cached at previous iterations,\nonly the new key and value vector 𝑘𝑛+𝑡and 𝑣𝑛+𝑡are com-\nputed at this iteration. This phase completes either when the\nsequence reaches a maximum length (specified by users or\nlimited by LLMs) or when an end-of-sequence (<eos>) token\nis emitted. The computation at different iterations cannot\nbe parallelized due to the data dependency and often uses\nmatrix-vector multiplication, which is less efficient. As a re-\nsult, this phase severely underutilizes GPU computation and\nbecomes memory-bound, being responsible for most portion\nof the latency of a single request."
    },
    {
      "page_no": 3,
      "bbox": [
        317.9549865722656,
        368.9356994628906,
        478.4424743652344,
        378.8982849121094
      ],
      "text": "2.3\nBatching Techniques for LLMs"
    },
    {
      "page_no": 3,
      "bbox": [
        317.5870056152344,
        385.24530029296875,
        560.355712890625,
        718.072265625
      ],
      "text": "The compute utilization in serving LLMs can be improved\nby batching multiple requests. Because the requests share\nthe same model weights, the overhead of moving weights is\namortized across the requests in a batch, and can be over-\nwhelmed by the computational overhead when the batch\nsize is sufficiently large. However, batching the requests\nto an LLM service is non-trivial for two reasons. First, the\nrequests may arrive at different times. A naive batching strat-\negy would either make earlier requests wait for later ones\nor delay the incoming requests until earlier ones finish, lead-\ning to significant queueing delays. Second, the requests may\nhave vastly different input and output lengths (Fig. 11). A\nstraightforward batching technique would pad the inputs\nand outputs of the requests to equalize their lengths, wasting\nGPU computation and memory.\nTo address this problem, fine-grained batching mecha-\nnisms, such as cellular batching [16] and iteration-level sched-\nuling [60], have been proposed. Unlike traditional methods\nthat work at the request level, these techniques operate at\nthe iteration level. After each iteration, completed requests\nare removed from the batch, and new ones are added. There-\nfore, a new request can be processed after waiting for a\nsingle iteration, not waiting for the entire batch to complete.\nMoreover, with special GPU kernels, these techniques elim-\ninate the need to pad the inputs and outputs. By reducing\nthe queueing delay and the inefficiencies from padding, the\nfine-grained batching mechanisms significantly increase the\nthroughput of LLM serving."
    },
    {
      "page_no": 3,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "3"
    },
    {
      "page_no": 4,
      "bbox": [
        96.31871795654297,
        94.62380981445312,
        516.1232299804688,
        100.06717681884766
      ],
      "text": "Four\nscore\nand\nseven\nyears\nago\nour\nfathers brought\nforth\n<eos> <resv>\n…\n<resv>\nYou\nonly\nlive\nonce\n<eos> <resv>\n…\n<resv>"
    },
    {
      "page_no": 4,
      "bbox": [
        288.6708984375,
        110.48728942871094,
        339.0518493652344,
        121.77849578857422
      ],
      "text": "2038 slots never used \n(internal fragmentation)"
    },
    {
      "page_no": 4,
      "bbox": [
        249.66688537597656,
        73.02452087402344,
        289.4565734863281,
        78.46788787841797
      ],
      "text": "2 slots future used"
    },
    {
      "page_no": 4,
      "bbox": [
        258.4745788574219,
        77.89776611328125,
        382.61785888671875,
        84.31572723388672
      ],
      "text": "(reserved)\nExternal fragmentation"
    },
    {
      "page_no": 4,
      "bbox": [
        131.30271911621094,
        110.48709106445312,
        178.93338012695312,
        115.93045806884766
      ],
      "text": "7 KV cache states for"
    },
    {
      "page_no": 4,
      "bbox": [
        134.3722686767578,
        116.33493041992188,
        174.5323028564453,
        121.7782974243164
      ],
      "text": "request A’s prompt"
    },
    {
      "page_no": 4,
      "bbox": [
        379.2555847167969,
        110.48709106445312,
        426.8861999511719,
        115.93045806884766
      ],
      "text": "3 KV cache states for"
    },
    {
      "page_no": 4,
      "bbox": [
        382.00982666015625,
        116.33493041992188,
        422.7984924316406,
        121.7782974243164
      ],
      "text": "request B’s prompt"
    },
    {
      "page_no": 4,
      "bbox": [
        436.8390197753906,
        73.02471923828125,
        474.1921081542969,
        78.46808624267578
      ],
      "text": "1 slot future used"
    },
    {
      "page_no": 4,
      "bbox": [
        444.4284362792969,
        78.87255859375,
        466.6338195800781,
        84.31592559814453
      ],
      "text": "(reserved)"
    },
    {
      "page_no": 4,
      "bbox": [
        465.761962890625,
        110.48728942871094,
        516.4141845703125,
        121.77849578857422
      ],
      "text": "507 slots never used\n(Internal fragmentation)"
    },
    {
      "page_no": 4,
      "bbox": [
        226.07122802734375,
        124.96211242675781,
        454.7635192871094,
        136.33323669433594
      ],
      "text": "Request B\ncurrent iteration\nRequest A\ncurrent iteration"
    },
    {
      "page_no": 4,
      "bbox": [
        207.67739868164062,
        73.02452087402344,
        242.88140869140625,
        84.31572723388672
      ],
      "text": "1 slot for\ngenerated token"
    },
    {
      "page_no": 4,
      "bbox": [
        54.0,
        144.79237365722656,
        559.0986328125,
        178.63931274414062
      ],
      "text": "Figure 3. KV cache memory management in existing systems. Three types of memory wastes – reserved, internal fragmentation,\nand external fragmentation – exist that prevent other requests from fitting into the memory. The token in each memory slot\nrepresents its KV cache. Note the same tokens can have different KV cache when at different positions."
    },
    {
      "page_no": 4,
      "bbox": [
        54.0,
        196.404541015625,
        248.14926147460938,
        207.3136444091797
      ],
      "text": "3\nMemory Challenges in LLM Serving"
    },
    {
      "page_no": 4,
      "bbox": [
        53.63100051879883,
        221.85829162597656,
        295.72802734375,
        315.5813293457031
      ],
      "text": "Although fine-grained batching reduces the waste of com-\nputing and enables requests to be batched in a more flexible\nway, the number of requests that can be batched together is\nstill constrained by GPU memory capacity, particularly the\nspace allocated to store the KV cache. In other words, the\nserving system’s throughput is memory-bound. Overcom-\ning this memory-bound requires addressing the following\nchallenges in the memory management:"
    },
    {
      "page_no": 4,
      "bbox": [
        53.63100051879883,
        321.5843811035156,
        295.7325744628906,
        534.75927734375
      ],
      "text": "Large KV cache. The KV Cache size grows quickly with the\nnumber of requests. As an example, for the 13B parameter\nOPT model [62], the KV cache of a single token demands 800\nKB of space, calculated as 2 (key and value vectors) × 5120\n(hidden state size) × 40 (number of layers) × 2 (bytes per\nFP16). Since OPT can generate sequences up to 2048 tokens,\nthe memory required to store the KV cache of one request\ncan be as much as 1.6 GB. Concurrent GPUs have memory\ncapacities in the tens of GBs. Even if all available memory\nwas allocated to KV cache, only a few tens of requests could\nbe accommodated. Moreover, inefficient memory manage-\nment can further decrease the batch size, as shown in Fig. 2.\nAdditionally, given the current trends, the GPU’s computa-\ntion speed grows faster than the memory capacity [17]. For\nexample, from NVIDIA A100 to H100, The FLOPS increases\nby more than 2x, but the GPU memory stays at 80GB max-\nimum. Therefore, we believe the memory will become an\nincreasingly significant bottleneck."
    },
    {
      "page_no": 4,
      "bbox": [
        53.750999450683594,
        540.7623291015625,
        295.7301330566406,
        718.0970458984375
      ],
      "text": "Complex decoding algorithms. LLM services offer a range\nof decoding algorithms for users to select from, each with\nvarying implications for memory management complexity.\nFor example, when users request multiple random samples\nfrom a single input prompt, a typical use case in program\nsuggestion [18], the KV cache of the prompt part, which\naccounts for 12% of the total KV cache memory in our ex-\nperiment (§6.3), can be shared to minimize memory usage.\nOn the other hand, the KV cache during the autoregressive\ngeneration phase should remain unshared due to the dif-\nferent sample results and their dependence on context and\nposition. The extent of KV cache sharing depends on the\nspecific decoding algorithm employed. In more sophisticated\nalgorithms like beam search [49], different request beams\ncan share larger portions (up to 55% memory saving, see"
    },
    {
      "page_no": 4,
      "bbox": [
        317.9549865722656,
        197.10269165039062,
        558.00439453125,
        219.08731079101562
      ],
      "text": "§6.3) of their KV cache, and the sharing pattern evolves as\nthe decoding process advances."
    },
    {
      "page_no": 4,
      "bbox": [
        317.9549865722656,
        224.9894256591797,
        559.099853515625,
        342.62432861328125
      ],
      "text": "Scheduling for unknown input & output lengths. The\nrequests to an LLM service exhibit variability in their input\nand output lengths. This requires the memory management\nsystem to accommodate a wide range of prompt lengths. In\naddition, as the output length of a request grows at decoding,\nthe memory required for its KV cache also expands and may\nexhaust available memory for incoming requests or ongoing\ngeneration for existing prompts. The system needs to make\nscheduling decisions, such as deleting or swapping out the\nKV cache of some requests from GPU memory."
    },
    {
      "page_no": 4,
      "bbox": [
        317.9549865722656,
        363.99072265625,
        530.7960815429688,
        373.95330810546875
      ],
      "text": "3.1\nMemory Management in Existing Systems"
    },
    {
      "page_no": 4,
      "bbox": [
        317.656005859375,
        385.2749938964844,
        559.686767578125,
        718.072265625
      ],
      "text": "Since most operators in current deep learning frameworks\n[33, 39] require tensors to be stored in contiguous memory,\nprevious LLM serving systems [31, 60] also store the KV\ncache of one request as a contiguous tensor across the differ-\nent positions. Due to the unpredictable output lengths from\nthe LLM, they statically allocate a chunk of memory for a\nrequest based on the request’s maximum possible sequence\nlength, irrespective of the actual input or eventual output\nlength of the request.\nFig. 3 illustrates two requests: request A with 2048 max-\nimum possible sequence length and request B with a max-\nimum of 512. The chunk pre-allocation scheme in existing\nsystems has three primary sources of memory wastes: re-\nserved slots for future tokens, internal fragmentation due to\nover-provisioning for potential maximum sequence lengths,\nand external fragmentation from the memory allocator like\nthe buddy allocator. The external fragmentation will never\nbe used for generated tokens, which is known before serving\na request. Internal fragmentation also remains unused, but\nthis is only realized after a request has finished sampling.\nThey are both pure memory waste. Although the reserved\nmemory is eventually used, reserving this space for the en-\ntire request’s duration, especially when the reserved space\nis large, occupies the space that could otherwise be used to\nprocess other requests. We visualize the average percentage\nof memory wastes in our experiments in Fig. 2, revealing\nthat the actual effective memory in previous systems can be\nas low as 20.4%."
    },
    {
      "page_no": 4,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "4"
    },
    {
      "page_no": 5,
      "bbox": [
        82.01260375976562,
        115.16928100585938,
        134.03182983398438,
        121.83122253417969
      ],
      "text": "KV Cache Manager"
    },
    {
      "page_no": 5,
      "bbox": [
        94.59800720214844,
        84.90074920654297,
        121.44261169433594,
        91.56269073486328
      ],
      "text": "Scheduler"
    },
    {
      "page_no": 5,
      "bbox": [
        71.23512268066406,
        167.05528259277344,
        101.7059326171875,
        173.7172393798828
      ],
      "text": "CPU Block"
    },
    {
      "page_no": 5,
      "bbox": [
        74.04817199707031,
        174.08444213867188,
        97.23675537109375,
        180.74639892578125
      ],
      "text": "Allocator"
    },
    {
      "page_no": 5,
      "bbox": [
        115.82322692871094,
        167.05528259277344,
        146.62205505371094,
        173.7172393798828
      ],
      "text": "GPU Block"
    },
    {
      "page_no": 5,
      "bbox": [
        118.80217742919922,
        174.08444213867188,
        141.99075317382812,
        180.74639892578125
      ],
      "text": "Allocator"
    },
    {
      "page_no": 5,
      "bbox": [
        93.7503433227539,
        145.76565551757812,
        121.29444885253906,
        151.47589111328125
      ],
      "text": "Block tables"
    },
    {
      "page_no": 5,
      "bbox": [
        184.27267456054688,
        76.33024597167969,
        208.34396362304688,
        82.9921875
      ],
      "text": "Worker 0"
    },
    {
      "page_no": 5,
      "bbox": [
        194.0719451904297,
        87.82160949707031,
        246.2626495361328,
        99.60249328613281
      ],
      "text": "Model\nShard 0\nCache\nEngine"
    },
    {
      "page_no": 5,
      "bbox": [
        184.27267456054688,
        111.00468444824219,
        208.34396362304688,
        117.6666259765625
      ],
      "text": "Worker 1"
    },
    {
      "page_no": 5,
      "bbox": [
        194.0719451904297,
        122.49606323242188,
        246.2626495361328,
        134.27694702148438
      ],
      "text": "Model\nShard 1\nCache\nEngine"
    },
    {
      "page_no": 5,
      "bbox": [
        184.27267456054688,
        158.06288146972656,
        217.94024658203125,
        164.72483825683594
      ],
      "text": "Worker N - 1"
    },
    {
      "page_no": 5,
      "bbox": [
        194.0719451904297,
        169.55429077148438,
        250.3706512451172,
        181.3351593017578
      ],
      "text": "Model\nShard N - 1\nCache\nEngine"
    },
    {
      "page_no": 5,
      "bbox": [
        225.2929229736328,
        138.4986572265625,
        235.5171661376953,
        149.91912841796875
      ],
      "text": "…"
    },
    {
      "page_no": 5,
      "bbox": [
        105.13600158691406,
        194.84471130371094,
        242.90911865234375,
        204.85733032226562
      ],
      "text": "Figure 4. vLLM system overview."
    },
    {
      "page_no": 5,
      "bbox": [
        54.0,
        215.31373596191406,
        295.7243957519531,
        297.00732421875
      ],
      "text": "Although compaction [54] has been proposed as a poten-\ntial solution to fragmentation, performing compaction in a\nperformance-sensitive LLM serving system is impractical\ndue to the massive KV cache. Even with compaction, the\npre-allocated chunk space for each request prevents memory\nsharing specific to decoding algorithms in existing memory\nmanagement systems."
    },
    {
      "page_no": 5,
      "bbox": [
        54.0,
        303.8085632324219,
        108.523681640625,
        314.7176513671875
      ],
      "text": "4\nMethod"
    },
    {
      "page_no": 5,
      "bbox": [
        53.52199935913086,
        320.8293151855469,
        295.7301025390625,
        534.1043090820312
      ],
      "text": "In this work, we develop a new attention algorithm, Page-\ndAttention, and build an LLM serving engine, vLLM, to tackle\nthe challenges outlined in §3. The architecture of vLLM is\nshown in Fig. 4. vLLM adopts a centralized scheduler to\ncoordinate the execution of distributed GPU workers. The\nKV cache manager effectively manages the KV cache in a\npaged fashion, enabled by PagedAttention. Specifically, the\nKV cache manager manages the physical KV cache memory\non the GPU workers through the instructions sent by the\ncentralized scheduler.\nNext, We describe the PagedAttention algorithm in §4.1.\nWith that, we show the design of the KV cache manager in\n§4.2 and how it facilitates PagedAttention in §4.3, respec-\ntively. Then, we show how this design facilitates effective\nmemory management for various decoding methods (§4.4)\nand handles the variable length input and output sequences\n(§4.5). Finally, we show how the system design of vLLM\nworks in a distributed setting (§4.6)."
    },
    {
      "page_no": 5,
      "bbox": [
        54.0,
        540.6246948242188,
        147.42926025390625,
        550.5872802734375
      ],
      "text": "4.1\nPagedAttention"
    },
    {
      "page_no": 5,
      "bbox": [
        53.70100021362305,
        557.0733642578125,
        295.7308044433594,
        650.6478881835938
      ],
      "text": "To address the memory challenges in §3, we introduce Page-\ndAttention, an attention algorithm inspired by the classic idea\nof paging [25] in operating systems. Unlike the traditional\nattention algorithms, PagedAttention allows storing continu-\nous keys and values in non-contiguous memory space. Specif-\nically, PagedAttention partitions the KV cache of each se-\nquence into KV blocks. Each block contains the key and value\nvectors for a fixed number of tokens,1 which we denote as KV"
    },
    {
      "page_no": 5,
      "bbox": [
        53.858001708984375,
        658.2440795898438,
        294.0478820800781,
        717.5752563476562
      ],
      "text": "1In Transformer, each token has a set of key and value vectors across layers\nand attention heads within a layer. All the key and value vectors can be\nmanaged together within a single KV block, or the key and value vectors at\ndifferent heads and layers can each have a separate block and be managed\nin separate block tables. The two designs have no performance difference\nand we choose the second one for easy implementation."
    },
    {
      "page_no": 5,
      "bbox": [
        342.2115783691406,
        114.64505767822266,
        378.9369201660156,
        127.91868591308594
      ],
      "text": "forth\nQuery \nvector"
    },
    {
      "page_no": 5,
      "bbox": [
        445.406494140625,
        87.5395278930664,
        526.856201171875,
        93.02444458007812
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 5,
      "bbox": [
        443.08319091796875,
        112.58771514892578,
        478.96356201171875,
        118.0726318359375
      ],
      "text": "brought\nforth"
    },
    {
      "page_no": 5,
      "bbox": [
        446.3619689941406,
        150.16000366210938,
        525.91015625,
        155.64491271972656
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 5,
      "bbox": [
        457.2187805175781,
        73.61127471923828,
        513.5501098632812,
        80.01034545898438
      ],
      "text": "Key and value vectors"
    },
    {
      "page_no": 5,
      "bbox": [
        421.55181884765625,
        87.54435729980469,
        437.6432189941406,
        93.0292739868164
      ],
      "text": "Block 1"
    },
    {
      "page_no": 5,
      "bbox": [
        421.55181884765625,
        112.30902099609375,
        437.6432189941406,
        117.79393768310547
      ],
      "text": "Block 2"
    },
    {
      "page_no": 5,
      "bbox": [
        421.55181884765625,
        150.16160583496094,
        437.6432189941406,
        155.64651489257812
      ],
      "text": "Block 0"
    },
    {
      "page_no": 5,
      "bbox": [
        317.5870056152344,
        169.47579956054688,
        559.096435546875,
        203.47329711914062
      ],
      "text": "Figure 5. Illustration of the PagedAttention algorithm,\nwhere the attention key and values vectors are stored as\nnon-contiguous blocks in the memory."
    },
    {
      "page_no": 5,
      "bbox": [
        317.5870056152344,
        211.94802856445312,
        559.685546875,
        260.0173034667969
      ],
      "text": "block size (𝐵). Denote the key block 𝐾𝑗= (𝑘(𝑗−1)𝐵+1, . . . ,𝑘𝑗𝐵)\nand value block 𝑉𝑗= (𝑣(𝑗−1)𝐵+1, . . . , 𝑣𝑗𝐵). The attention com-\nputation in Eq. 4 can be transformed into the following block-\nwise computation:"
    },
    {
      "page_no": 5,
      "bbox": [
        344.3380126953125,
        260.70025634765625,
        437.03668212890625,
        287.10528564453125
      ],
      "text": "𝐴𝑖𝑗=\nexp(𝑞⊤\n𝑖𝐾𝑗/\n√"
    },
    {
      "page_no": 5,
      "bbox": [
        370.0329895019531,
        267.7179870605469,
        453.19769287109375,
        299.55126953125
      ],
      "text": "𝑑)\nÍ⌈𝑖/𝐵⌉\n𝑡=1\nexp(𝑞⊤\n𝑖𝐾𝑡1/\n√"
    },
    {
      "page_no": 5,
      "bbox": [
        452.70001220703125,
        275.3440246582031,
        485.64886474609375,
        296.306884765625
      ],
      "text": "𝑑)\n, 𝑜𝑖="
    },
    {
      "page_no": 5,
      "bbox": [
        488.8529968261719,
        265.23968505859375,
        505.5691833496094,
        283.9953918457031
      ],
      "text": "⌈𝑖/𝐵⌉\n∑︁"
    },
    {
      "page_no": 5,
      "bbox": [
        492.25299072265625,
        274.961181640625,
        558.5972900390625,
        298.0902404785156
      ],
      "text": "𝑗=1\n𝑉𝑗𝐴⊤\n𝑖𝑗,\n(4)"
    },
    {
      "page_no": 5,
      "bbox": [
        317.47698974609375,
        302.3390197753906,
        559.6787719726562,
        493.8703308105469
      ],
      "text": "where 𝐴𝑖𝑗= (𝑎𝑖,(𝑗−1)𝐵+1, . . . ,𝑎𝑖,𝑗𝐵) is the row vector of atten-\ntion score on 𝑗-th KV block.\nDuring the attention computation, the PagedAttention\nkernel identifies and fetches different KV blocks separately.\nWe show an example of PagedAttention in Fig. 5: The key\nand value vectors are spread across three blocks, and the\nthree blocks are not contiguous on the physical memory. At\neach time, the kernel multiplies the query vector 𝑞𝑖of the\nquery token (“forth”) and the key vectors 𝐾𝑗in a block (e.g.,\nkey vectors of “Four score and seven” for block 0) to compute\nthe attention score𝐴𝑖𝑗, and later multiplies𝐴𝑖𝑗with the value\nvectors 𝑉𝑗in a block to derive the final attention output 𝑜𝑖.\nIn summary, the PagedAttention algorithm allows the\nKV blocks to be stored in non-contiguous physical memory,\nwhich enables more flexible paged memory management in\nvLLM."
    },
    {
      "page_no": 5,
      "bbox": [
        317.9549865722656,
        500.4327392578125,
        427.274658203125,
        510.39532470703125
      ],
      "text": "4.2\nKV Cache Manager"
    },
    {
      "page_no": 5,
      "bbox": [
        317.656005859375,
        516.8716430664062,
        559.68798828125,
        718.1159057617188
      ],
      "text": "The key idea behind vLLM’s memory manager is analogous\nto the virtual memory [25] in operating systems. OS parti-\ntions memory into fixed-sized pages and maps user programs’\nlogical pages to physical pages. Contiguous logical pages can\ncorrespond to non-contiguous physical memory pages, al-\nlowing user programs to access memory as though it were\ncontiguous. Moreover, physical memory space needs not to\nbe fully reserved in advance, enabling the OS to dynamically\nallocate physical pages as needed. vLLM uses the ideas be-\nhind virtual memory to manage the KV cache in an LLM\nservice. Enabled by PagedAttention, we organize the KV\ncache as fixed-size KV blocks, like pages in virtual memory.\nA request’s KV cache is represented as a series of logical\nKV blocks, filled from left to right as new tokens and their KV\ncache are generated. The last KV block’s unfilled positions\nare reserved for future generations. On GPU workers, a block\nengine allocates a contiguous chunk of GPU DRAM and"
    },
    {
      "page_no": 5,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "5"
    },
    {
      "page_no": 6,
      "bbox": [
        69.7740249633789,
        91.21781158447266,
        83.26123809814453,
        95.26325225830078
      ],
      "text": "Request"
    },
    {
      "page_no": 6,
      "bbox": [
        75.30875396728516,
        95.56385040283203,
        77.72442626953125,
        99.60929107666016
      ],
      "text": "A"
    },
    {
      "page_no": 6,
      "bbox": [
        76.73300170898438,
        121.16375732421875,
        139.3426513671875,
        126.0182876586914
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 6,
      "bbox": [
        75.88734436035156,
        132.24844360351562,
        140.1799774169922,
        137.10296630859375
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 6,
      "bbox": [
        73.83103942871094,
        143.33311462402344,
        88.56846618652344,
        148.18763732910156
      ],
      "text": "brought"
    },
    {
      "page_no": 6,
      "bbox": [
        91.75205993652344,
        90.10819244384766,
        182.32919311523438,
        100.17797088623047
      ],
      "text": "Prompt: “Four score and seven years ago our”\nOutputs: “fathers” → “brought” → …"
    },
    {
      "page_no": 6,
      "bbox": [
        55.458892822265625,
        121.48458099365234,
        69.70086669921875,
        126.339111328125
      ],
      "text": "Block 0"
    },
    {
      "page_no": 6,
      "bbox": [
        55.458892822265625,
        132.3496856689453,
        69.70086669921875,
        137.20420837402344
      ],
      "text": "Block 1"
    },
    {
      "page_no": 6,
      "bbox": [
        55.458892822265625,
        143.21478271484375,
        69.70086669921875,
        148.06930541992188
      ],
      "text": "Block 2"
    },
    {
      "page_no": 6,
      "bbox": [
        55.458892822265625,
        154.0798797607422,
        69.70086669921875,
        158.9344024658203
      ],
      "text": "Block 3"
    },
    {
      "page_no": 6,
      "bbox": [
        225.96347045898438,
        99.578857421875,
        290.2539978027344,
        104.43338775634766
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 6,
      "bbox": [
        223.90716552734375,
        121.74822998046875,
        238.64459228515625,
        126.6027603149414
      ],
      "text": "brought"
    },
    {
      "page_no": 6,
      "bbox": [
        226.8091278076172,
        166.08692932128906,
        289.41668701171875,
        170.9414520263672
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 6,
      "bbox": [
        239.08900451660156,
        72.93663787841797,
        277.239013671875,
        77.79116821289062
      ],
      "text": "Physical KV blocks"
    },
    {
      "page_no": 6,
      "bbox": [
        241.99415588378906,
        78.15188598632812,
        274.3287048339844,
        83.00641632080078
      ],
      "text": "(on GPU DRAM)"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        88.00409698486328,
        220.35577392578125,
        92.85862731933594
      ],
      "text": "Block 0"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        99.08878326416016,
        220.35577392578125,
        103.94331359863281
      ],
      "text": "Block 1"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        110.6461410522461,
        220.35577392578125,
        115.50067138671875
      ],
      "text": "Block 2"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        121.48482513427734,
        220.35577392578125,
        126.33935546875
      ],
      "text": "Block 3"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        133.28817749023438,
        220.35577392578125,
        138.1427001953125
      ],
      "text": "Block 4"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        144.12692260742188,
        220.35577392578125,
        148.9814453125
      ],
      "text": "Block 5"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        154.96560668945312,
        220.35577392578125,
        159.82012939453125
      ],
      "text": "Block 6"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        165.80433654785156,
        220.35577392578125,
        170.6588592529297
      ],
      "text": "Block 7"
    },
    {
      "page_no": 6,
      "bbox": [
        206.11380004882812,
        177.60765075683594,
        220.35577392578125,
        182.46217346191406
      ],
      "text": "Block 8"
    },
    {
      "page_no": 6,
      "bbox": [
        89.36421203613281,
        111.1279525756836,
        125.09078979492188,
        115.98248291015625
      ],
      "text": "Logical KV blocks"
    },
    {
      "page_no": 6,
      "bbox": [
        151.044189453125,
        124.8775863647461,
        174.98724365234375,
        128.92303466796875
      ],
      "text": "Physical block"
    },
    {
      "page_no": 6,
      "bbox": [
        156.37562561035156,
        127.05060577392578,
        188.57742309570312,
        133.26907348632812
      ],
      "text": "number\n# filled"
    },
    {
      "page_no": 6,
      "bbox": [
        161.50643920898438,
        135.54200744628906,
        184.3573455810547,
        139.5874481201172
      ],
      "text": "7\n4"
    },
    {
      "page_no": 6,
      "bbox": [
        161.50643920898438,
        141.39373779296875,
        188.17645263671875,
        145.43917846679688
      ],
      "text": "1\n3 → 4"
    },
    {
      "page_no": 6,
      "bbox": [
        161.50643920898438,
        147.24549865722656,
        184.3573455810547,
        151.2909393310547
      ],
      "text": "3\n1"
    },
    {
      "page_no": 6,
      "bbox": [
        161.50643920898438,
        153.09725952148438,
        184.3573455810547,
        157.1427001953125
      ],
      "text": "–\n–"
    },
    {
      "page_no": 6,
      "bbox": [
        74.39061737060547,
        116.51351165771484,
        183.2547607421875,
        121.7753677368164
      ],
      "text": "Block Table\n1\n1\n1\n1"
    },
    {
      "page_no": 6,
      "bbox": [
        74.39061737060547,
        129.8086700439453,
        128.31483459472656,
        132.64047241210938
      ],
      "text": "1\n1\n1\n2"
    },
    {
      "page_no": 6,
      "bbox": [
        74.39061737060547,
        140.91519165039062,
        75.80018615722656,
        143.7469940185547
      ],
      "text": "3"
    },
    {
      "page_no": 6,
      "bbox": [
        158.896728515625,
        135.3486328125,
        160.30628967285156,
        138.18043518066406
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        158.896728515625,
        141.26406860351562,
        160.30628967285156,
        144.0958709716797
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        180.02328491210938,
        135.3486328125,
        181.43284606933594,
        138.18043518066406
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        176.03945922851562,
        141.26406860351562,
        190.60784912109375,
        144.21658325195312
      ],
      "text": "1\n2"
    },
    {
      "page_no": 6,
      "bbox": [
        144.16845703125,
        145.73081970214844,
        181.43284606933594,
        149.89059448242188
      ],
      "text": "3\n3\n3"
    },
    {
      "page_no": 6,
      "bbox": [
        144.40992736816406,
        136.91802978515625,
        145.81948852539062,
        139.7498321533203
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        145.25497436523438,
        128.2259521484375,
        146.66453552246094,
        131.05775451660156
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        196.20758056640625,
        149.92904663085938,
        197.6171417236328,
        152.76084899902344
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        196.82070922851562,
        122.99374389648438,
        198.2302703857422,
        125.82555389404297
      ],
      "text": "1"
    },
    {
      "page_no": 6,
      "bbox": [
        198.35354614257812,
        133.26710510253906,
        199.7631072998047,
        136.09890747070312
      ],
      "text": "3"
    },
    {
      "page_no": 6,
      "bbox": [
        224.0688934326172,
        97.27047729492188,
        277.99310302734375,
        100.10228729248047
      ],
      "text": "1\n1\n1\n2"
    },
    {
      "page_no": 6,
      "bbox": [
        224.0688934326172,
        164.152099609375,
        277.99310302734375,
        166.98390197753906
      ],
      "text": "1\n1\n1\n1"
    },
    {
      "page_no": 6,
      "bbox": [
        224.0688934326172,
        119.3619384765625,
        225.47845458984375,
        122.1937484741211
      ],
      "text": "3"
    },
    {
      "page_no": 6,
      "bbox": [
        87.9000015258789,
        196.08567810058594,
        260.1436462402344,
        206.09829711914062
      ],
      "text": "Figure 6. Block table translation in vLLM."
    },
    {
      "page_no": 6,
      "bbox": [
        54.0,
        219.2564239501953,
        294.30810546875,
        336.8523254394531
      ],
      "text": "divides it into physical KV blocks (this is also done on CPU\nRAM for swapping; see §4.5). The KV block manager also\nmaintains block tables—the mapping between logical and\nphysical KV blocks of each request. Each block table entry\nrecords the corresponding physical blocks of a logical block\nand the number of filled positions. Separating logical and\nphysical KV blocks allows vLLM to dynamically grow the\nKV cache memory without reserving it for all positions in\nadvance, which eliminates most memory waste in existing\nsystems, as in Fig. 2."
    },
    {
      "page_no": 6,
      "bbox": [
        54.0,
        344.6147155761719,
        263.04522705078125,
        354.5773010253906
      ],
      "text": "4.3\nDecoding with PagedAttention and vLLM"
    },
    {
      "page_no": 6,
      "bbox": [
        53.63100051879883,
        361.3352966308594,
        295.7301940917969,
        718.0970458984375
      ],
      "text": "Next, we walk through an example, as in Fig. 6, to demon-\nstrate how vLLM executes PagedAttention and manages the\nmemory during the decoding process of a single input se-\nquence: 1○As in OS’s virtual memory, vLLM does not require\nreserving the memory for the maximum possible generated\nsequence length initially. Instead, it reserves only the nec-\nessary KV blocks to accommodate the KV cache generated\nduring prompt computation. In this case, The prompt has 7\ntokens, so vLLM maps the first 2 logical KV blocks (0 and\n1) to 2 physical KV blocks (7 and 1, respectively). In the\nprefill step, vLLM generates the KV cache of the prompts\nand the first output token with a conventional self-attention\nalgorithm (e.g., [13]). vLLM then stores the KV cache of the\nfirst 4 tokens in logical block 0 and the following 3 tokens\nin logical block 1. The remaining slot is reserved for the\nsubsequent autoregressive generation phase. 2○In the first\nautoregressive decoding step, vLLM generates the new token\nwith the PagedAttention algorithm on physical blocks 7 and\n1. Since one slot remains available in the last logical block,\nthe newly generated KV cache is stored there, and the block\ntable’s #filled record is updated. 3○At the second decoding\nstep, as the last logical block is full, vLLM stores the newly\ngenerated KV cache in a new logical block; vLLM allocates a\nnew physical block (physical block 3) for it and stores this\nmapping in the block table.\nGlobally, for each decoding iteration, vLLM first selects\na set of candidate sequences for batching (more in §4.5),\nand allocates the physical blocks for the newly required\nlogical blocks. Then, vLLM concatenates all the input tokens\nof the current iteration (i.e., all tokens for prompt phase"
    },
    {
      "page_no": 6,
      "bbox": [
        337.4524841308594,
        111.30530548095703,
        391.7970886230469,
        115.51898193359375
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 6,
      "bbox": [
        336.7184753417969,
        120.92670440673828,
        392.52386474609375,
        125.140380859375
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 6,
      "bbox": [
        334.9336242675781,
        130.548095703125,
        347.7255554199219,
        134.76177978515625
      ],
      "text": "brought"
    },
    {
      "page_no": 6,
      "bbox": [
        318.9867858886719,
        111.58378601074219,
        331.34869384765625,
        115.7974624633789
      ],
      "text": "Block 0"
    },
    {
      "page_no": 6,
      "bbox": [
        318.9867858886719,
        121.01458740234375,
        331.34869384765625,
        125.22826385498047
      ],
      "text": "Block 1"
    },
    {
      "page_no": 6,
      "bbox": [
        318.9867858886719,
        130.4453887939453,
        331.34869384765625,
        134.65907287597656
      ],
      "text": "Block 2"
    },
    {
      "page_no": 6,
      "bbox": [
        318.9867858886719,
        139.8761749267578,
        331.34869384765625,
        144.08985900878906
      ],
      "text": "Block 3"
    },
    {
      "page_no": 6,
      "bbox": [
        418.4412536621094,
        92.56983184814453,
        474.2447204589844,
        96.78350830078125
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 6,
      "bbox": [
        421.48046875,
        102.19123077392578,
        442.6998291015625,
        106.4049072265625
      ],
      "text": "of\ntimes"
    },
    {
      "page_no": 6,
      "bbox": [
        416.6564025878906,
        111.81262969970703,
        429.4483337402344,
        116.02630615234375
      ],
      "text": "brought"
    },
    {
      "page_no": 6,
      "bbox": [
        422.00543212890625,
        131.05540466308594,
        472.05108642578125,
        135.2690887451172
      ],
      "text": "It\nwas\nthe\nbest"
    },
    {
      "page_no": 6,
      "bbox": [
        419.1752624511719,
        150.2981719970703,
        473.5179443359375,
        154.51185607910156
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 6,
      "bbox": [
        429.8340148925781,
        73.21697998046875,
        462.9478454589844,
        77.43065643310547
      ],
      "text": "Physical KV blocks"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        82.52305603027344,
        413.5737609863281,
        86.73673248291016
      ],
      "text": "Block 0"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        92.14445495605469,
        413.5737609863281,
        96.3581314086914
      ],
      "text": "Block 1"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        102.17611694335938,
        413.5737609863281,
        106.3897933959961
      ],
      "text": "Block 2"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        111.58401489257812,
        413.5737609863281,
        115.79769134521484
      ],
      "text": "Block 3"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        121.82919311523438,
        413.5737609863281,
        126.0428695678711
      ],
      "text": "Block 4"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        131.2371063232422,
        413.5737609863281,
        135.45079040527344
      ],
      "text": "Block 5"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        140.64498901367188,
        413.5737609863281,
        144.85867309570312
      ],
      "text": "Block 6"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        150.05288696289062,
        413.5737609863281,
        154.26657104492188
      ],
      "text": "Block 7"
    },
    {
      "page_no": 6,
      "bbox": [
        401.21185302734375,
        160.2980499267578,
        413.5737609863281,
        164.51173400878906
      ],
      "text": "Block 8"
    },
    {
      "page_no": 6,
      "bbox": [
        348.416259765625,
        102.59434509277344,
        379.42657470703125,
        106.80802154541016
      ],
      "text": "Logical KV blocks"
    },
    {
      "page_no": 6,
      "bbox": [
        502.4924011230469,
        111.30530548095703,
        552.5399780273438,
        115.51898193359375
      ],
      "text": "It\nwas\nthe\nbest"
    },
    {
      "page_no": 6,
      "bbox": [
        501.9674377441406,
        120.92670440673828,
        523.1874389648438,
        125.140380859375
      ],
      "text": "of\ntimes"
    },
    {
      "page_no": 6,
      "bbox": [
        481.196533203125,
        111.58378601074219,
        493.5584411621094,
        115.7974624633789
      ],
      "text": "Block 0"
    },
    {
      "page_no": 6,
      "bbox": [
        481.196533203125,
        121.01458740234375,
        493.5584411621094,
        125.22826385498047
      ],
      "text": "Block 1"
    },
    {
      "page_no": 6,
      "bbox": [
        481.196533203125,
        130.4453887939453,
        493.5584411621094,
        134.65907287597656
      ],
      "text": "Block 2"
    },
    {
      "page_no": 6,
      "bbox": [
        510.6260070800781,
        102.59434509277344,
        541.6363525390625,
        106.80802154541016
      ],
      "text": "Logical KV blocks"
    },
    {
      "page_no": 6,
      "bbox": [
        358.0770568847656,
        85.84471893310547,
        369.7838439941406,
        89.35611724853516
      ],
      "text": "Request"
    },
    {
      "page_no": 6,
      "bbox": [
        362.88116455078125,
        89.61703491210938,
        364.9779357910156,
        93.12843322753906
      ],
      "text": "A"
    },
    {
      "page_no": 6,
      "bbox": [
        520.2868041992188,
        85.84471893310547,
        531.9935302734375,
        89.35611724853516
      ],
      "text": "Request"
    },
    {
      "page_no": 6,
      "bbox": [
        525.0908813476562,
        89.61703491210938,
        527.1876831054688,
        93.12843322753906
      ],
      "text": "B"
    },
    {
      "page_no": 6,
      "bbox": [
        317.9549865722656,
        178.16529846191406,
        557.9951171875,
        200.11032104492188
      ],
      "text": "Figure 7. Storing the KV cache of two requests at the same\ntime in vLLM."
    },
    {
      "page_no": 6,
      "bbox": [
        317.5870056152344,
        215.90988159179688,
        559.6868896484375,
        548.5863037109375
      ],
      "text": "requests and the latest tokens for generation phase requests)\nas one sequence and feeds it into the LLM. During LLM’s\ncomputation, vLLM uses the PagedAttention kernel to access\nthe previous KV cache stored in the form of logical KV blocks\nand saves the newly generated KV cache into the physical\nKV blocks. Storing multiple tokens within a KV block (block\nsize > 1) enables the PagedAttention kernel to process the\nKV cache across more positions in parallel, thus increasing\nthe hardware utilization and reducing latency. However, a\nlarger block size also increases memory fragmentation. We\nstudy the effect of block size in §7.2.\nAgain, vLLM dynamically assigns new physical blocks to\nlogical blocks as more tokens and their KV cache are gener-\nated. As all the blocks are filled from left to right and a new\nphysical block is only allocated when all previous blocks\nare full, vLLM limits all the memory wastes for a request\nwithin one block, so it can effectively utilize all the memory,\nas shown in Fig. 2. This allows more requests to fit into mem-\nory for batching—hence improving the throughput. Once a\nrequest finishes its generation, its KV blocks can be freed to\nstore the KV cache of other requests. In Fig. 7, we show an\nexample of vLLM managing the memory for two sequences.\nThe logical blocks of the two sequences are mapped to differ-\nent physical blocks within the space reserved by the block\nengine in GPU workers. The neighboring logical blocks of\nboth sequences do not need to be contiguous in physical GPU\nmemory and the space of physical blocks can be effectively\nutilized by both sequences."
    },
    {
      "page_no": 6,
      "bbox": [
        317.9549865722656,
        555.9547119140625,
        524.4398193359375,
        565.9172973632812
      ],
      "text": "4.4\nApplication to Other Decoding Scenarios"
    },
    {
      "page_no": 6,
      "bbox": [
        317.9549865722656,
        572.6326293945312,
        559.685791015625,
        666.2662963867188
      ],
      "text": "§4.3 shows how PagedAttention and vLLM handle basic de-\ncoding algorithms, such as greedy decoding and sampling,\nthat take one user prompt as input and generate a single out-\nput sequence. In many successful LLM applications [18, 34],\nan LLM service must offer more complex decoding scenarios\nthat exhibit complex accessing patterns and more opportuni-\nties for memory sharing. We show the general applicability\nof vLLM on them in this section."
    },
    {
      "page_no": 6,
      "bbox": [
        317.9549865722656,
        672.2437133789062,
        559.6849975585938,
        718.0473022460938
      ],
      "text": "Parallel sampling. In LLM-based program assistants [6, 18],\nan LLM generates multiple sampled outputs for a single in-\nput prompt; users can choose a favorite output from various\ncandidates. So far we have implicitly assumed that a request"
    },
    {
      "page_no": 6,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "6"
    },
    {
      "page_no": 7,
      "bbox": [
        95.03150177001953,
        88.27252960205078,
        105.64991760253906,
        91.7723159790039
      ],
      "text": "Sample"
    },
    {
      "page_no": 7,
      "bbox": [
        98.4257583618164,
        92.0323715209961,
        102.25452423095703,
        95.53215789794922
      ],
      "text": "A1"
    },
    {
      "page_no": 7,
      "bbox": [
        73.833740234375,
        111.00541687011719,
        127.99852752685547,
        115.20516204833984
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 7,
      "bbox": [
        73.1021499633789,
        120.59498596191406,
        128.72291564941406,
        124.79473114013672
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 7,
      "bbox": [
        55.42911911010742,
        111.28297424316406,
        67.75011444091797,
        115.48271942138672
      ],
      "text": "Block 0"
    },
    {
      "page_no": 7,
      "bbox": [
        55.42911911010742,
        120.68258666992188,
        67.75011444091797,
        124.88233184814453
      ],
      "text": "Block 1"
    },
    {
      "page_no": 7,
      "bbox": [
        154.55455017089844,
        92.33193969726562,
        211.22019958496094,
        96.53168487548828
      ],
      "text": "years\nago\nour\nmothers"
    },
    {
      "page_no": 7,
      "bbox": [
        154.55455017089844,
        111.51106262207031,
        210.1734161376953,
        115.71080780029297
      ],
      "text": "years\nago\nour\nfathers"
    },
    {
      "page_no": 7,
      "bbox": [
        155.2861328125,
        149.8693084716797,
        209.44903564453125,
        154.0690460205078
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 7,
      "bbox": [
        166.5384521484375,
        73.04310607910156,
        198.27902221679688,
        77.24285125732422
      ],
      "text": "Physical KV blocks"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        82.31838989257812,
        149.70318603515625,
        86.51813507080078
      ],
      "text": "Block 0"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        91.90797424316406,
        149.70318603515625,
        96.10771942138672
      ],
      "text": "Block 1"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        101.90644836425781,
        149.70318603515625,
        106.10619354248047
      ],
      "text": "Block 2"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        111.283203125,
        149.70318603515625,
        115.48294830322266
      ],
      "text": "Block 3"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        121.49449157714844,
        149.70318603515625,
        125.6942367553711
      ],
      "text": "Block 4"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        130.8712921142578,
        149.70318603515625,
        135.07102966308594
      ],
      "text": "Block 5"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        140.248046875,
        149.70318603515625,
        144.44778442382812
      ],
      "text": "Block 6"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        149.6248321533203,
        149.70318603515625,
        153.82456970214844
      ],
      "text": "Block 7"
    },
    {
      "page_no": 7,
      "bbox": [
        137.38218688964844,
        159.83609008789062,
        149.70318603515625,
        164.03582763671875
      ],
      "text": "Block 8"
    },
    {
      "page_no": 7,
      "bbox": [
        85.384521484375,
        102.32327270507812,
        115.04215240478516,
        106.52301788330078
      ],
      "text": "Logical KV blocks"
    },
    {
      "page_no": 7,
      "bbox": [
        235.50686645507812,
        111.00541687011719,
        289.6716613769531,
        115.20516204833984
      ],
      "text": "Four\nscore\nand\nseven"
    },
    {
      "page_no": 7,
      "bbox": [
        234.7752685546875,
        120.59498596191406,
        291.44281005859375,
        124.79473114013672
      ],
      "text": "years\nago\nour\nmothers"
    },
    {
      "page_no": 7,
      "bbox": [
        217.10223388671875,
        111.28297424316406,
        229.42323303222656,
        115.48271942138672
      ],
      "text": "Block 0"
    },
    {
      "page_no": 7,
      "bbox": [
        217.10223388671875,
        120.68258666992188,
        229.42323303222656,
        124.88233184814453
      ],
      "text": "Block 1"
    },
    {
      "page_no": 7,
      "bbox": [
        247.05763244628906,
        102.32327270507812,
        276.7152404785156,
        106.52301788330078
      ],
      "text": "Logical KV blocks"
    },
    {
      "page_no": 7,
      "bbox": [
        256.704345703125,
        88.27252960205078,
        267.32275390625,
        91.7723159790039
      ],
      "text": "Sample"
    },
    {
      "page_no": 7,
      "bbox": [
        260.0986022949219,
        92.0323715209961,
        263.9273681640625,
        95.53215789794922
      ],
      "text": "A2"
    },
    {
      "page_no": 7,
      "bbox": [
        151.54254150390625,
        101.5953369140625,
        176.7936248779297,
        105.79508209228516
      ],
      "text": "Copy-on-write"
    },
    {
      "page_no": 7,
      "bbox": [
        210.50537109375,
        85.48008728027344,
        235.20437622070312,
        88.97987365722656
      ],
      "text": "Ref count: 2 → 1"
    },
    {
      "page_no": 7,
      "bbox": [
        98.95899963378906,
        177.93772888183594,
        249.085693359375,
        187.95034790039062
      ],
      "text": "Figure 8. Parallel sampling example."
    },
    {
      "page_no": 7,
      "bbox": [
        53.63100051879883,
        201.99551391601562,
        295.7328796386719,
        654.3300170898438
      ],
      "text": "generates a single sequence. In the remainder of this paper,\nwe assume the more general case in which a request gener-\nates multiple sequences. In parallel sampling, one request\nincludes multiple samples sharing the same input prompt,\nallowing the KV cache of the prompt to be shared as well. Via\nits PagedAttention and paged memory management, vLLM\ncan realize this sharing easily and save memory.\nFig. 8 shows an example of parallel decoding for two out-\nputs. Since both outputs share the same prompt, we only\nreserve space for one copy of the prompt’s state at the prompt\nphase; the logical blocks for the prompts of both sequences\nare mapped to the same physical blocks: the logical block 0\nand 1 of both sequences are mapped to physical blocks 7 and\n1, respectively. Since a single physical block can be mapped\nto multiple logical blocks, we introduce a reference count for\neach physical block. In this case, the reference counts for\nphysical blocks 7 and 1 are both 2. At the generation phase,\nthe two outputs sample different output tokens and need\nseparate storage for KV cache. vLLM implements a copy-on-\nwrite mechanism at the block granularity for the physical\nblocks that need modification by multiple sequences, similar\nto the copy-on-write technique in OS virtual memory (e.g.,\nwhen forking a process). Specifically, in Fig. 8, when sample\nA1 needs to write to its last logical block (logical block 1),\nvLLM recognizes that the reference count of the correspond-\ning physical block (physical block 1) is greater than 1; it\nallocates a new physical block (physical block 3), instructs\nthe block engine to copy the information from physical block\n1, and decreases the reference count to 1. Next, when sample\nA2 writes to physical block 1, the reference count is already\nreduced to 1; thus A2 directly writes its newly generated KV\ncache to physical block 1.\nIn summary, vLLM enables the sharing of most of the\nspace used to store the prompts’ KV cache across multiple\noutput samples, with the exception of the final logical block,\nwhich is managed by a copy-on-write mechanism. By sharing\nphysical blocks across multiple samples, memory usage can\nbe greatly reduced, especially for long input prompts."
    },
    {
      "page_no": 7,
      "bbox": [
        54.0,
        660.163818359375,
        295.7326965332031,
        718.0921020507812
      ],
      "text": "Beam search. In LLM tasks like machine translation [59],\nthe users expect the top-𝑘most appropriate translations out-\nput by the LLM. Beam search [49] is widely used to decode\nthe most probable output sequence from an LLM, as it miti-\ngates the computational complexity of fully traversing the"
    },
    {
      "page_no": 7,
      "bbox": [
        521.8687744140625,
        99.9951171875,
        540.0652465820312,
        105.2978744506836
      ],
      "text": "Block 10"
    },
    {
      "page_no": 7,
      "bbox": [
        522.052734375,
        117.203369140625,
        539.89794921875,
        122.5061264038086
      ],
      "text": "Block 11"
    },
    {
      "page_no": 7,
      "bbox": [
        418.5142517089844,
        99.9951171875,
        499.17132568359375,
        105.2978744506836
      ],
      "text": "Block 1\nBlock 3\nBlock 6"
    },
    {
      "page_no": 7,
      "bbox": [
        483.6143798828125,
        117.203369140625,
        499.17132568359375,
        122.5061264038086
      ],
      "text": "Block 7"
    },
    {
      "page_no": 7,
      "bbox": [
        483.6139221191406,
        82.78683471679688,
        499.1708679199219,
        88.08959197998047
      ],
      "text": "Block 5"
    },
    {
      "page_no": 7,
      "bbox": [
        383.6862487792969,
        99.9951171875,
        399.2431945800781,
        105.2978744506836
      ],
      "text": "Block 0"
    },
    {
      "page_no": 7,
      "bbox": [
        418.5142517089844,
        135.6000213623047,
        499.17132568359375,
        140.9027862548828
      ],
      "text": "Block 2\nBlock 4\nBlock 8"
    },
    {
      "page_no": 7,
      "bbox": [
        523.189697265625,
        82.78683471679688,
        538.7467041015625,
        88.08959197998047
      ],
      "text": "Block 9"
    },
    {
      "page_no": 7,
      "bbox": [
        521.8687744140625,
        135.6000213623047,
        540.0652465820312,
        140.9027862548828
      ],
      "text": "Block 12"
    },
    {
      "page_no": 7,
      "bbox": [
        330.6973876953125,
        82.52401733398438,
        368.9417724609375,
        87.82677459716797
      ],
      "text": "Beam candidate 0"
    },
    {
      "page_no": 7,
      "bbox": [
        330.6973876953125,
        99.73228454589844,
        368.9417724609375,
        105.03504180908203
      ],
      "text": "Beam candidate 1"
    },
    {
      "page_no": 7,
      "bbox": [
        330.59613037109375,
        117.53472900390625,
        368.84051513671875,
        122.83748626708984
      ],
      "text": "Beam candidate 2"
    },
    {
      "page_no": 7,
      "bbox": [
        330.59613037109375,
        135.33717346191406,
        368.84051513671875,
        140.6399383544922
      ],
      "text": "Beam candidate 3"
    },
    {
      "page_no": 7,
      "bbox": [
        372.343994140625,
        154.80870056152344,
        503.611572265625,
        164.82131958007812
      ],
      "text": "Figure 9. Beam search example."
    },
    {
      "page_no": 7,
      "bbox": [
        317.5870056152344,
        178.0222930908203,
        559.6884155273438,
        654.311279296875
      ],
      "text": "sample space. The algorithm relies on the beam width pa-\nrameter 𝑘, which determines the number of top candidates\nretained at every step. During decoding, beam search ex-\npands each candidate sequence in the beam by considering\nall possible tokens, computes their respective probabilities us-\ning the LLM, and retains the top-𝑘most probable sequences\nout of 𝑘· |𝑉| candidates, where |𝑉| is the vocabulary size.\nUnlike parallel decoding, beam search facilities sharing\nnot only the initial prompt blocks but also other blocks across\ndifferent candidates, and the sharing patterns dynamically\nchange as the decoding process advances, similar to the pro-\ncess tree in the OS created by compound forks. Fig. 9 shows\nhow vLLM manages the KV blocks for a beam search ex-\nample with 𝑘= 4. Prior to the iteration illustrated as the\ndotted line, each candidate sequence has used 4 full logi-\ncal blocks. All beam candidates share the first block 0 (i.e.,\nprompt). Candidate 3 digresses from others from the second\nblock. Candidates 0-2 share the first 3 blocks and diverge at\nthe fourth block. At subsequent iterations, the top-4 prob-\nable candidates all originate from candidates 1 and 2. As\nthe original candidates 0 and 3 are no longer among the\ntop candidates, their logical blocks are freed, and the refer-\nence counts of corresponding physical blocks are reduced.\nvLLM frees all physical blocks whose reference counts reach\n0 (blocks 2, 4, 5, 8). Then, vLLM allocates new physical blocks\n(blocks 9-12) to store the new KV cache from the new can-\ndidates. Now, all candidates share blocks 0, 1, 3; candidates\n0 and 1 share block 6, and candidates 2 and 3 further share\nblock 7.\nPrevious LLM serving systems require frequent memory\ncopies of the KV cache across the beam candidates. For exam-\nple, in the case shown in Fig. 9, after the dotted line, candidate\n3 would need to copy a large portion of candidate 2’s KV\ncache to continue generation. This frequent memory copy\noverhead is significantly reduced by vLLM’s physical block\nsharing. In vLLM, most blocks of different beam candidates\ncan be shared. The copy-on-write mechanism is applied only\nwhen the newly generated tokens are within an old shared\nblock, as in parallel decoding. This involves only copying\none block of data."
    },
    {
      "page_no": 7,
      "bbox": [
        317.9549865722656,
        660.2236328125,
        558.599853515625,
        718.0473022460938
      ],
      "text": "Shared prefix. Commonly, the LLM user provides a (long)\ndescription of the task including instructions and example\ninputs and outputs, also known as system prompt [36]. The\ndescription is concatenated with the actual task input to form\nthe prompt of the request. The LLM generates outputs based"
    },
    {
      "page_no": 7,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "7"
    },
    {
      "page_no": 8,
      "bbox": [
        101.89309692382812,
        89.31636047363281,
        177.77130126953125,
        111.66620635986328
      ],
      "text": "Translate English to French:\n“sea otter” => “loutre de mer”\n“peppermint” => “menthe poivrée”\n“plush girafe” => “girafe en peluche”"
    },
    {
      "page_no": 8,
      "bbox": [
        101.89309692382812,
        116.14403533935547,
        127.3689193725586,
        121.47895812988281
      ],
      "text": "“cheese” =>"
    },
    {
      "page_no": 8,
      "bbox": [
        101.89309692382812,
        140.2469024658203,
        122.58802032470703,
        145.5818328857422
      ],
      "text": "“fromage”"
    },
    {
      "page_no": 8,
      "bbox": [
        198.31570434570312,
        89.31636047363281,
        274.19390869140625,
        111.66620635986328
      ],
      "text": "Translate English to French:\n“sea otter” => “loutre de mer”\n“peppermint” => “menthe poivrée”\n“plush girafe” => “girafe en peluche”"
    },
    {
      "page_no": 8,
      "bbox": [
        198.31570434570312,
        116.14403533935547,
        228.83645629882812,
        121.47895812988281
      ],
      "text": "“I love you” =>"
    },
    {
      "page_no": 8,
      "bbox": [
        198.31570434570312,
        140.2469024658203,
        220.60812377929688,
        145.5818328857422
      ],
      "text": "“Je t’amie”"
    },
    {
      "page_no": 8,
      "bbox": [
        66.66645812988281,
        98.9602279663086,
        95.05571746826172,
        104.29515075683594
      ],
      "text": "Shared prefix"
    },
    {
      "page_no": 8,
      "bbox": [
        73.56944274902344,
        115.87976837158203,
        95.06675720214844,
        121.21469116210938
      ],
      "text": "Task input"
    },
    {
      "page_no": 8,
      "bbox": [
        70.6473388671875,
        139.98272705078125,
        95.06285858154297,
        145.31765747070312
      ],
      "text": "Task output"
    },
    {
      "page_no": 8,
      "bbox": [
        127.76966857910156,
        72.87662506103516,
        153.51773071289062,
        78.2115478515625
      ],
      "text": "Sequence A"
    },
    {
      "page_no": 8,
      "bbox": [
        132.95274353027344,
        78.60796356201172,
        148.34140014648438,
        83.94288635253906
      ],
      "text": "Prompt"
    },
    {
      "page_no": 8,
      "bbox": [
        224.06053161621094,
        72.87662506103516,
        250.07127380371094,
        78.2115478515625
      ],
      "text": "Sequence B"
    },
    {
      "page_no": 8,
      "bbox": [
        229.3753662109375,
        78.60796356201172,
        244.76402282714844,
        83.94288635253906
      ],
      "text": "Prompt"
    },
    {
      "page_no": 8,
      "bbox": [
        127.76966857910156,
        125.60255432128906,
        153.51773071289062,
        130.93748474121094
      ],
      "text": "Sequence A"
    },
    {
      "page_no": 8,
      "bbox": [
        128.7013397216797,
        131.3339080810547,
        152.5867156982422,
        136.66883850097656
      ],
      "text": "LLM output"
    },
    {
      "page_no": 8,
      "bbox": [
        224.06053161621094,
        125.60255432128906,
        250.07127380371094,
        130.93748474121094
      ],
      "text": "Sequence B"
    },
    {
      "page_no": 8,
      "bbox": [
        225.12396240234375,
        131.3339080810547,
        249.00933837890625,
        136.66883850097656
      ],
      "text": "LLM output"
    },
    {
      "page_no": 8,
      "bbox": [
        53.70100021362305,
        157.88165283203125,
        295.57464599609375,
        179.81533813476562
      ],
      "text": "Figure 10. Shared prompt example for machine translation.\nThe examples are adopted from [5]."
    },
    {
      "page_no": 8,
      "bbox": [
        54.0,
        191.74652099609375,
        295.7283020019531,
        357.06231689453125
      ],
      "text": "on the full prompt. Fig. 10 shows an example. Moreover, the\nshared prefix can be further tuned, via prompt engineering,\nto improve the accuracy of the downstream tasks [26, 27].\nFor this type of application, many user prompts share a\nprefix, thus the LLM service provider can store the KV cache\nof the prefix in advance to reduce the redundant computa-\ntion spent on the prefix. In vLLM, this can be conveniently\nachieved by reserving a set of physical blocks for a set of\npredefined shared prefixes by the LLM service provider, as\nhow OS handles shared library across processes. A user in-\nput prompt with the shared prefix can simply map its logi-\ncal blocks to the cached physical blocks (with the last block\nmarked copy-on-write). The prompt phase computation only\nneeds to execute on the user’s task input."
    },
    {
      "page_no": 8,
      "bbox": [
        53.63100051879883,
        362.9158020019531,
        295.7333068847656,
        528.4202880859375
      ],
      "text": "Mixed decoding methods. The decoding methods dis-\ncussed earlier exhibit diverse memory sharing and access-\ning patterns. Nonetheless, vLLM facilitates the simultane-\nous processing of requests with different decoding prefer-\nences, which existing systems cannot efficiently do. This is\nbecause vLLM conceals the complex memory sharing be-\ntween different sequences via a common mapping layer that\ntranslates logical blocks to physical blocks. The LLM and\nits execution kernel only see a list of physical block IDs\nfor each sequence and do not need to handle sharing pat-\nterns across sequences. Compared to existing systems, this\napproach broadens the batching opportunities for requests\nwith different sampling requirements, ultimately increasing\nthe system’s overall throughput."
    },
    {
      "page_no": 8,
      "bbox": [
        54.0,
        535.9686889648438,
        201.69552612304688,
        545.9312744140625
      ],
      "text": "4.5\nScheduling and Preemption"
    },
    {
      "page_no": 8,
      "bbox": [
        53.52199935913086,
        552.6173095703125,
        295.7308044433594,
        718.059814453125
      ],
      "text": "When the request traffic surpasses the system’s capacity,\nvLLM must prioritize a subset of requests. In vLLM, we adopt\nthe first-come-first-serve (FCFS) scheduling policy for all\nrequests, ensuring fairness and preventing starvation. When\nvLLM needs to preempt requests, it ensures that the earliest\narrived requests are served first and the latest requests are\npreempted first.\nLLM services face a unique challenge: the input prompts\nfor an LLM can vary significantly in length, and the resulting\noutput lengths are not known a priori, contingent on both\nthe input prompt and the model. As the number of requests\nand their outputs grow, vLLM can run out of the GPU’s phys-\nical blocks to store the newly generated KV cache. There\nare two classic questions that vLLM needs to answer in this"
    },
    {
      "page_no": 8,
      "bbox": [
        317.9549865722656,
        74.56088256835938,
        559.6851806640625,
        239.86532592773438
      ],
      "text": "context: (1) Which blocks should it evict? (2) How to recover\nevicted blocks if needed again? Typically, eviction policies\nuse heuristics to predict which block will be accessed fur-\nthest in the future and evict that block. Since in our case we\nknow that all blocks of a sequence are accessed together, we\nimplement an all-or-nothing eviction policy, i.e., either evict\nall or none of the blocks of a sequence. Furthermore, multi-\nple sequences within one request (e.g., beam candidates in\none beam search request) are gang-scheduled as a sequence\ngroup. The sequences within one sequence group are always\npreempted or rescheduled together due to potential memory\nsharing across those sequences. To answer the second ques-\ntion of how to recover an evicted block, we consider two\ntechniques:"
    },
    {
      "page_no": 8,
      "bbox": [
        317.9549865722656,
        245.8683624267578,
        559.5332641601562,
        447.08209228515625
      ],
      "text": "Swapping. This is the classic technique used by most virtual\nmemory implementations which copy the evicted pages to a\nswap space on the disk. In our case, we copy evicted blocks to\nthe CPU memory. As shown in Fig. 4, besides the GPU block\nallocator, vLLM includes a CPU block allocator to manage\nthe physical blocks swapped to CPU RAM. When vLLM\nexhausts free physical blocks for new tokens, it selects a set\nof sequences to evict and transfer their KV cache to the CPU.\nOnce it preempts a sequence and evicts its blocks, vLLM\nstops accepting new requests until all preempted sequences\nare completed. Once a request completes, its blocks are freed\nfrom memory, and the blocks of a preempted sequence are\nbrought back in to continue the processing of that sequence.\nNote that with this design, the number of blocks swapped to\nthe CPU RAM never exceeds the number of total physical\nblocks in the GPU RAM, so the swap space on the CPU RAM\nis bounded by the GPU memory allocated for the KV cache."
    },
    {
      "page_no": 8,
      "bbox": [
        317.9549865722656,
        453.0685729980469,
        558.364013671875,
        582.5802612304688
      ],
      "text": "Recomputation. In this case, we simply recompute the KV\ncache when the preempted sequences are rescheduled. Note\nthat recomputation latency can be significantly lower than\nthe original latency, as the tokens generated at decoding\ncan be concatenated with the original user prompt as a new\nprompt—their KV cache at all positions can be generated in\none prompt phase iteration.\nThe performances of swapping and recomputation depend\non the bandwidth between CPU RAM and GPU memory and\nthe computation power of the GPU. We examine the speeds\nof swapping and recomputation in §7.3."
    },
    {
      "page_no": 8,
      "bbox": [
        317.9549865722656,
        594.3406982421875,
        439.847412109375,
        604.3032836914062
      ],
      "text": "4.6\nDistributed Execution"
    },
    {
      "page_no": 8,
      "bbox": [
        317.9549865722656,
        612.5428466796875,
        558.6019897460938,
        718.0473022460938
      ],
      "text": "Many LLMs have parameter sizes exceeding the capacity of a\nsingle GPU [5, 9]. Therefore, it is necessary to partition them\nacross distributed GPUs and execute them in a model parallel\nfashion [28, 63]. This calls for a memory manager capable of\nhandling distributed memory. vLLM is effective in distributed\nsettings by supporting the widely used Megatron-LM style\ntensor model parallelism strategy on Transformers [47]. This\nstrategy adheres to an SPMD (Single Program Multiple Data)\nexecution schedule, wherein the linear layers are partitioned"
    },
    {
      "page_no": 8,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "8"
    },
    {
      "page_no": 9,
      "bbox": [
        77.29000091552734,
        72.84172058105469,
        270.4251403808594,
        82.85433197021484
      ],
      "text": "Table 1. Model sizes and server configurations."
    },
    {
      "page_no": 9,
      "bbox": [
        77.12089538574219,
        89.98133850097656,
        254.41860961914062,
        98.09161376953125
      ],
      "text": "Model size\n13B\n66B\n175B"
    },
    {
      "page_no": 9,
      "bbox": [
        77.12089538574219,
        103.80068969726562,
        268.6835632324219,
        132.18182373046875
      ],
      "text": "GPUs\nA100\n4×A100\n8×A100-80GB\nTotal GPU memory\n40 GB\n160 GB\n640 GB\nParameter size\n26 GB\n132 GB\n346 GB"
    },
    {
      "page_no": 9,
      "bbox": [
        77.12089538574219,
        138.4769287109375,
        257.3267822265625,
        156.4097900390625
      ],
      "text": "Memory for KV cache\n12 GB\n21 GB\n264 GB\nMax. # KV cache slots\n15.7K\n9.7K\n60.1K"
    },
    {
      "page_no": 9,
      "bbox": [
        53.63100051879883,
        172.3793487548828,
        295.7307434082031,
        564.9822998046875
      ],
      "text": "to perform block-wise matrix multiplication, and the the\nGPUs constantly synchronize intermediate results via an all-\nreduce operation. Specifically, the attention operator is split\non the attention head dimension, each SPMD process takes\ncare of a subset of attention heads in multi-head attention.\nWe observe that even with model parallel execution, each\nmodel shard still processes the same set of input tokens, thus\nrequiring the KV Cache for the same positions. Therefore,\nvLLM features a single KV cache manager within the cen-\ntralized scheduler, as in Fig. 4. Different GPU workers share\nthe manager, as well as the mapping from logical blocks to\nphysical blocks. This common mapping allows GPU workers\nto execute the model with the physical blocks provided by\nthe scheduler for each input request. Although each GPU\nworker has the same physical block IDs, a worker only stores\na portion of the KV cache for its corresponding attention\nheads.\nIn each step, the scheduler first prepares the message with\ninput token IDs for each request in the batch, as well as the\nblock table for each request. Next, the scheduler broadcasts\nthis control message to the GPU workers. Then, the GPU\nworkers start to execute the model with the input token IDs.\nIn the attention layers, the GPU workers read the KV cache\naccording to the block table in the control message. During\nexecution, the GPU workers synchronize the intermediate\nresults with the all-reduce communication primitive without\nthe coordination of the scheduler, as in [47]. In the end, the\nGPU workers send the sampled tokens of this iteration back\nto the scheduler. In summary, GPU workers do not need\nto synchronize on memory management as they only need\nto receive all the memory management information at the\nbeginning of each decoding iteration along with the step\ninputs."
    },
    {
      "page_no": 9,
      "bbox": [
        54.0,
        571.5425415039062,
        151.11279296875,
        582.45166015625
      ],
      "text": "5\nImplementation"
    },
    {
      "page_no": 9,
      "bbox": [
        53.750999450683594,
        588.505615234375,
        295.7308349609375,
        718.072265625
      ],
      "text": "vLLM is an end-to-end serving system with a FastAPI [15]\nfrontend and a GPU-based inference engine. The frontend\nextends the OpenAI API [34] interface, allowing users to\ncustomize sampling parameters for each request, such as\nthe maximum sequence length and the beam width 𝑘. The\nvLLM engine is written in 8.5K lines of Python and 2K lines of\nC++/CUDA code. We develop control-related components in-\ncluding the scheduler and the block manager in Python while\ndeveloping custom CUDA kernels for key operations such as\nPagedAttention. For the model executor, we implement pop-\nular LLMs such as GPT [5], OPT [62], and LLaMA [52] using"
    },
    {
      "page_no": 9,
      "bbox": [
        341.6006774902344,
        145.9881134033203,
        433.48931884765625,
        157.37530517578125
      ],
      "text": "0\n500\n1000\n1500\n2000\n# Tokens"
    },
    {
      "page_no": 9,
      "bbox": [
        329.10198974609375,
        141.4887237548828,
        335.7279968261719,
        146.3436279296875
      ],
      "text": "0.0"
    },
    {
      "page_no": 9,
      "bbox": [
        329.10198974609375,
        125.80716705322266,
        335.7279968261719,
        130.66207885742188
      ],
      "text": "0.5"
    },
    {
      "page_no": 9,
      "bbox": [
        329.10198974609375,
        110.12562561035156,
        335.7279968261719,
        114.98052978515625
      ],
      "text": "1.0"
    },
    {
      "page_no": 9,
      "bbox": [
        329.10198974609375,
        94.44407653808594,
        335.7279968261719,
        99.29898071289062
      ],
      "text": "1.5"
    },
    {
      "page_no": 9,
      "bbox": [
        329.10198974609375,
        78.76252746582031,
        335.7279968261719,
        83.617431640625
      ],
      "text": "2.0"
    },
    {
      "page_no": 9,
      "bbox": [
        321.74755859375,
        102.90853881835938,
        327.57342529296875,
        121.92143249511719
      ],
      "text": "Density"
    },
    {
      "page_no": 9,
      "bbox": [
        338.647705078125,
        75.93006134033203,
        350.00360107421875,
        80.78496551513672
      ],
      "text": "1e−2"
    },
    {
      "page_no": 9,
      "bbox": [
        367.88629150390625,
        84.70931243896484,
        425.7000732421875,
        97.88006591796875
      ],
      "text": "Input (mean: 161.31)\nOutput (mean: 337.99)"
    },
    {
      "page_no": 9,
      "bbox": [
        353.2239990234375,
        161.68736267089844,
        402.4308166503906,
        170.6987762451172
      ],
      "text": "(a) ShareGPT"
    },
    {
      "page_no": 9,
      "bbox": [
        456.61798095703125,
        145.9881134033203,
        553.4217529296875,
        157.37530517578125
      ],
      "text": "0\n500\n1000\n1500\n2000\n# Tokens"
    },
    {
      "page_no": 9,
      "bbox": [
        449.1091003417969,
        141.4887237548828,
        451.7594909667969,
        146.3436279296875
      ],
      "text": "0"
    },
    {
      "page_no": 9,
      "bbox": [
        449.1091003417969,
        125.80716705322266,
        451.7594909667969,
        130.66207885742188
      ],
      "text": "2"
    },
    {
      "page_no": 9,
      "bbox": [
        449.1091003417969,
        110.12562561035156,
        451.7594909667969,
        114.98052978515625
      ],
      "text": "4"
    },
    {
      "page_no": 9,
      "bbox": [
        449.1091003417969,
        94.44407653808594,
        451.7594909667969,
        99.29898071289062
      ],
      "text": "6"
    },
    {
      "page_no": 9,
      "bbox": [
        449.1091003417969,
        78.76252746582031,
        451.7594909667969,
        83.617431640625
      ],
      "text": "8"
    },
    {
      "page_no": 9,
      "bbox": [
        441.754638671875,
        102.90853881835938,
        447.5805358886719,
        121.92143249511719
      ],
      "text": "Density"
    },
    {
      "page_no": 9,
      "bbox": [
        454.6763610839844,
        75.93006134033203,
        466.0322265625,
        80.78496551513672
      ],
      "text": "1e−2"
    },
    {
      "page_no": 9,
      "bbox": [
        491.1207275390625,
        84.70931243896484,
        545.7540893554688,
        97.88006591796875
      ],
      "text": "Input (mean: 19.31)\nOutput (mean: 58.45)"
    },
    {
      "page_no": 9,
      "bbox": [
        478.77801513671875,
        161.68736267089844,
        516.9213256835938,
        170.6987762451172
      ],
      "text": "(b) Alpaca"
    },
    {
      "page_no": 9,
      "bbox": [
        317.9549865722656,
        177.281982421875,
        558.59521484375,
        199.31430053710938
      ],
      "text": "Figure 11. Input and output length distributions of the (a)\nShareGPT and (b) Alpaca datasets."
    },
    {
      "page_no": 9,
      "bbox": [
        317.9549865722656,
        212.34571838378906,
        559.0201416015625,
        234.26333618164062
      ],
      "text": "PyTorch [39] and Transformers [58]. We use NCCL [32] for\ntensor communication across the distributed GPU workers."
    },
    {
      "page_no": 9,
      "bbox": [
        317.9549865722656,
        241.19773864746094,
        458.5073547363281,
        251.16033935546875
      ],
      "text": "5.1\nKernel-level Optimization"
    },
    {
      "page_no": 9,
      "bbox": [
        317.6059875488281,
        257.64227294921875,
        559.6851196289062,
        494.82733154296875
      ],
      "text": "Since PagedAttention introduces memory access patterns\nthat are not efficiently supported by existing systems, we\ndevelop several GPU kernels for optimizing it. (1) Fused re-\nshape and block write. In every Transformer layer, the new\nKV cache are split into blocks, reshaped to a memory layout\noptimized for block read, then saved at positions specified\nby the block table. To minimize kernel launch overheads, we\nfuse them into a single kernel. (2) Fusing block read and atten-\ntion. We adapt the attention kernel in FasterTransformer [31]\nto read KV cache according to the block table and perform\nattention operations on the fly. To ensure coalesced memory\naccess, we assign a GPU warp to read each block. More-\nover, we add support for variable sequence lengths within a\nrequest batch. (3) Fused block copy. Block copy operations,\nissued by the copy-on-write mechanism, may operate on\ndiscontinuous blocks. This can lead to numerous invocations\nof small data movements if we use the cudaMemcpyAsync\nAPI. To mitigate the overhead, we implement a kernel that\nbatches the copy operations for different blocks into a single\nkernel launch."
    },
    {
      "page_no": 9,
      "bbox": [
        317.9549865722656,
        501.76171875,
        527.3788452148438,
        511.72430419921875
      ],
      "text": "5.2\nSupporting Various Decoding Algorithms"
    },
    {
      "page_no": 9,
      "bbox": [
        317.70599365234375,
        518.2871704101562,
        559.6876220703125,
        671.7042846679688
      ],
      "text": "vLLM implements various decoding algorithms using three\nkey methods: fork, append, and free. The fork method\ncreates a new sequence from an existing one. The append\nmethod appends a new token to the sequence. Finally, the\nfree method deletes the sequence. For instance, in paral-\nlel sampling, vLLM creates multiple output sequences from\nthe single input sequence using the fork method. It then\nadds new tokens to these sequences in every iteration with\nappend, and deletes sequences that meet a stopping condi-\ntion using free. The same strategy is also applied in beam\nsearch and prefix sharing by vLLM. We believe future decod-\ning algorithms can also be supported by combining these\nmethods."
    },
    {
      "page_no": 9,
      "bbox": [
        317.9549865722656,
        678.9205932617188,
        388.1441650390625,
        689.8297119140625
      ],
      "text": "6\nEvaluation"
    },
    {
      "page_no": 9,
      "bbox": [
        317.9549865722656,
        696.2062377929688,
        558.189208984375,
        718.072265625
      ],
      "text": "In this section, we evaluate the performance of vLLM under\na variety of workloads."
    },
    {
      "page_no": 9,
      "bbox": [
        304.3789978027344,
        722.3079223632812,
        307.621826171875,
        729.28173828125
      ],
      "text": "9"
    },
    {
      "page_no": 10,
      "bbox": [
        85.89214324951172,
        135.51597595214844,
        226.90086364746094,
        152.0716552734375
      ],
      "text": "0.0\n0.5\n1.0\n1.5\n2.0\nRequest rate (req/s)"
    },
    {
      "page_no": 10,
      "bbox": [
        107.06419372558594,
        159.48341369628906,
        211.6023712158203,
        167.52191162109375
      ],
      "text": "(a) OPT-13B, 1 GPU, ShareGPT"
    },
    {
      "page_no": 10,
      "bbox": [
        77.18448638916016,
        129.67613220214844,
        88.15548706054688,
        137.71463012695312
      ],
      "text": "0.0"
    },
    {
      "page_no": 10,
      "bbox": [
        77.18448638916016,
        110.54932403564453,
        88.15548706054688,
        118.58782958984375
      ],
      "text": "0.5"
    },
    {
      "page_no": 10,
      "bbox": [
        77.18448638916016,
        91.42252349853516,
        88.15548706054688,
        99.46102905273438
      ],
      "text": "1.0"
    },
    {
      "page_no": 10,
      "bbox": [
        248.95944213867188,
        135.51597595214844,
        383.4662780761719,
        152.0716552734375
      ],
      "text": "0.0\n0.2\n0.4\n0.6\n0.8\n1.0\nRequest rate (req/s)"
    },
    {
      "page_no": 10,
      "bbox": [
        268.2591552734375,
        159.48341369628906,
        376.5440368652344,
        167.52191162109375
      ],
      "text": "(b) OPT-66B, 4 GPUs, ShareGPT"
    },
    {
      "page_no": 10,
      "bbox": [
        240.25180053710938,
        129.67613220214844,
        251.22279357910156,
        137.71463012695312
      ],
      "text": "0.0"
    },
    {
      "page_no": 10,
      "bbox": [
        240.25180053710938,
        110.54932403564453,
        251.22279357910156,
        118.58782958984375
      ],
      "text": "0.5"
    },
    {
      "page_no": 10,
      "bbox": [
        240.25180053710938,
        91.42252349853516,
        251.22279357910156,
        99.46102905273438
      ],
      "text": "1.0"
    },
    {
      "page_no": 10,
      "bbox": [
        412.0267333984375,
        135.51597595214844,
        541.7822265625,
        152.0716552734375
      ],
      "text": "0.0\n0.5\n1.0\n1.5\n2.0\n2.5\nRequest rate (req/s)"
    },
    {
      "page_no": 10,
      "bbox": [
        429.4217529296875,
        159.48341369628906,
        541.5084838867188,
        167.52191162109375
      ],
      "text": "(c) OPT-175B, 8 GPUs, ShareGPT"
    },
    {
      "page_no": 10,
      "bbox": [
        403.319091796875,
        129.67613220214844,
        414.29010009765625,
        137.71463012695312
      ],
      "text": "0.0"
    },
    {
      "page_no": 10,
      "bbox": [
        403.319091796875,
        110.54932403564453,
        414.29010009765625,
        118.58782958984375
      ],
      "text": "0.5"
    },
    {
      "page_no": 10,
      "bbox": [
        403.319091796875,
        91.42252349853516,
        414.29010009765625,
        99.46102905273438
      ],
      "text": "1.0"
    },
    {
      "page_no": 10,
      "bbox": [
        57.420589447021484,
        80.74649810791016,
        65.45909118652344,
        147.43040466308594
      ],
      "text": "Normalized latency"
    },
    {
      "page_no": 10,
      "bbox": [
        65.14571380615234,
        101.47237396240234,
        73.18421936035156,
        147.43040466308594
      ],
      "text": "(s/token)"
    },
    {
      "page_no": 10,
      "bbox": [
        155.31979370117188,
        76.90276336669922,
        493.88153076171875,
        84.94126892089844
      ],
      "text": "FasterTransformer\nOrca (Max)\nOrca (Pow2)\nOrca (Oracle)\nvLLM"
    },
    {
      "page_no": 10,
      "bbox": [
        87.93801879882812,
        229.7159881591797,
        226.87884521484375,
        246.27166748046875
      ],
      "text": "0\n10\n20\n30\nRequest rate (req/s)"
    },
    {
      "page_no": 10,
      "bbox": [
        110.917724609375,
        253.68341064453125,
        205.2430419921875,
        261.7218933105469
      ],
      "text": "(d) OPT-13B, 1 GPU, Alpaca"
    },
    {
      "page_no": 10,
      "bbox": [
        75.93849182128906,
        223.8761444091797,
        86.90949249267578,
        231.91464233398438
      ],
      "text": "0.0"
    },
    {
      "page_no": 10,
      "bbox": [
        75.93849182128906,
        204.7493438720703,
        86.90949249267578,
        212.787841796875
      ],
      "text": "0.5"
    },
    {
      "page_no": 10,
      "bbox": [
        75.93849182128906,
        185.62254333496094,
        86.90949249267578,
        193.66104125976562
      ],
      "text": "1.0"
    },
    {
      "page_no": 10,
      "bbox": [
        251.0053253173828,
        229.7159881591797,
        387.6240234375,
        246.27166748046875
      ],
      "text": "0\n5\n10\n15\n20\nRequest rate (req/s)"
    },
    {
      "page_no": 10,
      "bbox": [
        272.2528381347656,
        253.68341064453125,
        370.0350646972656,
        261.7218933105469
      ],
      "text": "(e) OPT-66B, 4 GPUs, Alpaca"
    },
    {
      "page_no": 10,
      "bbox": [
        239.00579833984375,
        223.8761444091797,
        249.97679138183594,
        231.91464233398438
      ],
      "text": "0.0"
    },
    {
      "page_no": 10,
      "bbox": [
        239.00579833984375,
        204.7493438720703,
        249.97679138183594,
        212.787841796875
      ],
      "text": "0.5"
    },
    {
      "page_no": 10,
      "bbox": [
        239.00579833984375,
        185.62254333496094,
        249.97679138183594,
        193.66104125976562
      ],
      "text": "1.0"
    },
    {
      "page_no": 10,
      "bbox": [
        414.0726013183594,
        229.7159881591797,
        538.3068237304688,
        246.27166748046875
      ],
      "text": "0\n5\n10\n15\n20\nRequest rate (req/s)"
    },
    {
      "page_no": 10,
      "bbox": [
        434.0335693359375,
        253.68341064453125,
        534.3894653320312,
        261.7218933105469
      ],
      "text": "(f) OPT-175B, 8 GPUs, Alpaca"
    },
    {
      "page_no": 10,
      "bbox": [
        402.0730895996094,
        223.8761444091797,
        413.0440979003906,
        231.91464233398438
      ],
      "text": "0.0"
    },
    {
      "page_no": 10,
      "bbox": [
        402.0730895996094,
        204.7493438720703,
        413.0440979003906,
        212.787841796875
      ],
      "text": "0.5"
    },
    {
      "page_no": 10,
      "bbox": [
        402.0730895996094,
        185.62254333496094,
        413.0440979003906,
        193.66104125976562
      ],
      "text": "1.0"
    },
    {
      "page_no": 10,
      "bbox": [
        56.174591064453125,
        174.94651794433594,
        64.21308898925781,
        241.6304168701172
      ],
      "text": "Normalized latency"
    },
    {
      "page_no": 10,
      "bbox": [
        63.899715423583984,
        195.67239379882812,
        71.93821716308594,
        241.6304168701172
      ],
      "text": "(s/token)"
    },
    {
      "page_no": 10,
      "bbox": [
        114.91200256347656,
        269.66973876953125,
        497.08697509765625,
        279.6823425292969
      ],
      "text": "Figure 12. Single sequence generation with OPT models on the ShareGPT and Alpaca dataset"
    },
    {
      "page_no": 10,
      "bbox": [
        83.91729736328125,
        355.87353515625,
        97.59009552001953,
        366.8474426269531
      ],
      "text": "Orca\n(Max)"
    },
    {
      "page_no": 10,
      "bbox": [
        104.54092407226562,
        355.87353515625,
        120.93024444580078,
        366.8474426269531
      ],
      "text": "Orca\n(Pow2)"
    },
    {
      "page_no": 10,
      "bbox": [
        125.04891967773438,
        355.87353515625,
        144.41551208496094,
        366.8474426269531
      ],
      "text": "Orca\n(Oracle)"
    },
    {
      "page_no": 10,
      "bbox": [
        72.44063568115234,
        351.68475341796875,
        162.89112854003906,
        361.4665222167969
      ],
      "text": "vLLM\n0"
    },
    {
      "page_no": 10,
      "bbox": [
        72.44063568115234,
        342.7972717285156,
        74.9850845336914,
        347.45806884765625
      ],
      "text": "5"
    },
    {
      "page_no": 10,
      "bbox": [
        69.89643859863281,
        333.9097595214844,
        74.98533630371094,
        338.570556640625
      ],
      "text": "10"
    },
    {
      "page_no": 10,
      "bbox": [
        69.89643859863281,
        325.02227783203125,
        74.98533630371094,
        329.6830749511719
      ],
      "text": "15"
    },
    {
      "page_no": 10,
      "bbox": [
        69.89643859863281,
        316.134765625,
        74.98533630371094,
        320.7955627441406
      ],
      "text": "20"
    },
    {
      "page_no": 10,
      "bbox": [
        69.89643859863281,
        307.2472839355469,
        74.98533630371094,
        311.9080810546875
      ],
      "text": "25"
    },
    {
      "page_no": 10,
      "bbox": [
        69.89643859863281,
        298.3597717285156,
        74.98533630371094,
        303.02056884765625
      ],
      "text": "30"
    },
    {
      "page_no": 10,
      "bbox": [
        69.89643859863281,
        289.4722595214844,
        74.98533630371094,
        294.133056640625
      ],
      "text": "35"
    },
    {
      "page_no": 10,
      "bbox": [
        62.836002349853516,
        298.9674377441406,
        68.4289779663086,
        346.6022033691406
      ],
      "text": "# Batched requests"
    },
    {
      "page_no": 10,
      "bbox": [
        85.41131591796875,
        335.979736328125,
        96.09799194335938,
        341.5727233886719
      ],
      "text": "7.00"
    },
    {
      "page_no": 10,
      "bbox": [
        107.40080261230469,
        330.9909973144531,
        118.08747863769531,
        336.583984375
      ],
      "text": "9.81"
    },
    {
      "page_no": 10,
      "bbox": [
        127.86190795898438,
        324.2038879394531,
        141.60191345214844,
        329.796875
      ],
      "text": "13.62"
    },
    {
      "page_no": 10,
      "bbox": [
        149.85140991210938,
        294.3464050292969,
        163.59141540527344,
        299.93939208984375
      ],
      "text": "30.42"
    },
    {
      "page_no": 10,
      "bbox": [
        91.66899871826172,
        371.0843811035156,
        140.87677001953125,
        380.0957946777344
      ],
      "text": "(a) ShareGPT"
    },
    {
      "page_no": 10,
      "bbox": [
        201.30198669433594,
        355.87353515625,
        214.9747772216797,
        366.8474426269531
      ],
      "text": "Orca\n(Max)"
    },
    {
      "page_no": 10,
      "bbox": [
        221.32264709472656,
        355.87353515625,
        237.71197509765625,
        366.8474426269531
      ],
      "text": "Orca\n(Pow2)"
    },
    {
      "page_no": 10,
      "bbox": [
        241.22764587402344,
        355.87353515625,
        260.5942077636719,
        366.8474426269531
      ],
      "text": "Orca\n(Oracle)"
    },
    {
      "page_no": 10,
      "bbox": [
        190.1810760498047,
        351.68475341796875,
        278.4669189453125,
        361.4665222167969
      ],
      "text": "vLLM\n0"
    },
    {
      "page_no": 10,
      "bbox": [
        187.6368865966797,
        341.0519714355469,
        192.7257843017578,
        345.7127685546875
      ],
      "text": "25"
    },
    {
      "page_no": 10,
      "bbox": [
        187.6368865966797,
        330.4191589355469,
        192.7257843017578,
        335.0799560546875
      ],
      "text": "50"
    },
    {
      "page_no": 10,
      "bbox": [
        187.6368865966797,
        319.786376953125,
        192.7257843017578,
        324.4471740722656
      ],
      "text": "75"
    },
    {
      "page_no": 10,
      "bbox": [
        185.0926971435547,
        309.1535949707031,
        192.72604370117188,
        313.81439208984375
      ],
      "text": "100"
    },
    {
      "page_no": 10,
      "bbox": [
        185.0926971435547,
        298.5207824707031,
        192.72604370117188,
        303.18157958984375
      ],
      "text": "125"
    },
    {
      "page_no": 10,
      "bbox": [
        185.0926971435547,
        287.88800048828125,
        192.72604370117188,
        292.5487976074219
      ],
      "text": "150"
    },
    {
      "page_no": 10,
      "bbox": [
        178.03225708007812,
        298.1753234863281,
        183.62522888183594,
        345.81005859375
      ],
      "text": "# Batched requests"
    },
    {
      "page_no": 10,
      "bbox": [
        202.79600524902344,
        345.4450378417969,
        213.482666015625,
        351.03802490234375
      ],
      "text": "7.00"
    },
    {
      "page_no": 10,
      "bbox": [
        222.6541290283203,
        330.02972412109375,
        236.39413452148438,
        335.6227111816406
      ],
      "text": "43.24"
    },
    {
      "page_no": 10,
      "bbox": [
        244.0406494140625,
        317.4814758300781,
        257.7806701660156,
        323.074462890625
      ],
      "text": "72.75"
    },
    {
      "page_no": 10,
      "bbox": [
        263.8987731933594,
        292.0932312011719,
        280.692138671875,
        297.68621826171875
      ],
      "text": "132.44"
    },
    {
      "page_no": 10,
      "bbox": [
        212.4219970703125,
        371.0843811035156,
        250.5652313232422,
        380.0957946777344
      ],
      "text": "(b) Alpaca"
    },
    {
      "page_no": 10,
      "bbox": [
        54.0,
        385.99908447265625,
        295.7292785644531,
        419.89532470703125
      ],
      "text": "Figure 13. Average number of batched requests when serv-\ning OPT-13B for the ShareGPT (2 reqs/s) and Alpaca (30\nreqs/s) traces."
    },
    {
      "page_no": 10,
      "bbox": [
        54.0,
        428.542724609375,
        166.05931091308594,
        438.50531005859375
      ],
      "text": "6.1\nExperimental Setup"
    },
    {
      "page_no": 10,
      "bbox": [
        53.770999908447266,
        449.0646667480469,
        295.72821044921875,
        542.7293090820312
      ],
      "text": "Model and server configurations. We use OPT [62] mod-\nels with 13B, 66B, and 175B parameters and LLaMA [52] with\n13B parameters for our evaluation. 13B and 66B are popular\nsizes for LLMs as shown in an LLM leaderboard [38], while\n175B is the size of the famous GPT-3 [5] model. For all of\nour experiments, we use A2 instances with NVIDIA A100\nGPUs on Google Cloud Platform. The detailed model sizes\nand server configurations are shown in Table 1."
    },
    {
      "page_no": 10,
      "bbox": [
        53.492000579833984,
        548.7067260742188,
        300.5907287597656,
        690.17626953125
      ],
      "text": "Workloads. We synthesize workloads based on ShareGPT [51]\nand Alpaca [50] datasets, which contain input and output\ntexts of real LLM services. The ShareGPT dataset is a collec-\ntion of user-shared conversations with ChatGPT [35]. The\nAlpaca dataset is an instruction dataset generated by GPT-\n3.5 with self-instruct [57]. We tokenize the datasets and use\ntheir input and output lengths to synthesize client requests.\nAs shown in Fig. 11, the ShareGPT dataset has 8.4× longer\ninput prompts and 5.8× longer outputs on average than the\nAlpaca dataset, with higher variance. Since these datasets do\nnot include timestamps, we generate request arrival times\nusing Poisson distribution with different request rates."
    },
    {
      "page_no": 10,
      "bbox": [
        54.0,
        696.1536865234375,
        295.57830810546875,
        718.0759887695312
      ],
      "text": "Baseline 1: FasterTransformer. FasterTransformer [31] is\na distributed inference engine highly optimized for latency."
    },
    {
      "page_no": 10,
      "bbox": [
        317.6059875488281,
        288.19854736328125,
        559.6790771484375,
        381.8993225097656
      ],
      "text": "As FasterTransformer does not have its own scheduler, we\nimplement a custom scheduler with a dynamic batching\nmechanism similar to the existing serving systems such as\nTriton [30]. Specifically, we set a maximum batch size 𝐵as\nlarge as possible for each experiment, according to the GPU\nmemory capacity. The scheduler takes up to 𝐵number of\nearliest arrived requests and sends the batch to FasterTrans-\nformer for processing."
    },
    {
      "page_no": 10,
      "bbox": [
        317.9549865722656,
        387.876708984375,
        559.6815795898438,
        589.1222534179688
      ],
      "text": "Baseline 2: Orca. Orca [60] is a state-of-the-art LLM serving\nsystem optimized for throughput. Since Orca is not publicly\navailable for use, we implement our own version of Orca. We\nassume Orca uses the buddy allocation algorithm to deter-\nmine the memory address to store KV cache. We implement\nthree versions of Orca based on how much it over-reserves\nthe space for request outputs:\n• Orca (Oracle). We assume the system has the knowledge\nof the lengths of the outputs that will be actually generated\nfor the requests. This shows the upper-bound performance\nof Orca, which is infeasible to achieve in practice.\n• Orca (Pow2). We assume the system over-reserves the\nspace for outputs by at most 2×. For example, if the true\noutput length is 25, it reserves 32 positions for outputs.\n• Orca (Max). We assume the system always reserves the\nspace up to the maximum sequence length of the model,\ni.e., 2048 tokens."
    },
    {
      "page_no": 10,
      "bbox": [
        317.9549865722656,
        595.0798950195312,
        559.6852416992188,
        700.7033081054688
      ],
      "text": "Key metrics. We focus on serving throughput. Specifically,\nusing the workloads with different request rates, we mea-\nsure normalized latency of the systems, the mean of every\nrequest’s end-to-end latency divided by its output length,\nas in Orca [60]. A high-throughput serving system should\nretain low normalized latency against high request rates.\nFor most experiments, we evaluate the systems with 1-hour\ntraces. As an exception, we use 15-minute traces for the\nOPT-175B model due to the cost limit."
    },
    {
      "page_no": 10,
      "bbox": [
        302.7569885253906,
        722.3079223632812,
        309.2426452636719,
        729.28173828125
      ],
      "text": "10"
    },
    {
      "page_no": 11,
      "bbox": [
        89.18402099609375,
        135.51597595214844,
        198.7115478515625,
        152.0716552734375
      ],
      "text": "0\n5\n10\n15\nRequest rate (req/s)"
    },
    {
      "page_no": 11,
      "bbox": [
        89.02716064453125,
        159.48341369628906,
        229.6146697998047,
        167.52191162109375
      ],
      "text": "(a) parallel generation (parallel size = 2)"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18448638916016,
        129.67613220214844,
        88.15548706054688,
        137.71463012695312
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18448638916016,
        110.54932403564453,
        88.15548706054688,
        118.58782958984375
      ],
      "text": "0.5"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18448638916016,
        91.42252349853516,
        88.15548706054688,
        99.46102905273438
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        252.25131225585938,
        135.51597595214844,
        376.4855041503906,
        152.0716552734375
      ],
      "text": "0\n2\n4\n6\n8\n10\nRequest rate (req/s)"
    },
    {
      "page_no": 11,
      "bbox": [
        252.01898193359375,
        159.48341369628906,
        392.75830078125,
        167.52191162109375
      ],
      "text": "(b) parallel generation (parallel size = 4)"
    },
    {
      "page_no": 11,
      "bbox": [
        240.25180053710938,
        129.67613220214844,
        251.22279357910156,
        137.71463012695312
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        240.25180053710938,
        110.54932403564453,
        251.22279357910156,
        118.58782958984375
      ],
      "text": "0.5"
    },
    {
      "page_no": 11,
      "bbox": [
        240.25180053710938,
        91.42252349853516,
        251.22279357910156,
        99.46102905273438
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        415.318603515625,
        135.51597595214844,
        525.5949096679688,
        152.0716552734375
      ],
      "text": "0\n2\n4\n6\nRequest rate (req/s)"
    },
    {
      "page_no": 11,
      "bbox": [
        415.37738037109375,
        159.48341369628906,
        555.5301513671875,
        167.52191162109375
      ],
      "text": "(c) parallel generation (parallel size = 6)"
    },
    {
      "page_no": 11,
      "bbox": [
        403.319091796875,
        129.67613220214844,
        414.29010009765625,
        137.71463012695312
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        403.319091796875,
        110.54932403564453,
        414.29010009765625,
        118.58782958984375
      ],
      "text": "0.5"
    },
    {
      "page_no": 11,
      "bbox": [
        403.319091796875,
        91.42252349853516,
        414.29010009765625,
        99.46102905273438
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        57.420589447021484,
        80.74649810791016,
        65.45909118652344,
        147.43040466308594
      ],
      "text": "Normalized latency"
    },
    {
      "page_no": 11,
      "bbox": [
        65.14571380615234,
        101.47237396240234,
        73.18421936035156,
        147.43040466308594
      ],
      "text": "(s/token)"
    },
    {
      "page_no": 11,
      "bbox": [
        203.04840087890625,
        76.90276336669922,
        446.1529235839844,
        84.94126892089844
      ],
      "text": "Orca (Max)\nOrca (Pow2)\nOrca (Oracle)\nvLLM"
    },
    {
      "page_no": 11,
      "bbox": [
        89.18402099609375,
        229.7159881591797,
        204.76724243164062,
        246.27166748046875
      ],
      "text": "0\n5\n10\n15\nRequest rate (req/s)"
    },
    {
      "page_no": 11,
      "bbox": [
        99.54966735839844,
        253.68341064453125,
        219.12754821777344,
        261.7218933105469
      ],
      "text": "(d) beam search (beam width = 2)"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18448638916016,
        223.8761444091797,
        88.15548706054688,
        231.91464233398438
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18448638916016,
        204.7493438720703,
        88.15548706054688,
        212.787841796875
      ],
      "text": "0.5"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18448638916016,
        185.62254333496094,
        88.15548706054688,
        193.66104125976562
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        252.25131225585938,
        229.7159881591797,
        388.8700256347656,
        246.27166748046875
      ],
      "text": "0\n2\n4\n6\n8\n10\nRequest rate (req/s)"
    },
    {
      "page_no": 11,
      "bbox": [
        262.681640625,
        253.68341064453125,
        382.12152099609375,
        261.7218933105469
      ],
      "text": "(e) beam search (beam width = 4)"
    },
    {
      "page_no": 11,
      "bbox": [
        240.25180053710938,
        223.8761444091797,
        251.22279357910156,
        231.91464233398438
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        240.25180053710938,
        204.7493438720703,
        251.22279357910156,
        212.787841796875
      ],
      "text": "0.5"
    },
    {
      "page_no": 11,
      "bbox": [
        240.25180053710938,
        185.62254333496094,
        251.22279357910156,
        193.66104125976562
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        415.318603515625,
        229.7159881591797,
        525.5949096679688,
        246.27166748046875
      ],
      "text": "0\n2\n4\n6\nRequest rate (req/s)"
    },
    {
      "page_no": 11,
      "bbox": [
        426.6581726074219,
        253.68341064453125,
        544.2833251953125,
        261.7218933105469
      ],
      "text": "(f) beam search (beam width = 6)"
    },
    {
      "page_no": 11,
      "bbox": [
        403.319091796875,
        223.8761444091797,
        414.29010009765625,
        231.91464233398438
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        403.319091796875,
        204.7493438720703,
        414.29010009765625,
        212.787841796875
      ],
      "text": "0.5"
    },
    {
      "page_no": 11,
      "bbox": [
        403.319091796875,
        185.62254333496094,
        414.29010009765625,
        193.66104125976562
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        57.420589447021484,
        174.94651794433594,
        65.45909118652344,
        241.6304168701172
      ],
      "text": "Normalized latency"
    },
    {
      "page_no": 11,
      "bbox": [
        65.14571380615234,
        195.67239379882812,
        73.18421936035156,
        241.6304168701172
      ],
      "text": "(s/token)"
    },
    {
      "page_no": 11,
      "bbox": [
        132.93899536132812,
        277.63970947265625,
        479.06036376953125,
        287.6523132324219
      ],
      "text": "Figure 14. Parallel generation and beam search with OPT-13B on the Alpaca dataset."
    },
    {
      "page_no": 11,
      "bbox": [
        54.0,
        301.1517028808594,
        145.3271484375,
        311.1142883300781
      ],
      "text": "6.2\nBasic Sampling"
    },
    {
      "page_no": 11,
      "bbox": [
        53.52199935913086,
        325.5325012207031,
        295.7308044433594,
        718.072265625
      ],
      "text": "We evaluate the performance of vLLM with basic sampling\n(one sample per request) on three models and two datasets.\nThe first row of Fig. 12 shows the results on the ShareGPT\ndataset. The curves illustrate that as the request rate in-\ncreases, the latency initially increases at a gradual pace but\nthen suddenly explodes. This can be attributed to the fact\nthat when the request rate surpasses the capacity of the serv-\ning system, the queue length continues to grow infinitely\nand so does the latency of the requests.\nOn the ShareGPT dataset, vLLM can sustain 1.7×–2.7×\nhigher request rates compared to Orca (Oracle) and 2.7×–8×\ncompared to Orca (Max), while maintaining similar laten-\ncies. This is because vLLM’s PagedAttention can efficiently\nmanage the memory usage and thus enable batching more\nrequests than Orca. For example, as shown in Fig. 13a, for\nOPT-13B vLLM processes 2.2× more requests at the same\ntime than Orca (Oracle) and 4.3× more requests than Orca\n(Max). Compared to FasterTransformer, vLLM can sustain up\nto 22× higher request rates, as FasterTransformer does not\nutilize a fine-grained scheduling mechanism and inefficiently\nmanages the memory like Orca (Max).\nThe second row of Fig. 12 and Fig. 13b shows the results\non the Alpaca dataset, which follows a similar trend to the\nShareGPT dataset. One exception is Fig. 12 (f), where vLLM’s\nadvantage over Orca (Oracle) and Orca (Pow2) is less pro-\nnounced. This is because the model and server configuration\nfor OPT-175B (Table 1) allows for large GPU memory space\navailable to store KV cache, while the Alpaca dataset has\nshort sequences. In this setup, Orca (Oracle) and Orca (Pow2)\ncan also batch a large number of requests despite the inef-\nficiencies in their memory management. As a result, the\nperformance of the systems becomes compute-bound rather\nthan memory-bound."
    },
    {
      "page_no": 11,
      "bbox": [
        354.07763671875,
        348.3361511230469,
        413.7312927246094,
        359.775390625
      ],
      "text": "2\n4\n6\n# Output sequences"
    },
    {
      "page_no": 11,
      "bbox": [
        335.16680908203125,
        344.4120788574219,
        338.2201232910156,
        350.0050048828125
      ],
      "text": "0"
    },
    {
      "page_no": 11,
      "bbox": [
        335.16680908203125,
        330.0296936035156,
        338.2201232910156,
        335.62261962890625
      ],
      "text": "4"
    },
    {
      "page_no": 11,
      "bbox": [
        335.16680908203125,
        315.64727783203125,
        338.2201232910156,
        321.2402038574219
      ],
      "text": "8"
    },
    {
      "page_no": 11,
      "bbox": [
        332.1100769042969,
        301.264892578125,
        338.2167053222656,
        306.8578186035156
      ],
      "text": "12"
    },
    {
      "page_no": 11,
      "bbox": [
        325.4513244628906,
        302.1859130859375,
        331.04425048828125,
        348.782470703125
      ],
      "text": "Memory saving (%)"
    },
    {
      "page_no": 11,
      "bbox": [
        350.2566833496094,
        319.68505859375,
        360.9432678222656,
        325.2779846191406
      ],
      "text": "6.09"
    },
    {
      "page_no": 11,
      "bbox": [
        378.5568542480469,
        310.9032897949219,
        389.2434387207031,
        316.4962158203125
      ],
      "text": "8.53"
    },
    {
      "page_no": 11,
      "bbox": [
        406.8570556640625,
        306.3901672363281,
        417.54364013671875,
        311.98309326171875
      ],
      "text": "9.79"
    },
    {
      "page_no": 11,
      "bbox": [
        340.0660095214844,
        365.41937255859375,
        415.5892333984375,
        374.4307861328125
      ],
      "text": "(a) Parallel sampling"
    },
    {
      "page_no": 11,
      "bbox": [
        474.10064697265625,
        348.3361511230469,
        533.7542724609375,
        359.775390625
      ],
      "text": "2\n4\n6\nBeam width"
    },
    {
      "page_no": 11,
      "bbox": [
        455.1898193359375,
        344.4120788574219,
        458.2431335449219,
        350.0050048828125
      ],
      "text": "0"
    },
    {
      "page_no": 11,
      "bbox": [
        452.1330871582031,
        331.5287780761719,
        458.2397155761719,
        337.1217041015625
      ],
      "text": "20"
    },
    {
      "page_no": 11,
      "bbox": [
        452.1330871582031,
        318.6455078125,
        458.2397155761719,
        324.2384338378906
      ],
      "text": "40"
    },
    {
      "page_no": 11,
      "bbox": [
        452.1330871582031,
        305.76220703125,
        458.2397155761719,
        311.3551330566406
      ],
      "text": "60"
    },
    {
      "page_no": 11,
      "bbox": [
        445.4743347167969,
        301.2137451171875,
        451.0672607421875,
        347.810302734375
      ],
      "text": "Memory saving (%)"
    },
    {
      "page_no": 11,
      "bbox": [
        468.7513427734375,
        317.3949279785156,
        482.4912414550781,
        322.98785400390625
      ],
      "text": "37.56"
    },
    {
      "page_no": 11,
      "bbox": [
        497.0514831542969,
        306.0586242675781,
        539.091552734375,
        312.9580383300781
      ],
      "text": "53.13\n55.16"
    },
    {
      "page_no": 11,
      "bbox": [
        468.3059997558594,
        365.41937255859375,
        527.3938598632812,
        374.4307861328125
      ],
      "text": "(b) Beam search"
    },
    {
      "page_no": 11,
      "bbox": [
        317.9549865722656,
        381.38037109375,
        557.9978637695312,
        403.2723083496094
      ],
      "text": "Figure 15. Average amount of memory saving from sharing\nKV blocks, when serving OPT-13B for the Alpaca trace."
    },
    {
      "page_no": 11,
      "bbox": [
        317.9549865722656,
        418.0547180175781,
        500.28057861328125,
        428.0173034667969
      ],
      "text": "6.3\nParallel Sampling and Beam Search"
    },
    {
      "page_no": 11,
      "bbox": [
        317.47698974609375,
        434.7023010253906,
        559.6856689453125,
        671.8872680664062
      ],
      "text": "We evaluate the effectiveness of memory sharing in Page-\ndAttention with two popular sampling methods: parallel\nsampling and beam search. In parallel sampling, all paral-\nlel sequences in a request can share the KV cache for the\nprompt. As shown in the first row of Fig. 14, with a larger\nnumber of sequences to sample, vLLM brings more improve-\nment over the Orca baselines. Similarly, the second row of\nFig. 14 shows the results for beam search with different beam\nwidths. Since beam search allows for more sharing, vLLM\ndemonstrates even greater performance benefits. The im-\nprovement of vLLM over Orca (Oracle) on OPT-13B and the\nAlpaca dataset goes from 1.3× in basic sampling to 2.3× in\nbeam search with a width of 6.\nFig. 15 plots the amount of memory saving, computed by\nthe number of blocks we saved by sharing divided by the\nnumber of total blocks without sharing. We show 6.1% - 9.8%\nmemory saving on parallel sampling and 37.6% - 55.2% on\nbeam search. In the same experiments with the ShareGPT\ndataset, we saw 16.2% - 30.5% memory saving on parallel\nsampling and 44.3% - 66.3% on beam search."
    },
    {
      "page_no": 11,
      "bbox": [
        317.9549865722656,
        679.4317016601562,
        400.84381103515625,
        689.394287109375
      ],
      "text": "6.4\nShared prefix"
    },
    {
      "page_no": 11,
      "bbox": [
        317.47698974609375,
        696.0792846679688,
        558.2418823242188,
        718.0970458984375
      ],
      "text": "We explore the effectiveness of vLLM for the case a prefix\nis shared among different input prompts, as illustrated in"
    },
    {
      "page_no": 11,
      "bbox": [
        302.7569885253906,
        722.3079223632812,
        309.2426452636719,
        729.28173828125
      ],
      "text": "11"
    },
    {
      "page_no": 12,
      "bbox": [
        100.9442367553711,
        154.49563598632812,
        179.1060791015625,
        172.07142639160156
      ],
      "text": "0\n20\n40\nRequest rate (req/s)"
    },
    {
      "page_no": 12,
      "bbox": [
        99.11772918701172,
        179.8789825439453,
        186.3487091064453,
        188.34584045410156
      ],
      "text": "(a) 1-shot prefix prompt"
    },
    {
      "page_no": 12,
      "bbox": [
        88.06356811523438,
        148.09991455078125,
        99.61917877197266,
        156.5667724609375
      ],
      "text": "0.0"
    },
    {
      "page_no": 12,
      "bbox": [
        88.06356811523438,
        119.31990051269531,
        99.61917877197266,
        127.78675079345703
      ],
      "text": "0.5"
    },
    {
      "page_no": 12,
      "bbox": [
        88.06356811523438,
        90.53990173339844,
        99.61917877197266,
        99.00674438476562
      ],
      "text": "1.0"
    },
    {
      "page_no": 12,
      "bbox": [
        195.7449951171875,
        154.49563598632812,
        273.90679931640625,
        172.07142639160156
      ],
      "text": "0\n20\n40\nRequest rate (req/s)"
    },
    {
      "page_no": 12,
      "bbox": [
        193.83737182617188,
        179.8789825439453,
        281.2282409667969,
        188.34584045410156
      ],
      "text": "(b) 5-shot prefix prompt"
    },
    {
      "page_no": 12,
      "bbox": [
        182.86431884765625,
        148.09991455078125,
        194.419921875,
        156.5667724609375
      ],
      "text": "0.0"
    },
    {
      "page_no": 12,
      "bbox": [
        182.86431884765625,
        119.31990051269531,
        194.419921875,
        127.78675079345703
      ],
      "text": "0.5"
    },
    {
      "page_no": 12,
      "bbox": [
        182.86431884765625,
        90.53990173339844,
        194.419921875,
        99.00674438476562
      ],
      "text": "1.0"
    },
    {
      "page_no": 12,
      "bbox": [
        67.26774597167969,
        87.8046875,
        75.7345962524414,
        158.0414276123047
      ],
      "text": "Normalized latency"
    },
    {
      "page_no": 12,
      "bbox": [
        75.40495300292969,
        109.6365966796875,
        83.8718032836914,
        158.0414276123047
      ],
      "text": "(s/token)"
    },
    {
      "page_no": 12,
      "bbox": [
        146.42401123046875,
        77.41670227050781,
        248.63893127441406,
        85.88355255126953
      ],
      "text": "Orca (Oracle)\nvLLM"
    },
    {
      "page_no": 12,
      "bbox": [
        53.63100051879883,
        199.65789794921875,
        294.0432434082031,
        233.61434936523438
      ],
      "text": "Figure 16. Translation workload where the input prompts\nshare a common prefix. The prefix includes (a) 1 example\nwith 80 tokens or (b) 5 examples with 341 tokens."
    },
    {
      "page_no": 12,
      "bbox": [
        105.64441680908203,
        311.42083740234375,
        225.3474578857422,
        324.5484924316406
      ],
      "text": "0.0\n0.2\n0.4\n0.6\n0.8\nRequest rate (req/s)"
    },
    {
      "page_no": 12,
      "bbox": [
        98.61360168457031,
        306.6437683105469,
        107.24469757080078,
        312.9678039550781
      ],
      "text": "0.0"
    },
    {
      "page_no": 12,
      "bbox": [
        98.61360168457031,
        285.1474609375,
        107.24469757080078,
        291.47149658203125
      ],
      "text": "0.5"
    },
    {
      "page_no": 12,
      "bbox": [
        98.61360168457031,
        263.6511535644531,
        107.24469757080078,
        269.9751892089844
      ],
      "text": "1.0"
    },
    {
      "page_no": 12,
      "bbox": [
        79.73076629638672,
        264.3998718261719,
        86.05480194091797,
        316.8609619140625
      ],
      "text": "Normalized latency"
    },
    {
      "page_no": 12,
      "bbox": [
        85.80858612060547,
        280.70654296875,
        92.13262176513672,
        316.8609619140625
      ],
      "text": "(s/token)"
    },
    {
      "page_no": 12,
      "bbox": [
        96.92147827148438,
        252.7324981689453,
        263.832763671875,
        259.0565490722656
      ],
      "text": "Orca (Max)\nOrca (Pow2)\nOrca (Oracle)\nvLLM"
    },
    {
      "page_no": 12,
      "bbox": [
        80.30899810791016,
        333.00872802734375,
        267.73590087890625,
        343.0213317871094
      ],
      "text": "Figure 17. Performance on chatbot workload."
    },
    {
      "page_no": 12,
      "bbox": [
        53.63100051879883,
        364.2397155761719,
        295.7303771972656,
        481.786865234375
      ],
      "text": "Fig. 10. For the model, we use LLaMA-13B [52], which is mul-\ntilingual. For the workload, we use the WMT16 [4] English-\nto-German translation dataset and synthesize two prefixes\nthat include an instruction and a few translation examples.\nThe first prefix includes a single example (i.e., one-shot)\nwhile the other prefix includes 5 examples (i.e., few-shot). As\nshown in Fig. 16 (a), vLLM achieves 1.67× higher through-\nput than Orca (Oracle) when the one-shot prefix is shared.\nFurthermore, when more examples are shared (Fig. 16 (b)),\nvLLM achieves 3.58× higher throughput than Orca (Oracle)."
    },
    {
      "page_no": 12,
      "bbox": [
        54.0,
        488.4477233886719,
        112.9985122680664,
        498.4103088378906
      ],
      "text": "6.5\nChatbot"
    },
    {
      "page_no": 12,
      "bbox": [
        53.6510009765625,
        504.8717041015625,
        300.37811279296875,
        718.0510864257812
      ],
      "text": "A chatbot [8, 19, 35] is one of the most important applications\nof LLMs. To implement a chatbot, we let the model generate\na response by concatenating the chatting history and the\nlast user query into a prompt. We synthesize the chatting\nhistory and user query using the ShareGPT dataset. Due to\nthe limited context length of the OPT-13B model, we cut the\nprompt to the last 1024 tokens and let the model generate\nat most 1024 tokens. We do not store the KV cache between\ndifferent conversation rounds as doing this would occupy the\nspace for other requests between the conversation rounds.\nFig. 17 shows that vLLM can sustain 2× higher request\nrates compared to the three Orca baselines. Since the ShareGPT\ndataset contains many long conversations, the input prompts\nfor most requests have 1024 tokens. Due to the buddy allo-\ncation algorithm, the Orca baselines reserve the space for\n1024 tokens for the request outputs, regardless of how they\npredict the output lengths. For this reason, the three Orca\nbaselines behave similarly. In contrast, vLLM can effectively"
    },
    {
      "page_no": 12,
      "bbox": [
        342.4057312011719,
        144.17164611816406,
        424.6851501464844,
        155.7633514404297
      ],
      "text": "64\n128\n256\nContext length"
    },
    {
      "page_no": 12,
      "bbox": [
        336.550048828125,
        140.1952362060547,
        339.6440734863281,
        145.8627166748047
      ],
      "text": "0"
    },
    {
      "page_no": 12,
      "bbox": [
        333.4525451660156,
        129.9677734375,
        339.6405944824219,
        135.63525390625
      ],
      "text": "50"
    },
    {
      "page_no": 12,
      "bbox": [
        330.35504150390625,
        119.74030303955078,
        339.6370849609375,
        125.40779876708984
      ],
      "text": "100"
    },
    {
      "page_no": 12,
      "bbox": [
        330.35504150390625,
        109.5128402709961,
        339.6370849609375,
        115.18033599853516
      ],
      "text": "150"
    },
    {
      "page_no": 12,
      "bbox": [
        330.35504150390625,
        99.2853775024414,
        339.6370849609375,
        104.95287322998047
      ],
      "text": "200"
    },
    {
      "page_no": 12,
      "bbox": [
        330.35504150390625,
        89.05791473388672,
        339.6370849609375,
        94.72541046142578
      ],
      "text": "250"
    },
    {
      "page_no": 12,
      "bbox": [
        323.6075134277344,
        94.48754119873047,
        329.2750244140625,
        140.15155029296875
      ],
      "text": "Kernel latency (us)"
    },
    {
      "page_no": 12,
      "bbox": [
        350.6705322265625,
        79.01991271972656,
        378.77447509765625,
        91.82783508300781
      ],
      "text": "vLLM (bs 8)\nFT (bs 8)"
    },
    {
      "page_no": 12,
      "bbox": [
        397.2813720703125,
        79.01991271972656,
        428.4793395996094,
        91.82783508300781
      ],
      "text": "vLLM (bs 32)\nFT (bs 32)"
    },
    {
      "page_no": 12,
      "bbox": [
        317.677001953125,
        166.49378967285156,
        433.174072265625,
        175.4328155517578
      ],
      "text": "(a) Latency of attention kernels."
    },
    {
      "page_no": 12,
      "bbox": [
        467.8495178222656,
        146.92381286621094,
        546.8956909179688,
        157.02590942382812
      ],
      "text": "1\n2\n4\n8\n16\n32\n64\n128 256\nBlock size"
    },
    {
      "page_no": 12,
      "bbox": [
        456.8394470214844,
        140.42587280273438,
        462.7176818847656,
        144.73287963867188
      ],
      "text": "0.0"
    },
    {
      "page_no": 12,
      "bbox": [
        456.8394470214844,
        132.9632110595703,
        462.7176818847656,
        137.2702178955078
      ],
      "text": "2.5"
    },
    {
      "page_no": 12,
      "bbox": [
        456.8394470214844,
        125.50054931640625,
        462.7176818847656,
        129.80755615234375
      ],
      "text": "5.0"
    },
    {
      "page_no": 12,
      "bbox": [
        456.8394470214844,
        118.03790283203125,
        462.7176818847656,
        122.34490203857422
      ],
      "text": "7.5"
    },
    {
      "page_no": 12,
      "bbox": [
        454.4884033203125,
        110.57524108886719,
        462.7179260253906,
        114.88224029541016
      ],
      "text": "10.0"
    },
    {
      "page_no": 12,
      "bbox": [
        454.4884033203125,
        103.11257934570312,
        462.7179260253906,
        107.41958618164062
      ],
      "text": "12.5"
    },
    {
      "page_no": 12,
      "bbox": [
        454.4884033203125,
        95.64991760253906,
        462.7179260253906,
        99.95692443847656
      ],
      "text": "15.0"
    },
    {
      "page_no": 12,
      "bbox": [
        454.4884033203125,
        88.18727111816406,
        462.7179260253906,
        92.49427032470703
      ],
      "text": "17.5"
    },
    {
      "page_no": 12,
      "bbox": [
        447.9638977050781,
        83.14932250976562,
        453.13232421875,
        147.10853576660156
      ],
      "text": "Normalized latency (s/token)"
    },
    {
      "page_no": 12,
      "bbox": [
        479.88616943359375,
        86.74893188476562,
        501.518798828125,
        98.43330383300781
      ],
      "text": "ShareGPT\nAlpaca"
    },
    {
      "page_no": 12,
      "bbox": [
        369.6839904785156,
        166.4393768310547,
        557.0226440429688,
        200.30728149414062
      ],
      "text": "(b) End-to-end latency with dif-\nferent block sizes.\nFigure 18. Ablation experiments."
    },
    {
      "page_no": 12,
      "bbox": [
        317.9549865722656,
        238.38331604003906,
        557.9984741210938,
        260.3753356933594
      ],
      "text": "handle the long prompts, as PagedAttention resolves the\nproblem of memory fragmentation and reservation."
    },
    {
      "page_no": 12,
      "bbox": [
        317.9549865722656,
        270.02960205078125,
        415.951416015625,
        280.9386901855469
      ],
      "text": "7\nAblation Studies"
    },
    {
      "page_no": 12,
      "bbox": [
        317.9549865722656,
        288.1395568847656,
        559.681396484375,
        309.9933166503906
      ],
      "text": "In this section, we study various aspects of vLLM and evalu-\nate the design choices we make with ablation experiments."
    },
    {
      "page_no": 12,
      "bbox": [
        317.9549865722656,
        319.36669921875,
        451.62322998046875,
        329.32928466796875
      ],
      "text": "7.1\nKernel Microbenchmark"
    },
    {
      "page_no": 12,
      "bbox": [
        317.656005859375,
        336.641845703125,
        559.6853637695312,
        490.122314453125
      ],
      "text": "The dynamic block mapping in PagedAttention affects the\nperformance of the GPU operations involving the stored KV\ncache, i.e., block read/writes and attention. Compared to the\nexisting systems, our GPU kernels (§5) involve extra over-\nheads of accessing the block table, executing extra branches,\nand handling variable sequence lengths. As shown in Fig. 18a,\nthis leads to 20–26% higher attention kernel latency, com-\npared to the highly-optimized FasterTransformer implemen-\ntation. We believe the overhead is small as it only affects\nthe attention operator but not the other operators in the\nmodel, such as Linear. Despite the overhead, PagedAttention\nmakes vLLM significantly outperform FasterTransformer in\nend-to-end performance (§6)."
    },
    {
      "page_no": 12,
      "bbox": [
        317.9549865722656,
        499.4956970214844,
        432.62451171875,
        509.4582824707031
      ],
      "text": "7.2\nImpact of Block Size"
    },
    {
      "page_no": 12,
      "bbox": [
        317.5870056152344,
        516.9017944335938,
        559.6856689453125,
        718.072265625
      ],
      "text": "The choice of block size can have a substantial impact on the\nperformance of vLLM. If the block size is too small, vLLM\nmay not fully utilize the GPU’s parallelism for reading and\nprocessing KV cache. If the block size is too large, inter-\nnal fragmentation increases and the probability of sharing\ndecreases.\nIn Fig. 18b, we evaluate the performance of vLLM with dif-\nferent block sizes, using the ShareGPT and Alpaca traces with\nbasic sampling under fixed request rates. In the ShareGPT\ntrace, block sizes from 16 to 128 lead to the best performance.\nIn the Alpaca trace, while the block size 16 and 32 work\nwell, larger block sizes significantly degrade the performance\nsince the sequences become shorter than the block sizes. In\npractice, we find that the block size 16 is large enough to\nefficiently utilize the GPU and small enough to avoid signifi-\ncant internal fragmentation in most workloads. Accordingly,\nvLLM sets its default block size as 16."
    },
    {
      "page_no": 12,
      "bbox": [
        302.7569885253906,
        722.3079223632812,
        309.2426452636719,
        729.28173828125
      ],
      "text": "12"
    },
    {
      "page_no": 13,
      "bbox": [
        82.01190185546875,
        137.5222930908203,
        160.3814697265625,
        147.3609619140625
      ],
      "text": "1\n2\n4\n8\n16\n32\n64\n128 256\nBlock size"
    },
    {
      "page_no": 13,
      "bbox": [
        74.6571273803711,
        133.634765625,
        76.94711303710938,
        137.8294677734375
      ],
      "text": "0"
    },
    {
      "page_no": 13,
      "bbox": [
        72.36737060546875,
        125.83250427246094,
        76.94732666015625,
        130.02720642089844
      ],
      "text": "20"
    },
    {
      "page_no": 13,
      "bbox": [
        72.36737060546875,
        118.03024291992188,
        76.94732666015625,
        122.22493743896484
      ],
      "text": "40"
    },
    {
      "page_no": 13,
      "bbox": [
        72.36737060546875,
        110.22798156738281,
        76.94732666015625,
        114.42267608642578
      ],
      "text": "60"
    },
    {
      "page_no": 13,
      "bbox": [
        72.36737060546875,
        102.42572784423828,
        76.94732666015625,
        106.62042236328125
      ],
      "text": "80"
    },
    {
      "page_no": 13,
      "bbox": [
        70.0776138305664,
        94.62345886230469,
        76.94755554199219,
        98.81815338134766
      ],
      "text": "100"
    },
    {
      "page_no": 13,
      "bbox": [
        70.0776138305664,
        86.82120513916016,
        76.94755554199219,
        91.01589965820312
      ],
      "text": "120"
    },
    {
      "page_no": 13,
      "bbox": [
        70.0776138305664,
        79.0189437866211,
        76.94755554199219,
        83.21363830566406
      ],
      "text": "140"
    },
    {
      "page_no": 13,
      "bbox": [
        63.7232780456543,
        95.46217346191406,
        68.75691986083984,
        117.24314880371094
      ],
      "text": "Time (ms)"
    },
    {
      "page_no": 13,
      "bbox": [
        128.04457092285156,
        78.52762603759766,
        158.47540283203125,
        102.59944152832031
      ],
      "text": "Recompute\nSwap in\nSwap out\nSwap in + out"
    },
    {
      "page_no": 13,
      "bbox": [
        76.26300048828125,
        150.8804168701172,
        151.3029327392578,
        159.89183044433594
      ],
      "text": "(a) Microbenchmark"
    },
    {
      "page_no": 13,
      "bbox": [
        198.03469848632812,
        138.38870239257812,
        279.26934814453125,
        148.45091247558594
      ],
      "text": "1\n2\n4\n8\n16\n32\n64\n128 256\nBlock size"
    },
    {
      "page_no": 13,
      "bbox": [
        186.9430694580078,
        132.9827117919922,
        192.798095703125,
        137.272705078125
      ],
      "text": "0.0"
    },
    {
      "page_no": 13,
      "bbox": [
        186.9430694580078,
        122.12242889404297,
        192.798095703125,
        126.41242980957031
      ],
      "text": "0.5"
    },
    {
      "page_no": 13,
      "bbox": [
        186.9430694580078,
        111.26215362548828,
        192.798095703125,
        115.55215454101562
      ],
      "text": "1.0"
    },
    {
      "page_no": 13,
      "bbox": [
        186.9430694580078,
        100.4018783569336,
        192.798095703125,
        104.69187927246094
      ],
      "text": "1.5"
    },
    {
      "page_no": 13,
      "bbox": [
        186.9430694580078,
        89.54159545898438,
        192.798095703125,
        93.83159637451172
      ],
      "text": "2.0"
    },
    {
      "page_no": 13,
      "bbox": [
        186.9430694580078,
        78.68132019042969,
        192.798095703125,
        82.97132110595703
      ],
      "text": "2.5"
    },
    {
      "page_no": 13,
      "bbox": [
        180.4443817138672,
        74.66722869873047,
        185.59237670898438,
        138.3738555908203
      ],
      "text": "Normalized latency (s/token)"
    },
    {
      "page_no": 13,
      "bbox": [
        252.26470947265625,
        78.05377197265625,
        277.3539123535156,
        89.69200134277344
      ],
      "text": "Recompute\nSwap"
    },
    {
      "page_no": 13,
      "bbox": [
        180.0489959716797,
        150.8804168701172,
        282.93865966796875,
        159.89183044433594
      ],
      "text": "(b) End-to-end performance"
    },
    {
      "page_no": 13,
      "bbox": [
        53.63100051879883,
        170.8263702392578,
        294.2355041503906,
        204.67330932617188
      ],
      "text": "Figure 19. (a) Overhead of recomputation and swapping for\ndifferent block sizes. (b) Performance when serving OPT-13B\nwith the ShareGPT traces at the same request rate."
    },
    {
      "page_no": 13,
      "bbox": [
        54.0,
        219.59971618652344,
        265.8347473144531,
        229.56231689453125
      ],
      "text": "7.3\nComparing Recomputation and Swapping"
    },
    {
      "page_no": 13,
      "bbox": [
        53.63100051879883,
        235.94351196289062,
        295.7323913574219,
        425.2453308105469
      ],
      "text": "vLLM supports both recomputation and swapping as its re-\ncovery mechanisms. To understand the tradeoffs between\nthe two methods, we evaluate their end-to-end performance\nand microbenchmark their overheads, as presented in Fig. 19.\nOur results reveal that swapping incurs excessive overhead\nwith small block sizes. This is because small block sizes often\nresult in numerous small data transfers between CPU and\nGPU, which limits the effective PCIe bandwidth. In contrast,\nthe overhead of recomputation remains constant across dif-\nferent block sizes, as recomputation does not utilize the KV\nblocks. Thus, recomputation is more efficient when the block\nsize is small, while swapping is more efficient when the block\nsize is large, though recomputation overhead is never higher\nthan 20% of swapping’s latency. For medium block sizes from\n16 to 64, the two methods exhibit comparable end-to-end\nperformance."
    },
    {
      "page_no": 13,
      "bbox": [
        54.0,
        431.9725646972656,
        123.75279998779297,
        442.88165283203125
      ],
      "text": "8\nDiscussion"
    },
    {
      "page_no": 13,
      "bbox": [
        53.63100051879883,
        453.0875549316406,
        295.72589111328125,
        666.2662963867188
      ],
      "text": "Applying the virtual memory and paging technique to\nother GPU workloads. The idea of virtual memory and\npaging is effective for managing the KV cache in LLM serving\nbecause the workload requires dynamic memory allocation\n(since the output length is not known a priori) and its perfor-\nmance is bound by the GPU memory capacity. However, this\ndoes not generally hold for every GPU workload. For exam-\nple, in DNN training, the tensor shapes are typically static,\nand thus memory allocation can be optimized ahead of time.\nFor another example, in serving DNNs that are not LLMs,\nan increase in memory efficiency may not result in any per-\nformance improvement since the performance is primarily\ncompute-bound. In such scenarios, introducing the vLLM’s\ntechniques may rather degrade the performance due to the\nextra overhead of memory indirection and non-contiguous\nblock memory. However, we would be excited to see vLLM’s\ntechniques being applied to other workloads with similar\nproperties to LLM serving."
    },
    {
      "page_no": 13,
      "bbox": [
        54.0,
        672.1449584960938,
        295.8272705078125,
        718.0970458984375
      ],
      "text": "LLM-specific optimizations in applying virtual mem-\nory and paging. vLLM re-interprets and augments the idea\nof virtual memory and paging by leveraging the application-\nspecific semantics. One example is vLLM’s all-or-nothing"
    },
    {
      "page_no": 13,
      "bbox": [
        317.9549865722656,
        74.41132354736328,
        559.6854248046875,
        168.13430786132812
      ],
      "text": "swap-out policy, which exploits the fact that processing a\nrequest requires all of its corresponding token states to be\nstored in GPU memory. Another example is the recomputa-\ntion method to recover the evicted blocks, which is not feasi-\nble in OS. Besides, vLLM mitigates the overhead of memory\nindirection in paging by fusing the GPU kernels for memory\naccess operations with those for other operations such as\nattention."
    },
    {
      "page_no": 13,
      "bbox": [
        317.9549865722656,
        182.3895263671875,
        402.5550842285156,
        193.2986297607422
      ],
      "text": "9\nRelated Work"
    },
    {
      "page_no": 13,
      "bbox": [
        317.9549865722656,
        205.97564697265625,
        559.6868286132812,
        371.372314453125
      ],
      "text": "General model serving systems. Model serving has been\nan active area of research in recent years, with numerous\nsystems proposed to tackle diverse aspects of deep learning\nmodel deployment. Clipper [11], TensorFlow Serving [33],\nNexus [45], InferLine [10], and Clockwork [20] are some\nearlier general model serving systems. They study batch-\ning, caching, placement, and scheduling for serving single\nor multiple models. More recently, DVABatch [12] intro-\nduces multi-entry multi-exit batching. REEF [21] and Shep-\nherd [61] propose preemption for serving. AlpaServe [28]\nutilizes model parallelism for statistical multiplexing. How-\never, these general systems fail to take into account the auto-\nregressive property and token state of LLM inference, result-\ning in missed opportunities for optimization."
    },
    {
      "page_no": 13,
      "bbox": [
        317.6059875488281,
        377.22479248046875,
        559.6875,
        459.0433349609375
      ],
      "text": "Specialized serving systems for transformers. Due to\nthe significance of the transformer architecture, numerous\nspecialized serving systems for it have been developed. These\nsystems utilize GPU kernel optimizations [1, 29, 31, 56], ad-\nvanced batching mechanisms [14, 60], model parallelism [1,\n41, 60], and parameter sharing [64] for efficient serving.\nAmong them, Orca [60] is most relevant to our approach."
    },
    {
      "page_no": 13,
      "bbox": [
        317.5870056152344,
        464.8957824707031,
        559.6851806640625,
        630.4002685546875
      ],
      "text": "Comparison to Orca. The iteration-level scheduling in\nOrca [60] and PagedAttention in vLLM are complementary\ntechniques: While both systems aim to increase the GPU\nutilization and hence the throughput of LLM serving, Orca\nachieves it by scheduling and interleaving the requests so\nthat more requests can be processed in parallel, while vLLM\nis doing so by increasing memory utilization so that the\nworking sets of more requests fit into memory. By reducing\nmemory fragmentation and enabling sharing, vLLM runs\nmore requests in a batch in parallel and achieves a 2-4×\nspeedup compared to Orca. Indeed, the fine-grained sched-\nuling and interleaving of the requests like in Orca makes\nmemory management more challenging, making the tech-\nniques proposed in vLLM even more crucial."
    },
    {
      "page_no": 13,
      "bbox": [
        317.9549865722656,
        636.2538452148438,
        558.3681640625,
        718.0970458984375
      ],
      "text": "Memory optimizations. The widening gap between the\ncompute capability and memory capacity of accelerators has\ncaused memory to become a bottleneck for both training\nand inference. Swapping [23, 42, 55], recomputation [7, 24]\nand their combination [40] have been utilized to reduce the\npeak memory of training. Notably, FlexGen [46] studies how\nto swap weights and token states for LLM inference with"
    },
    {
      "page_no": 13,
      "bbox": [
        302.7569885253906,
        722.3079223632812,
        309.2426452636719,
        729.28173828125
      ],
      "text": "13"
    },
    {
      "page_no": 14,
      "bbox": [
        54.0,
        74.50444793701172,
        295.73211669921875,
        168.13430786132812
      ],
      "text": "limited GPU memory, but it does not target the online serv-\ning settings. OLLA [48] optimizes the lifetime and location\nof tensors to reduce fragmentation, but it does not do fine-\ngrained block-level management or online serving. FlashAt-\ntention [13] applies tiling and kernel optimizations to reduce\nthe peak memory of attention computation and reduce I/O\ncosts. This paper introduces a new idea of block-level mem-\nory management in the context of online serving."
    },
    {
      "page_no": 14,
      "bbox": [
        54.0,
        177.300537109375,
        132.50189208984375,
        188.2096405029297
      ],
      "text": "10\nConclusion"
    },
    {
      "page_no": 14,
      "bbox": [
        53.70100021362305,
        195.15113830566406,
        295.7301330566406,
        324.6993103027344
      ],
      "text": "This paper proposes PagedAttention, a new attention algo-\nrithm that allows attention keys and values to be stored\nin non-contiguous paged memory, and presents vLLM, a\nhigh-throughput LLM serving system with efficient mem-\nory management enabled by PagedAttention. Inspired by\noperating systems, we demonstrate how established tech-\nniques, such as virtual memory and copy-on-write, can be\nadapted to efficiently manage KV cache and handle various\ndecoding algorithms in LLM serving. Our experiments show\nthat vLLM achieves 2-4× throughput improvements over the\nstate-of-the-art systems."
    },
    {
      "page_no": 14,
      "bbox": [
        54.0,
        333.8655700683594,
        146.66189575195312,
        344.774658203125
      ],
      "text": "Acknowledgement"
    },
    {
      "page_no": 14,
      "bbox": [
        53.52199935913086,
        351.67529296875,
        301.1299133300781,
        433.4433288574219
      ],
      "text": "We would like to thank Xiaoxuan Liu, Zhifeng Chen, Yan-\nping Huang, anonymous SOSP reviewers, and our shepherd,\nLidong Zhou, for their insightful feedback. This research is\npartly supported by gifts from Andreessen Horowitz, Anyscale,\nAstronomer, Google, IBM, Intel, Lacework, Microsoft, Mo-\nhamed Bin Zayed University of Artificial Intelligence, Sam-\nsung SDS, Uber, and VMware."
    },
    {
      "page_no": 14,
      "bbox": [
        54.0,
        442.6095886230469,
        108.3491439819336,
        453.5186767578125
      ],
      "text": "References"
    },
    {
      "page_no": 14,
      "bbox": [
        57.70599365234375,
        460.4796447753906,
        295.39532470703125,
        717.5772094726562
      ],
      "text": "[1] Reza Yazdani Aminabadi, Samyam Rajbhandari, Minjia Zhang, Am-\nmar Ahmad Awan, Cheng Li, Du Li, Elton Zheng, Jeff Rasley, Shaden\nSmith, Olatunji Ruwase, et al. 2022. DeepSpeed Inference: Enabling\nEfficient Inference of Transformer Models at Unprecedented Scale.\narXiv preprint arXiv:2207.00032 (2022).\n[2] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. 2016. Layer\nnormalization. arXiv preprint arXiv:1607.06450 (2016).\n[3] Yoshua Bengio, Réjean Ducharme, and Pascal Vincent. 2000. A neural\nprobabilistic language model. Advances in neural information process-\ning systems 13 (2000).\n[4] Ond rej Bojar, Rajen Chatterjee, Christian Federmann, Yvette Gra-\nham, Barry Haddow, Matthias Huck, Antonio Jimeno Yepes, Philipp\nKoehn, Varvara Logacheva, Christof Monz, Matteo Negri, Aurelie\nNeveol, Mariana Neves, Martin Popel, Matt Post, Raphael Rubino, Car-\nolina Scarton, Lucia Specia, Marco Turchi, Karin Verspoor, and Marcos\nZampieri. 2016. Findings of the 2016 Conference on Machine Trans-\nlation. In Proceedings of the First Conference on Machine Translation.\nAssociation for Computational Linguistics, Berlin, Germany, 131–198.\nhttp://www.aclweb.org/anthology/W/W16/W16-2301\n[5] Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D\nKaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish\nSastry, Amanda Askell, et al. 2020. Language models are few-shot\nlearners. Advances in neural information processing systems 33 (2020),\n1877–1901.\n[6] Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde\nde Oliveira Pinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas"
    },
    {
      "page_no": 14,
      "bbox": [
        317.9549865722656,
        75.98117065429688,
        559.3508911132812,
        711.5772705078125
      ],
      "text": "Joseph, Greg Brockman, et al. 2021. Evaluating large language models\ntrained on code. arXiv preprint arXiv:2107.03374 (2021).\n[7] Tianqi Chen, Bing Xu, Chiyuan Zhang, and Carlos Guestrin. 2016.\nTraining deep nets with sublinear memory cost.\narXiv preprint\narXiv:1604.06174 (2016).\n[8] Wei-Lin Chiang, Zhuohan Li, Zi Lin, Ying Sheng, Zhanghao Wu, Hao\nZhang, Lianmin Zheng, Siyuan Zhuang, Yonghao Zhuang, Joseph E.\nGonzalez, Ion Stoica, and Eric P. Xing. 2023. Vicuna: An Open-Source\nChatbot Impressing GPT-4 with 90%* ChatGPT Quality. https://lmsys.\norg/blog/2023-03-30-vicuna/\n[9] Aakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma,\nGaurav Mishra, Adam Roberts, Paul Barham, Hyung Won Chung,\nCharles Sutton, Sebastian Gehrmann, et al. 2022. Palm: Scaling lan-\nguage modeling with pathways. arXiv preprint arXiv:2204.02311 (2022).\n[10] Daniel Crankshaw, Gur-Eyal Sela, Xiangxi Mo, Corey Zumar, Ion\nStoica, Joseph Gonzalez, and Alexey Tumanov. 2020. InferLine: latency-\naware provisioning and scaling for prediction serving pipelines. In\nProceedings of the 11th ACM Symposium on Cloud Computing. 477–491.\n[11] Daniel Crankshaw, Xin Wang, Guilio Zhou, Michael J Franklin,\nJoseph E Gonzalez, and Ion Stoica. 2017. Clipper: A Low-Latency\nOnline Prediction Serving System. In 14th USENIX Symposium on\nNetworked Systems Design and Implementation (NSDI 17). 613–627.\n[12] Weihao Cui, Han Zhao, Quan Chen, Hao Wei, Zirui Li, Deze Zeng,\nChao Li, and Minyi Guo. 2022. DVABatch: Diversity-aware Multi-\nEntry Multi-Exit Batching for Efficient Processing of DNN Services\non GPUs. In 2022 USENIX Annual Technical Conference (USENIX ATC\n22). 183–198.\n[13] Tri Dao, Dan Fu, Stefano Ermon, Atri Rudra, and Christopher Ré.\n2022. Flashattention: Fast and memory-efficient exact attention with\nio-awareness. Advances in Neural Information Processing Systems 35\n(2022), 16344–16359.\n[14] Jiarui Fang, Yang Yu, Chengduo Zhao, and Jie Zhou. 2021. TurboTrans-\nformers: an efficient GPU serving system for transformer models. In\nProceedings of the 26th ACM SIGPLAN Symposium on Principles and\nPractice of Parallel Programming. 389–402.\n[15] FastAPI. 2023. FastAPI. https://github.com/tiangolo/fastapi.\n[16] Pin Gao, Lingfan Yu, Yongwei Wu, and Jinyang Li. 2018. Low latency\nrnn inference with cellular batching. In Proceedings of the Thirteenth\nEuroSys Conference. 1–15.\n[17] Amir Gholami, Zhewei Yao, Sehoon Kim, Michael W Mahoney, and\nKurt Keutzer. 2021. Ai and memory wall. RiseLab Medium Post 1 (2021),\n6.\n[18] Github. 2022. https://github.com/features/copilot\n[19] Google. 2023. https://bard.google.com/\n[20] Arpan Gujarati, Reza Karimi, Safya Alzayat, Wei Hao, Antoine Kauf-\nmann, Ymir Vigfusson, and Jonathan Mace. 2020. Serving {DNNs} like\nClockwork: Performance Predictability from the Bottom Up. In 14th\nUSENIX Symposium on Operating Systems Design and Implementation\n(OSDI 20). 443–462.\n[21] Mingcong Han, Hanze Zhang, Rong Chen, and Haibo Chen.\n2022.\nMicrosecond-scale Preemption for Concurrent {GPU-\naccelerated}{DNN} Inferences. In 16th USENIX Symposium on Oper-\nating Systems Design and Implementation (OSDI 22). 539–558.\n[22] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. 2016. Deep\nresidual learning for image recognition. In Proceedings of the IEEE\nconference on computer vision and pattern recognition. 770–778.\n[23] Chien-Chin Huang, Gu Jin, and Jinyang Li. 2020. Swapadvisor: Push-\ning deep learning beyond the gpu memory limit via smart swapping.\nIn Proceedings of the Twenty-Fifth International Conference on Archi-\ntectural Support for Programming Languages and Operating Systems.\n1341–1355.\n[24] Paras Jain, Ajay Jain, Aniruddha Nrusimha, Amir Gholami, Pieter\nAbbeel, Joseph Gonzalez, Kurt Keutzer, and Ion Stoica. 2020. Check-\nmate: Breaking the memory wall with optimal tensor rematerialization."
    },
    {
      "page_no": 14,
      "bbox": [
        302.7569885253906,
        722.3079223632812,
        309.2426452636719,
        729.28173828125
      ],
      "text": "14"
    },
    {
      "page_no": 15,
      "bbox": [
        53.99998474121094,
        75.98117065429688,
        295.39520263671875,
        711.6170654296875
      ],
      "text": "Proceedings of Machine Learning and Systems 2 (2020), 497–511.\n[25] Tom Kilburn, David BG Edwards, Michael J Lanigan, and Frank H\nSumner. 1962. One-level storage system. IRE Transactions on Electronic\nComputers 2 (1962), 223–235.\n[26] Brian Lester, Rami Al-Rfou, and Noah Constant. 2021. The power\nof scale for parameter-efficient prompt tuning.\narXiv preprint\narXiv:2104.08691 (2021).\n[27] Xiang Lisa Li and Percy Liang. 2021. Prefix-tuning: Optimizing contin-\nuous prompts for generation. arXiv preprint arXiv:2101.00190 (2021).\n[28] Zhuohan Li, Lianmin Zheng, Yinmin Zhong, Vincent Liu, Ying Sheng,\nXin Jin, Yanping Huang, Zhifeng Chen, Hao Zhang, Joseph E Gonzalez,\net al. 2023. AlpaServe: Statistical Multiplexing with Model Parallelism\nfor Deep Learning Serving. arXiv preprint arXiv:2302.11665 (2023).\n[29] Lingxiao Ma, Zhiqiang Xie, Zhi Yang, Jilong Xue, Youshan Miao, Wei\nCui, Wenxiang Hu, Fan Yang, Lintao Zhang, and Lidong Zhou. 2020.\nRammer: Enabling holistic deep learning compiler optimizations with\nrtasks. In Proceedings of the 14th USENIX Conference on Operating\nSystems Design and Implementation. 881–897.\n[30] NVIDIA. [n. d.]. Triton Inference Server. https://developer.nvidia.com/\nnvidia-triton-inference-server.\n[31] NVIDIA. 2023.\nFasterTransformer.\nhttps://github.com/NVIDIA/\nFasterTransformer.\n[32] NVIDIA. 2023. NCCL: The NVIDIA Collective Communication Library.\nhttps://developer.nvidia.com/nccl.\n[33] Christopher Olston, Noah Fiedel, Kiril Gorovoy, Jeremiah Harmsen, Li\nLao, Fangwei Li, Vinu Rajashekhar, Sukriti Ramesh, and Jordan Soyke.\n2017. Tensorflow-serving: Flexible, high-performance ml serving.\narXiv preprint arXiv:1712.06139 (2017).\n[34] OpenAI. 2020. https://openai.com/blog/openai-api\n[35] OpenAI. 2022. https://openai.com/blog/chatgpt\n[36] OpenAI. 2023.\nhttps://openai.com/blog/custom-instructions-for-\nchatgpt\n[37] OpenAI. 2023. GPT-4 Technical Report. arXiv:2303.08774 [cs.CL]\n[38] LMSYS ORG. 2023. Chatbot Arena Leaderboard Week 8: Introduc-\ning MT-Bench and Vicuna-33B. https://lmsys.org/blog/2023-06-22-\nleaderboard/.\n[39] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James\nBradbury, Gregory Chanan, Trevor Killeen, Zeming Lin, Natalia\nGimelshein, Luca Antiga, et al. 2019. Pytorch: An imperative style,\nhigh-performance deep learning library. Advances in neural informa-\ntion processing systems 32 (2019).\n[40] Shishir G Patil, Paras Jain, Prabal Dutta, Ion Stoica, and Joseph Gon-\nzalez. 2022. POET: Training Neural Networks on Tiny Devices with\nIntegrated Rematerialization and Paging. In International Conference\non Machine Learning. PMLR, 17573–17583.\n[41] Reiner Pope, Sholto Douglas, Aakanksha Chowdhery, Jacob Devlin,\nJames Bradbury, Anselm Levskaya, Jonathan Heek, Kefan Xiao, Shivani\nAgrawal, and Jeff Dean. 2022. Efficiently Scaling Transformer Inference.\narXiv preprint arXiv:2211.05102 (2022).\n[42] Jie Ren, Samyam Rajbhandari, Reza Yazdani Aminabadi, Olatunji\nRuwase, Shuangyan Yang, Minjia Zhang, Dong Li, and Yuxiong He.\n2021. ZeRO-Offload: Democratizing Billion-Scale Model Training.. In\nUSENIX Annual Technical Conference. 551–564.\n[43] Reuters. 2023. https://www.reuters.com/technology/tech-giants-ai-\nlike-bing-bard-poses-billion-dollar-search-problem-2023-02-22/\n[44] Amazon Web Services. 2023. https://aws.amazon.com/bedrock/\n[45] Haichen Shen, Lequn Chen, Yuchen Jin, Liangyu Zhao, Bingyu Kong,\nMatthai Philipose, Arvind Krishnamurthy, and Ravi Sundaram. 2019.\nNexus: A GPU cluster engine for accelerating DNN-based video anal-\nysis. In Proceedings of the 27th ACM Symposium on Operating Systems\nPrinciples. 322–337.\n[46] Ying Sheng, Lianmin Zheng, Binhang Yuan, Zhuohan Li, Max Ryabinin,\nDaniel Y Fu, Zhiqiang Xie, Beidi Chen, Clark Barrett, Joseph E Gon-\nzalez, et al. 2023. High-throughput Generative Inference of Large"
    },
    {
      "page_no": 15,
      "bbox": [
        317.9549865722656,
        75.99015045166016,
        559.3504638671875,
        701.6925048828125
      ],
      "text": "Language Models with a Single GPU. arXiv preprint arXiv:2303.06865\n(2023).\n[47] Mohammad Shoeybi, Mostofa Patwary, Raul Puri, Patrick LeGresley,\nJared Casper, and Bryan Catanzaro. 2019. Megatron-lm: Training multi-\nbillion parameter language models using model parallelism. arXiv\npreprint arXiv:1909.08053 (2019).\n[48] Benoit Steiner, Mostafa Elhoushi, Jacob Kahn, and James Hegarty. 2022.\nOLLA: Optimizing the Lifetime and Location of Arrays to Reduce the\nMemory Usage of Neural Networks. (2022). https://doi.org/10.48550/\narXiv.2210.12924\n[49] Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to se-\nquence learning with neural networks. Advances in neural information\nprocessing systems 27 (2014).\n[50] Rohan Taori, Ishaan Gulrajani, Tianyi Zhang, Yann Dubois, Xuechen\nLi, Carlos Guestrin, Percy Liang, and Tatsunori B. Hashimoto. 2023.\nStanford Alpaca: An Instruction-following LLaMA model. https://\ngithub.com/tatsu-lab/stanford_alpaca.\n[51] ShareGPT Team. 2023. https://sharegpt.com/\n[52] Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-\nAnne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric\nHambro, Faisal Azhar, et al. 2023. Llama: Open and efficient foundation\nlanguage models. arXiv preprint arXiv:2302.13971 (2023).\n[53] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion\nJones, Aidan N Gomez, Łukasz Kaiser, and Illia Polosukhin. 2017. At-\ntention is all you need. Advances in neural information processing\nsystems 30 (2017).\n[54] Jing Wang, Youyou Lu, Qing Wang, Minhui Xie, Keji Huang, and Jiwu\nShu. 2022. Pacman: An Efficient Compaction Approach for {Log-\nStructured}{Key-Value} Store on Persistent Memory. In 2022 USENIX\nAnnual Technical Conference (USENIX ATC 22). 773–788.\n[55] Linnan Wang, Jinmian Ye, Yiyang Zhao, Wei Wu, Ang Li, Shuai-\nwen Leon Song, Zenglin Xu, and Tim Kraska. 2018. Superneurons: Dy-\nnamic GPU memory management for training deep neural networks.\nIn Proceedings of the 23rd ACM SIGPLAN symposium on principles and\npractice of parallel programming. 41–53.\n[56] Xiaohui Wang, Ying Xiong, Yang Wei, Mingxuan Wang, and Lei Li.\n2021. LightSeq: A High Performance Inference Library for Transform-\ners. In Proceedings of the 2021 Conference of the North American Chapter\nof the Association for Computational Linguistics: Human Language Tech-\nnologies: Industry Papers. 113–120.\n[57] Yizhong Wang, Yeganeh Kordi, Swaroop Mishra, Alisa Liu, Noah A\nSmith, Daniel Khashabi, and Hannaneh Hajishirzi. 2022. Self-Instruct:\nAligning Language Model with Self Generated Instructions. arXiv\npreprint arXiv:2212.10560 (2022).\n[58] Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond,\nClement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, Rémi Louf,\nMorgan Funtowicz, et al. 2020. Transformers: State-of-the-art natural\nlanguage processing. In Proceedings of the 2020 conference on empirical\nmethods in natural language processing: system demonstrations. 38–45.\n[59] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad\nNorouzi, Wolfgang Macherey, Maxim Krikun, Yuan Cao, Qin Gao,\nKlaus Macherey, et al. 2016. Google’s neural machine translation\nsystem: Bridging the gap between human and machine translation.\narXiv preprint arXiv:1609.08144 (2016).\n[60] Gyeong-In Yu, Joo Seong Jeong, Geon-Woo Kim, Soojeong Kim, and\nByung-Gon Chun. 2022.\nOrca: A Distributed Serving System for\n{Transformer-Based} Generative Models. In 16th USENIX Symposium\non Operating Systems Design and Implementation (OSDI 22). 521–538.\n[61] Hong Zhang, Yupeng Tang, Anurag Khandelwal, and Ion Stoica. 2023.\nSHEPHERD: Serving DNNs in the Wild. In 20th USENIX Symposium on\nNetworked Systems Design and Implementation (NSDI 23). USENIX As-\nsociation, Boston, MA, 787–808. https://www.usenix.org/conference/\nnsdi23/presentation/zhang-hong"
    },
    {
      "page_no": 15,
      "bbox": [
        302.75701904296875,
        722.3079223632812,
        309.24267578125,
        729.28173828125
      ],
      "text": "15"
    },
    {
      "page_no": 16,
      "bbox": [
        53.99998474121094,
        75.98117065429688,
        295.26824951171875,
        133.78404235839844
      ],
      "text": "[62] Susan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen,\nShuohui Chen, Christopher Dewan, Mona Diab, Xian Li, Xi Victoria\nLin, et al. 2022. Opt: Open pre-trained transformer language models.\narXiv preprint arXiv:2205.01068 (2022).\n[63] Lianmin Zheng, Zhuohan Li, Hao Zhang, Yonghao Zhuang, Zhifeng\nChen, Yanping Huang, Yida Wang, Yuanzhong Xu, Danyang Zhuo,"
    },
    {
      "page_no": 16,
      "bbox": [
        317.9549865722656,
        75.92164611816406,
        558.9363403320312,
        133.76010131835938
      ],
      "text": "Eric P Xing, et al. 2022. Alpa: Automating Inter-and Intra-Operator\nParallelism for Distributed Deep Learning. In 16th USENIX Symposium\non Operating Systems Design and Implementation (OSDI 22). 559–578.\n[64] Zhe Zhou, Xuechao Wei, Jiejing Zhang, and Guangyu Sun. 2022. PetS:\nA Unified Framework for Parameter-Efficient Transformers Serving. In\n2022 USENIX Annual Technical Conference (USENIX ATC 22). 489–504."
    },
    {
      "page_no": 16,
      "bbox": [
        302.7569885253906,
        722.3079223632812,
        309.2426452636719,
        729.28173828125
      ],
      "text": "16"
    }
  ],
  "pictures": [
    {
      "page_no": 5,
      "bbox": [
        257.1064758300781,
        84.65423583984375,
        276.31719970703125,
        103.26885986328125
      ],
      "xref": 8,
      "image_path": "../data/parsed_documents/2309.06180/images/2309.06180_p5_blk1_crop.png"
    },
    {
      "page_no": 5,
      "bbox": [
        257.1064758300781,
        119.32867431640625,
        276.31719970703125,
        137.94329833984375
      ],
      "xref": 11,
      "image_path": "../data/parsed_documents/2309.06180/images/2309.06180_p5_blk2_crop.png"
    },
    {
      "page_no": 5,
      "bbox": [
        257.1064758300781,
        166.3868865966797,
        276.31719970703125,
        185.0015106201172
      ],
      "xref": 14,
      "image_path": "../data/parsed_documents/2309.06180/images/2309.06180_p5_blk3_crop.png"
    }
  ],
  "tables": [
    {
      "page_no": 1,
      "index": 1,
      "flavor": "lattice",
      "nrows": 1,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p1_table1_lattice.csv"
    },
    {
      "page_no": 2,
      "index": 1,
      "flavor": "lattice",
      "nrows": 1,
      "ncols": 9,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p2_table1_lattice.csv"
    },
    {
      "page_no": 3,
      "index": 1,
      "flavor": "stream",
      "nrows": 66,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p3_table1_stream.csv"
    },
    {
      "page_no": 4,
      "index": 1,
      "flavor": "stream",
      "nrows": 68,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p4_table1_stream.csv"
    },
    {
      "page_no": 5,
      "index": 1,
      "flavor": "lattice",
      "nrows": 6,
      "ncols": 4,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p5_table1_lattice.csv"
    },
    {
      "page_no": 6,
      "index": 1,
      "flavor": "lattice",
      "nrows": 9,
      "ncols": 4,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p6_table1_lattice.csv"
    },
    {
      "page_no": 6,
      "index": 2,
      "flavor": "lattice",
      "nrows": 9,
      "ncols": 4,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p6_table2_lattice.csv"
    },
    {
      "page_no": 7,
      "index": 1,
      "flavor": "lattice",
      "nrows": 9,
      "ncols": 4,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p7_table1_lattice.csv"
    },
    {
      "page_no": 8,
      "index": 1,
      "flavor": "stream",
      "nrows": 84,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p8_table1_stream.csv"
    },
    {
      "page_no": 8,
      "index": 2,
      "flavor": "stream",
      "nrows": 91,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p8_table2_stream.csv"
    },
    {
      "page_no": 9,
      "index": 1,
      "flavor": "lattice",
      "nrows": 1,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p9_table1_lattice.csv"
    },
    {
      "page_no": 9,
      "index": 2,
      "flavor": "lattice",
      "nrows": 1,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p9_table2_lattice.csv"
    },
    {
      "page_no": 10,
      "index": 1,
      "flavor": "lattice",
      "nrows": 1,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p10_table1_lattice.csv"
    },
    {
      "page_no": 10,
      "index": 2,
      "flavor": "lattice",
      "nrows": 1,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p10_table2_lattice.csv"
    },
    {
      "page_no": 11,
      "index": 1,
      "flavor": "stream",
      "nrows": 47,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p11_table1_stream.csv"
    },
    {
      "page_no": 12,
      "index": 1,
      "flavor": "stream",
      "nrows": 15,
      "ncols": 12,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p12_table1_stream.csv"
    },
    {
      "page_no": 12,
      "index": 2,
      "flavor": "stream",
      "nrows": 26,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p12_table2_stream.csv"
    },
    {
      "page_no": 13,
      "index": 1,
      "flavor": "stream",
      "nrows": 88,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p13_table1_stream.csv"
    },
    {
      "page_no": 13,
      "index": 2,
      "flavor": "stream",
      "nrows": 75,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p13_table2_stream.csv"
    },
    {
      "page_no": 14,
      "index": 1,
      "flavor": "stream",
      "nrows": 106,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p14_table1_stream.csv"
    },
    {
      "page_no": 15,
      "index": 1,
      "flavor": "stream",
      "nrows": 64,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p15_table1_stream.csv"
    },
    {
      "page_no": 16,
      "index": 1,
      "flavor": "stream",
      "nrows": 6,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2309.06180/2309.06180_p16_table1_stream.csv"
    }
  ]
}