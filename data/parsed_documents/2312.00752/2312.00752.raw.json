{
  "title": null,
  "authors": [],
  "source_path": "../data/pdf/2312.00752.pdf",
  "page_count": 36,
  "processed_pages": [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36
  ],
  "counts": {
    "texts": 687,
    "pictures": 0,
    "tables": 40
  },
  "stats_per_page": [
    {
      "page": 1,
      "text_blocks": 12,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 2,
      "text_blocks": 14,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 3,
      "text_blocks": 29,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 4,
      "text_blocks": 14,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 5,
      "text_blocks": 14,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 6,
      "text_blocks": 23,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 7,
      "text_blocks": 16,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 8,
      "text_blocks": 24,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 9,
      "text_blocks": 12,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 10,
      "text_blocks": 18,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 11,
      "text_blocks": 41,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 0
    },
    {
      "page": 12,
      "text_blocks": 14,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 13,
      "text_blocks": 32,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 0
    },
    {
      "page": 14,
      "text_blocks": 41,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 0
    },
    {
      "page": 15,
      "text_blocks": 60,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 0
    },
    {
      "page": 16,
      "text_blocks": 23,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 17,
      "text_blocks": 17,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 18,
      "text_blocks": 2,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 19,
      "text_blocks": 2,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 20,
      "text_blocks": 2,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 21,
      "text_blocks": 2,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 22,
      "text_blocks": 2,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 23,
      "text_blocks": 2,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 24,
      "text_blocks": 13,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 25,
      "text_blocks": 18,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 26,
      "text_blocks": 15,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 27,
      "text_blocks": 24,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 28,
      "text_blocks": 18,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 29,
      "text_blocks": 17,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 30,
      "text_blocks": 26,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 2
    },
    {
      "page": 31,
      "text_blocks": 34,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 32,
      "text_blocks": 24,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 33,
      "text_blocks": 14,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 34,
      "text_blocks": 20,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    },
    {
      "page": 35,
      "text_blocks": 38,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 0
    },
    {
      "page": 36,
      "text_blocks": 10,
      "layout_blocks": 0,
      "xobjects_found": 0,
      "xobjects_exported": 0,
      "reused_exported": 0,
      "rasterized": 0,
      "tables_found": 1
    }
  ],
  "texts": [
    {
      "page_no": 1,
      "bbox": [
        75.68399810791016,
        107.52813720703125,
        557.921875,
        124.74353790283203
      ],
      "text": "Mamba: Linear-Time Sequence Modeling with Selective State Spaces"
    },
    {
      "page_no": 1,
      "bbox": [
        254.34600830078125,
        141.68829345703125,
        378.2580261230469,
        161.16546630859375
      ],
      "text": "Albert Gu∗1 and Tri Dao∗2"
    },
    {
      "page_no": 1,
      "bbox": [
        169.19801330566406,
        171.1271514892578,
        464.5669250488281,
        185.073486328125
      ],
      "text": "1Machine Learning Department, Carnegie Mellon University"
    },
    {
      "page_no": 1,
      "bbox": [
        179.93002319335938,
        191.38710021972656,
        453.98187255859375,
        221.729248046875
      ],
      "text": "2Department of Computer Science, Princeton University\nagu@cs.cmu.edu, tri@tridao.me"
    },
    {
      "page_no": 1,
      "bbox": [
        299.697021484375,
        254.2974090576172,
        333.90380859375,
        263.2637939453125
      ],
      "text": "Abstract"
    },
    {
      "page_no": 1,
      "bbox": [
        96.63800048828125,
        268.6331481933594,
        537.6796264648438,
        430.9743347167969
      ],
      "text": "Foundation models, now powering most of the exciting applications in deep learning, are almost universally based on the\nTransformer architecture and its core attention module. Many subquadratic-time architectures such as linear attention,\ngated convolution and recurrent models, and structured state space models (SSMs) have been developed to address\nTransformers’ computational inefficiency on long sequences, but they have not performed as well as attention on important\nmodalities such as language. We identify that a key weakness of such models is their inability to perform content-based\nreasoning, and make several improvements. First, simply letting the SSM parameters be functions of the input addresses\ntheir weakness with discrete modalities, allowing the model to selectively propagate or forget information along the\nsequence length dimension depending on the current token. Second, even though this change prevents the use of efficient\nconvolutions, we design a hardware-aware parallel algorithm in recurrent mode. We integrate these selective SSMs into a\nsimplified end-to-end neural network architecture without attention or even MLP blocks (Mamba). Mamba enjoys fast\ninference (5× higher throughput than Transformers) and linear scaling in sequence length, and its performance improves\non real data up to million-length sequences. As a general sequence model backbone, Mamba achieves state-of-the-art\nperformance across several modalities such as language, audio, and genomics. On language modeling, our Mamba-3B model\noutperforms Transformers of the same size and matches Transformers twice its size, both in pretraining and downstream\nevaluation."
    },
    {
      "page_no": 1,
      "bbox": [
        72.0,
        452.9876403808594,
        176.65553283691406,
        467.3338317871094
      ],
      "text": "1\nIntroduction"
    },
    {
      "page_no": 1,
      "bbox": [
        71.63099670410156,
        475.7030334472656,
        563.1327514648438,
        617.1627197265625
      ],
      "text": "Foundation models (FMs), or large models pretrained on massive data then adapted for downstream tasks, have emerged\nas an effective paradigm in modern machine learning. The backbone of these FMs are often sequence models, operating on\narbitrary sequences of inputs from a wide variety of domains such as language, images, speech, audio, time series, and\ngenomics (Brown et al. 2020; Dosovitskiy et al. 2020; Ismail Fawaz et al. 2019; Oord et al. 2016; Poli et al. 2023; Sutskever,\nVinyals, and Quoc V Le 2014). While this concept is agnostic to a particular choice of model architecture, modern FMs are\npredominantly based on a single type of sequence model: the Transformer (Vaswani et al. 2017) and its core attention\nlayer (Bahdanau, Cho, and Bengio 2015) The efficacy of self-attention is attributed to its ability to route information densely\nwithin a context window, allowing it to model complex data. However, this property brings fundamental drawbacks:\nan inability to model anything outside of a finite window, and quadratic scaling with respect to the window length.\nAn enormous body of research has appeared on more efficient variants of attention to overcome these drawbacks (Tay,\nDehghani, Bahri, et al. 2022), but often at the expense of the very properties that makes it effective. As of yet, none of these\nvariants have been shown to be empirically effective at scale across domains."
    },
    {
      "page_no": 1,
      "bbox": [
        72.0,
        625.034423828125,
        561.6026611328125,
        694.8718872070312
      ],
      "text": "Recently, structured state space sequence models (SSMs) (Gu, Goel, and Ré 2022; Gu, Johnson, Goel, et al. 2021) have\nemerged as a promising class of architectures for sequence modeling. These models can be interpreted as a combination of\nrecurrent neural networks (RNNs) and convolutional neural networks (CNNs), with inspiration from classical state space\nmodels (Kalman 1960). This class of models can be computed very efficiently as either a recurrence or convolution, with\nlinear or near-linear scaling in sequence length. Additionally, they have principled mechanisms for modeling long-range\ndependencies (Gu, Dao, et al. 2020) in certain data modalities, and have dominated benchmarks such as the Long Range"
    },
    {
      "page_no": 1,
      "bbox": [
        83.74199676513672,
        703.727294921875,
        174.02505493164062,
        712.8049926757812
      ],
      "text": "∗Alphabetical by first name."
    },
    {
      "page_no": 1,
      "bbox": [
        314.4840087890625,
        740.8311157226562,
        319.1166076660156,
        750.793701171875
      ],
      "text": "1"
    },
    {
      "page_no": 1,
      "bbox": [
        10.940000534057617,
        205.5999755859375,
        37.619998931884766,
        560.0
      ],
      "text": "arXiv:2312.00752v2  [cs.LG]  31 May 2024"
    },
    {
      "page_no": 2,
      "bbox": [
        71.6510009765625,
        72.999755859375,
        562.6915893554688,
        130.688720703125
      ],
      "text": "Arena (Tay, Dehghani, Abnar, et al. 2021). Many flavors of SSMs (Gu, Goel, and Ré 2022; Gu, Gupta, et al. 2022; Gupta, Gu,\nand Berant 2022; Y. Li et al. 2023; Ma et al. 2023; Orvieto et al. 2023; Smith, Warrington, and Linderman 2023) have been\nsuccessful in domains involving continuous signal data such as audio and vision (Goel et al. 2022; Nguyen, Goel, et al. 2022;\nSaon, Gupta, and Cui 2023). However, they have been less effective at modeling discrete and information-dense data such\nas text."
    },
    {
      "page_no": 2,
      "bbox": [
        71.52200317382812,
        138.56039428710938,
        561.5966796875,
        160.57672119140625
      ],
      "text": "We propose a new class of selective state space models, that improves on prior work on several axes to achieve the\nmodeling power of Transformers while scaling linearly in sequence length."
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        175.79336547851562,
        561.6044921875,
        233.67572021484375
      ],
      "text": "Selection Mechanism.\nFirst, we identify a key limitation of prior models: the ability to efficiently select data in an\ninput-dependent manner (i.e. focus on or ignore particular inputs). Building on intuition based on important synthetic\ntasks such as selective copy and induction heads, we design a simple selection mechanism by parameterizing the SSM\nparameters based on the input. This allows the model to filter out irrelevant information and remember relevant information\nindefinitely."
    },
    {
      "page_no": 2,
      "bbox": [
        71.63099670410156,
        248.89138793945312,
        561.6043090820312,
        320.4478759765625
      ],
      "text": "Hardware-aware Algorithm.\nThis simple change poses a technical challenge for the computation of the model; in\nfact, all prior SSMs models must be time- and input-invariant in order to be computationally efficient. We overcome this\nwith a hardware-aware algorithm that computes the model recurrently with a scan instead of convolution, but does not\nmaterialize the expanded state in order to avoid IO access between different levels of the GPU memory hierarchy. The\nresulting implementation is faster than previous methods both in theory (scaling linearly in sequence length, compared to\npseudo-linear for all convolution-based SSMs) and on modern hardware (up to 3× faster on A100 GPUs)."
    },
    {
      "page_no": 2,
      "bbox": [
        71.70099639892578,
        334.1287841796875,
        561.6027221679688,
        370.30828857421875
      ],
      "text": "Architecture.\nWe simplify prior deep sequence model architectures by combining the design of prior SSM architectures\n(Dao, Fu, Saab, et al. 2023) with the MLP block of Transformers into a single block, leading to a simple and homogenous\narchitecture design (Mamba) incorporating selective state spaces."
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        375.9268493652344,
        561.856689453125,
        445.6257019042969
      ],
      "text": "Selective SSMs, and by extension the Mamba architecture, are fully recurrent models with key properties that make them\nsuitable as the backbone of general foundation models operating on sequences. (i) High quality: selectivity brings strong\nperformance on dense modalities such as language and genomics. (ii) Fast training and inference: computation and memory\nscales linearly in sequence length during training, and unrolling the model autoregressively during inference requires only\nconstant time per step since it does not require a cache of previous elements. (iii) Long context: the quality and efficiency\ntogether yield performance improvements on real data up to sequence length 1M."
    },
    {
      "page_no": 2,
      "bbox": [
        71.52200317382812,
        453.5565185546875,
        563.283447265625,
        475.5137023925781
      ],
      "text": "We empirically validate Mamba’s potential as a general sequence FM backbone, in both pretraining quality and domain-\nspecific task performance, on several types of modalities and settings:"
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        483.4841003417969,
        563.13330078125,
        507.8647155761719
      ],
      "text": "• Synthetics. On important synthetic tasks such as copying and induction heads that have been proposed as being key to\nlarge language models, Mamba not only solves them easily but can extrapolate solutions indefinitely long (>1M tokens)."
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        513.3671264648438,
        561.6008911132812,
        561.6627197265625
      ],
      "text": "• Audio and Genomics. Mamba out-performs prior state-of-the-art models such as SaShiMi, Hyena, and Transformers\non modeling audio waveforms and DNA sequences, both in pretraining quality and downstream metrics (e.g. reducing\nFID on a challenging speech generation dataset by more than half). In both settings, its performance improves with longer\ncontext up to million-length sequences."
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        567.1701049804688,
        562.696533203125,
        636.90869140625
      ],
      "text": "• Language Modeling. Mamba is the first linear-time sequence model that truly achieves Transformer-quality performance,\nboth in pretraining perplexity and downstream evaluations. With scaling laws up to 1B parameters, we show that Mamba\nexceeds the performance of a large range of baselines, including very strong modern Transformer training recipes based\non LLaMa (Touvron et al. 2023). Our Mamba language model has 5× generation throughput compared to Transformers\nof similar size, and Mamba-3B’s quality matches that of Transformers twice its size (e.g. 4 points higher avg. on common\nsense reasoning compared to Pythia-3B and even exceeding Pythia-7B)."
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        644.8781127929688,
        508.40277099609375,
        656.8804931640625
      ],
      "text": "Model code and pre-trained checkpoints are open-sourced at https://github.com/state-spaces/mamba."
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        676.2816162109375,
        215.80628967285156,
        690.6278076171875
      ],
      "text": "2\nState Space Models"
    },
    {
      "page_no": 2,
      "bbox": [
        72.0,
        699.0877685546875,
        561.6024780273438,
        720.9057006835938
      ],
      "text": "Structured state space sequence models (S4) are a recent class of sequence models for deep learning that are broadly related\nto RNNs, and CNNs, and classical state space models. They are inspired by a particular continuous system (1) that maps a"
    },
    {
      "page_no": 2,
      "bbox": [
        314.4840087890625,
        740.8311157226562,
        319.1166076660156,
        750.793701171875
      ],
      "text": "2"
    },
    {
      "page_no": 3,
      "bbox": [
        195.6700439453125,
        238.0294647216797,
        209.0059356689453,
        244.72640991210938
      ],
      "text": "Project"
    },
    {
      "page_no": 3,
      "bbox": [
        290.99407958984375,
        228.29380798339844,
        309.3330078125,
        234.99075317382812
      ],
      "text": "Discretize"
    },
    {
      "page_no": 3,
      "bbox": [
        137.29547119140625,
        195.6990203857422,
        144.7238311767578,
        207.35523986816406
      ],
      "text": "𝑥!"
    },
    {
      "page_no": 3,
      "bbox": [
        87.4502944946289,
        171.24185180664062,
        536.9456176757812,
        187.8441162109375
      ],
      "text": "ℎ!\"#\nℎ!"
    },
    {
      "page_no": 3,
      "bbox": [
        478.3519287109375,
        193.30935668945312,
        488.38751220703125,
        208.84954833984375
      ],
      "text": "𝑦!"
    },
    {
      "page_no": 3,
      "bbox": [
        314.6421203613281,
        104.9803695678711,
        322.1120300292969,
        118.81090545654297
      ],
      "text": "𝐴"
    },
    {
      "page_no": 3,
      "bbox": [
        225.46475219726562,
        199.26876831054688,
        410.0265197753906,
        214.80892944335938
      ],
      "text": "𝐶!\n𝐵!"
    },
    {
      "page_no": 3,
      "bbox": [
        225.69964599609375,
        246.6066436767578,
        282.5226745605469,
        255.9823760986328
      ],
      "text": "Selection Mechanism"
    },
    {
      "page_no": 3,
      "bbox": [
        525.6399536132812,
        220.3980712890625,
        538.8096313476562,
        235.33792114257812
      ],
      "text": "GPU \nSRAM"
    },
    {
      "page_no": 3,
      "bbox": [
        521.9039916992188,
        241.87554931640625,
        543.6481323242188,
        249.91189575195312
      ],
      "text": "GPU HBM"
    },
    {
      "page_no": 3,
      "bbox": [
        325.33587646484375,
        217.55999755859375,
        336.1594543457031,
        233.10015869140625
      ],
      "text": "∆!"
    },
    {
      "page_no": 3,
      "bbox": [
        236.03094482421875,
        71.005859375,
        399.3021240234375,
        87.07854461669922
      ],
      "text": "Selective State Space Model"
    },
    {
      "page_no": 3,
      "bbox": [
        240.45191955566406,
        86.07844543457031,
        395.2160339355469,
        98.1329574584961
      ],
      "text": "with Hardware-aware State Expansion"
    },
    {
      "page_no": 3,
      "bbox": [
        72.0,
        264.0611267089844,
        561.7730102539062,
        316.95233154296875
      ],
      "text": "Figure 1: (Overview.) Structured SSMs independently map each channel (e.g. 𝐷= 5) of an input 𝑥to output 𝑦through a higher\ndimensional latent state ℎ(e.g. 𝑁= 4). Prior SSMs avoid materializing this large effective state (𝐷𝑁, times batch size 𝐵and sequence\nlength 𝐿) through clever alternate computation paths requiring time-invariance: the (Δ, 𝑨, 𝑩, 𝑪) parameters are constant across time. Our\nselection mechanism adds back input-dependent dynamics, which also requires a careful hardware-aware algorithm to only materialize\nthe expanded states in more efficient levels of the GPU memory hierarchy."
    },
    {
      "page_no": 3,
      "bbox": [
        71.77100372314453,
        337.81268310546875,
        480.0447998046875,
        350.2848815917969
      ],
      "text": "1-dimensional function or sequence 𝑥(𝑡) ∈R ↦→𝑦(𝑡) ∈R through an implicit latent state ℎ(𝑡) ∈R𝑁."
    },
    {
      "page_no": 3,
      "bbox": [
        72.0,
        356.59576416015625,
        561.6015625,
        378.4537048339844
      ],
      "text": "Concretely, S4 models are defined with four parameters (Δ, 𝑨, 𝑩, 𝑪), which define a sequence-to-sequence transformation\nin two stages."
    },
    {
      "page_no": 3,
      "bbox": [
        100.50399780273438,
        408.16021728515625,
        219.47921752929688,
        420.74371337890625
      ],
      "text": "ℎ′(𝑡) = 𝑨ℎ(𝑡) + 𝑩𝑥(𝑡)\n(1a)"
    },
    {
      "page_no": 3,
      "bbox": [
        103.52398681640625,
        423.2861022949219,
        219.47886657714844,
        435.6877136230469
      ],
      "text": "𝑦(𝑡) = 𝑪ℎ(𝑡)\n(1b)"
    },
    {
      "page_no": 3,
      "bbox": [
        257.08697509765625,
        408.3420715332031,
        366.3611755371094,
        421.5178527832031
      ],
      "text": "ℎ𝑡= 𝑨ℎ𝑡−1 + 𝑩𝑥𝑡\n(2a)"
    },
    {
      "page_no": 3,
      "bbox": [
        257.2669677734375,
        423.28607177734375,
        366.3608093261719,
        435.68768310546875
      ],
      "text": "𝑦𝑡= 𝑪ℎ𝑡\n(2b)"
    },
    {
      "page_no": 3,
      "bbox": [
        398.385009765625,
        404.5746765136719,
        557.3043212890625,
        420.7436828613281
      ],
      "text": "𝑲= (𝑪𝑩, 𝑪𝑨𝑩, . . . , 𝑪𝑨\n𝑘𝑩, . . . )\n(3a)"
    },
    {
      "page_no": 3,
      "bbox": [
        400.3780517578125,
        425.0940856933594,
        557.304931640625,
        437.4956970214844
      ],
      "text": "𝑦= 𝑥∗𝑲\n(3b)"
    },
    {
      "page_no": 3,
      "bbox": [
        72.0,
        452.73077392578125,
        561.6021118164062,
        486.5036926269531
      ],
      "text": "Discretization.\nThe first stage transforms the “continuous parameters” (Δ, 𝑨, 𝑩) to “discrete parameters” (𝑨, 𝑩) through\nfixed formulas 𝑨= 𝑓𝐴(Δ, 𝑨) and 𝑩= 𝑓𝐵(Δ, 𝑨, 𝑩), where the pair (𝑓𝐴, 𝑓𝐵) is called a discretization rule. Various rules can\nbe used such as the zero-order hold (ZOH) defined in equation (4)."
    },
    {
      "page_no": 3,
      "bbox": [
        214.82699584960938,
        495.065185546875,
        562.1983642578125,
        508.9036865234375
      ],
      "text": "𝑨= exp(Δ𝑨)\n𝑩= (Δ𝑨)−1(exp(Δ𝑨) −𝑰) · Δ𝑩\n(4)"
    },
    {
      "page_no": 3,
      "bbox": [
        71.63099670410156,
        522.4242553710938,
        563.1326293945312,
        604.1326904296875
      ],
      "text": "Discretization has deep connections to continuous-time systems which can endow them with additional properties such\nas resolution invariance (Nguyen, Goel, et al. 2022) and automatically ensuring that the model is properly normalized\n(Gu, Johnson, Timalsina, et al. 2023; Orvieto et al. 2023). It also has connections to gating mechanisms of RNNs (Gu,\nGulcehre, et al. 2020; Tallec and Ollivier 2018) which we will revisit in Section 3.5. However, from a mechanical point\nof view discretization can simply be viewed as the first step of the computation graph in the forward pass of an SSM.\nAlternate flavors of SSMs can bypass the discretization step and parameterize (𝑨, 𝑩) directly instead (Zhang et al. 2023),\nwhich may be easier to reason about."
    },
    {
      "page_no": 3,
      "bbox": [
        72.0,
        619.7198486328125,
        561.5988159179688,
        643.9893188476562
      ],
      "text": "Computation.\nAfter the parameters have been transformed from (Δ, 𝑨, 𝑩, 𝑪) ↦→(𝑨, 𝑩, 𝑪), the model can be computed\nin two ways, either as a linear recurrence (2) or a global convolution (3)."
    },
    {
      "page_no": 3,
      "bbox": [
        72.0,
        649.568115234375,
        561.6016845703125,
        683.440673828125
      ],
      "text": "Commonly, the model uses the convolutional mode (3) for efficient parallelizable training (where the whole input sequence\nis seen ahead of time), and switched into recurrent mode (2) for efficient autoregressive inference (where the inputs are\nseen one timestep at a time)."
    },
    {
      "page_no": 3,
      "bbox": [
        72.0,
        698.9880981445312,
        561.604248046875,
        723.3446655273438
      ],
      "text": "Linear Time Invariance (LTI).\nAn important property of equations (1) to (3) is that the model’s dynamics are constant\nthrough time. In other words (Δ, 𝑨, 𝑩, 𝑪), and consequently (𝑨, 𝑩) as well, are fixed for all time-steps. This property is"
    },
    {
      "page_no": 3,
      "bbox": [
        314.4840087890625,
        740.8311157226562,
        319.1166076660156,
        750.793701171875
      ],
      "text": "3"
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        72.8063735961914,
        561.60400390625,
        106.77867889404297
      ],
      "text": "called linear time invariance (LTI), which is deeply connected to recurrence and convolutions. Informally, we think of\nLTI SSMs as being equivalent to any linear recurrence (2a) or convolution (3b), and use LTI as an umbrella term for these\nclasses of models."
    },
    {
      "page_no": 4,
      "bbox": [
        71.70099639892578,
        114.82879638671875,
        562.6943359375,
        160.57672119140625
      ],
      "text": "Thus far, all structured SSMs have been LTI (e.g. computed as convolutions) because of fundamental efficiency constraints,\ndiscussed in Section 3.3. However, a core insight of this work is that LTI models have fundamental limitations in modeling\ncertain types of data, and our technical contributions involve removing the LTI constraint while overcoming the efficiency\nbottlenecks."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        176.4057159423828,
        562.3031616210938,
        210.33270263671875
      ],
      "text": "Structure and Dimensions.\nFinally, we note that structured SSMs are so named because computing them efficiently\nalso requires imposing structure on the 𝑨matrix. The most popular form of structure is diagonal (Gu, Gupta, et al. 2022;\nGupta, Gu, and Berant 2022; Smith, Warrington, and Linderman 2023), which we also use."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        217.3641815185547,
        561.6033935546875,
        264.1307373046875
      ],
      "text": "In this case, the 𝑨∈R𝑁×𝑁, 𝑩∈R𝑁×1, 𝑪∈R1×𝑁matrices can all be represented by 𝑁numbers. To operate over an input\nsequence 𝑥of batch size 𝐵and length 𝐿with 𝐷channels, the SSM is applied independently to each channel. Note that in\nthis case, the total hidden state has dimension 𝐷𝑁per input, and computing it over the sequence length requires 𝑂(𝐵𝐿𝐷𝑁)\ntime and memory; this is the root of the fundamental efficiency bottleneck addressed in Section 3.3."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        280.1138000488281,
        562.6962890625,
        349.7527160644531
      ],
      "text": "General State Space Models.\nWe note that the term state space model has a very broad meaning which simply represents\nthe notion of any recurrent process with a latent state. It has been used to refer to many disparate concepts in different\ndisciplines, including Markov decision processes (MDP) (reinforcement learning (Hafner et al. 2020)), dynamic causal\nmodeling (DCM) (computational neuroscience (Friston, Harrison, and Penny 2003)), Kalman filters (controls (Kalman 1960)),\nhidden Markov models (HMM) and linear dynamical systems (LDS) (machine learning), and recurrent (and sometimes\nconvolutional) models at large (deep learning)."
    },
    {
      "page_no": 4,
      "bbox": [
        71.70099639892578,
        357.77679443359375,
        562.6962890625,
        415.5057067871094
      ],
      "text": "Throughout this entire paper we use the term “SSM” to refer exclusively to the class of structured SSMs or S4 models (Gu,\nGoel, and Ré 2022; Gu, Gupta, et al. 2022; Gupta, Gu, and Berant 2022; Hasani et al. 2023; Ma et al. 2023; Smith, Warrington,\nand Linderman 2023) and use these terms interchangeably. For convenience we may also include derivatives of such\nmodels, such as those focusing on either the linear-recurrence or global-convolution viewpoints (Y. Li et al. 2023; Orvieto\net al. 2023; Poli et al. 2023), and clarify nuances when necessary."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        431.31500244140625,
        561.7933959960938,
        477.2167053222656
      ],
      "text": "SSM Architectures.\nSSMs are standalone sequence transformations that can be incorporated into end-to-end neural\nnetwork architectures. (We also sometimes call SSM architectures SSNNs, which are to SSM layers as CNNs are to linear\nconvolution layers.) We discuss some of the most well-known SSM architectures, many of which will also serve as our\nprimary baselines."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        485.1573791503906,
        561.6021118164062,
        507.1047058105469
      ],
      "text": "• Linear attention (Katharopoulos et al. 2020) is an approximation of self-attention involving a recurrence which can be\nviewed as a degenerate linear SSM."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        514.9764404296875,
        561.6045532226562,
        548.9476928710938
      ],
      "text": "• H3 (Dao, Fu, Saab, et al. 2023) generalized this recurrence to use S4; it can be viewed as an architecture with an SSM\nsandwiched by two gated connections (Figure 3). H3 also inserts a standard local convolution, which they frame as a\nshift-SSM, before the main SSM layer."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        556.843994140625,
        561.5985717773438,
        578.835693359375
      ],
      "text": "• Hyena (Poli et al. 2023) uses the same architecture as H3 but replaces the S4 layer with an MLP-parameterized global\nconvolution (Romero et al. 2021)."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        586.7368774414062,
        561.5994873046875,
        608.7236938476562
      ],
      "text": "• RetNet (Y. Sun et al. 2023) adds an additional gate to the architecture and uses a simpler SSM, allowing an alternative\nparallelizable computation path, using a variant of multi-head attention (MHA) instead of convolutions."
    },
    {
      "page_no": 4,
      "bbox": [
        72.0,
        616.694091796875,
        563.2789306640625,
        650.5667114257812
      ],
      "text": "• RWKV (B. Peng et al. 2023) is a recent RNN designed for language modeling based on another linear attention approxi-\nmation, the attention-free Transformer (S. Zhai et al. 2021). Its main “WKV” mechanism involves LTI recurrences and\ncan be viewed as the ratio of two SSMs."
    },
    {
      "page_no": 4,
      "bbox": [
        71.63099670410156,
        658.6367797851562,
        561.6028442382812,
        692.40966796875
      ],
      "text": "Other closely related SSMs and architectures are discussed further in an extended related work (Appendix B). We highlight\nin particular S5 (Smith, Warrington, and Linderman 2023), QRNN (Bradbury et al. 2016), and SRU (Lei et al. 2017), which\nwe view as the most closely related methods to our core selective SSM."
    },
    {
      "page_no": 4,
      "bbox": [
        314.4840087890625,
        740.8311157226562,
        319.1166076660156,
        750.793701171875
      ],
      "text": "4"
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        72.26166534423828,
        276.2037658691406,
        86.60786437988281
      ],
      "text": "3\nSelective State Space Models"
    },
    {
      "page_no": 5,
      "bbox": [
        71.52200317382812,
        94.9830093383789,
        561.7881469726562,
        152.75027465820312
      ],
      "text": "We motivate our selection mechanism using intuition from synthetic tasks (Section 3.1), then explain how to incorporate\nthis mechanism into state space models (Section 3.2). The resulting time-varying SSMs cannot use convolutions, presenting\na technical challenge of how to compute them efficiently. We overcome this with a hardware-aware algorithm that exploits\nthe memory hierarchy on modern hardware (Section 3.3). We then describe a simple SSM architecture without attention or\neven MLP blocks (Section 3.4). Finally, we discuss some additional properties of selection mechanisms (Section 3.5)."
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        171.5121612548828,
        365.0458984375,
        183.4673614501953
      ],
      "text": "3.1\nMotivation: Selection as a Means of Compression"
    },
    {
      "page_no": 5,
      "bbox": [
        71.52200317382812,
        188.89437866210938,
        562.6992797851562,
        270.68670654296875
      ],
      "text": "We argue that a fundamental problem of sequence modeling is compressing context into a smaller state. In fact, we can\nview the tradeoffs of popular sequence models from this point of view. For example, attention is both effective and\ninefficient because it explicitly does not compress context at all. This can be seen from the fact that autoregressive inference\nrequires explicitly storing the entire context (i.e. the KV cache), which directly causes the slow linear-time inference and\nquadratic-time training of Transformers. On the other hand, recurrent models are efficient because they have a finite state,\nimplying constant-time inference and linear-time training. However, their effectiveness is limited by how well this state\nhas compressed the context."
    },
    {
      "page_no": 5,
      "bbox": [
        71.70099639892578,
        278.6560974121094,
        451.1165771484375,
        288.61871337890625
      ],
      "text": "To understand this principle, we focus on two running examples of synthetic tasks (Figure 2)."
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        296.4903869628906,
        561.6021728515625,
        332.9247131347656
      ],
      "text": "• The Selective Copying task modifies the popular Copying task (Arjovsky, Shah, and Bengio 2016) by varying the\nposition of the tokens to memorize. It requires content-aware reasoning to be able to memorize the relevant tokens\n(colored) and filter out the irrelevant ones (white)."
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        338.3334045410156,
        561.6021728515625,
        374.7677001953125
      ],
      "text": "• The Induction Heads task is a well-known mechanism hypothesized to explain the majority of in-context learning\nabilities of LLMs (Olsson et al. 2022). It requires context-aware reasoning to know when to produce the correct output in\nthe appropriate context (black)."
    },
    {
      "page_no": 5,
      "bbox": [
        71.63099670410156,
        380.1763916015625,
        561.8624267578125,
        450.0137023925781
      ],
      "text": "These tasks reveal the failure mode of LTI models. From the recurrent view, their constant dynamics (e.g. the (𝑨, 𝑩)\ntransitions in (2)) cannot let them select the correct information from their context, or affect the hidden state passed\nalong the sequence in an input-dependent way. From the convolutional view, it is known that global convolutions can\nsolve the vanilla Copying task (Romero et al. 2021) because it only requires time-awareness, but that they have difficulty\nwith the Selective Copying task because of lack of content-awareness (Figure 2). More concretely, the spacing between\ninputs-to-outputs is varying and cannot be modeled by static convolution kernels."
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        457.8854064941406,
        562.776123046875,
        515.7662963867188
      ],
      "text": "In summary, the efficiency vs. effectiveness tradeoff of sequence models is characterized by how well they compress\ntheir state: efficient models must have a small state, while effective models must have a state that contains all necessary\ninformation from the context. In turn, we propose that a fundamental principle for building sequence models is selectivity:\nor the context-aware ability to focus on or filter out inputs into a sequential state. In particular, a selection mechanism\ncontrols how information propagates or interacts along the sequence dimension (see Section 3.5 for more discussion)."
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        534.5291748046875,
        267.515380859375,
        546.484375
      ],
      "text": "3.2\nImproving SSMs with Selection"
    },
    {
      "page_no": 5,
      "bbox": [
        72.0,
        552.1087646484375,
        561.6024780273438,
        573.9266967773438
      ],
      "text": "One method of incorporating a selection mechanism into models is by letting their parameters that affect interactions along\nthe sequence (e.g. the recurrent dynamics of an RNN or the convolution kernel of a CNN) be input-dependent."
    },
    {
      "page_no": 5,
      "bbox": [
        71.6309814453125,
        581.8426513671875,
        562.1983642578125,
        639.6796875
      ],
      "text": "Algorithms 1 and 2 illustrates the main selection mechanism that we use. The main difference is simply making several\nparameters Δ, 𝑩, 𝑪functions of the input, along with the associated changes to tensor shapes throughout. In particular, we\nhighlight that these parameters now have a length dimension 𝐿, meaning that the model has changed from time-invariant\nto time-varying. (Note that shape annotations were described in Section 2.) This loses the equivalence to convolutions (3)\nwith implications for its efficiency, discussed next."
    },
    {
      "page_no": 5,
      "bbox": [
        71.52200317382812,
        647.5513916015625,
        562.6956176757812,
        681.522705078125
      ],
      "text": "We specifically choose 𝑠𝐵(𝑥) = Linear𝑁(𝑥), 𝑠𝐶(𝑥) = Linear𝑁(𝑥), 𝑠Δ(𝑥) = Broadcast𝐷(Linear1(𝑥)), and 𝜏Δ = softplus,\nwhere Linear𝑑is a parameterized projection to dimension 𝑑. The choice of 𝑠Δ and 𝜏Δ is due to a connection to RNN gating\nmechanisms explained in Section 3.5."
    },
    {
      "page_no": 5,
      "bbox": [
        314.4840087890625,
        740.8311157226562,
        319.1166076660156,
        750.793701171875
      ],
      "text": "5"
    },
    {
      "page_no": 6,
      "bbox": [
        73.03734588623047,
        124.2787094116211,
        89.5152587890625,
        133.21011352539062
      ],
      "text": "Input"
    },
    {
      "page_no": 6,
      "bbox": [
        73.03734588623047,
        95.81206512451172,
        95.60071563720703,
        104.74347686767578
      ],
      "text": "Output"
    },
    {
      "page_no": 6,
      "bbox": [
        523.2567138671875,
        173.70155334472656,
        527.078369140625,
        182.09921264648438
      ],
      "text": "?"
    },
    {
      "page_no": 6,
      "bbox": [
        323.4443054199219,
        95.90694427490234,
        346.0076904296875,
        104.8383560180664
      ],
      "text": "Output"
    },
    {
      "page_no": 6,
      "bbox": [
        180.76905822753906,
        74.07068634033203,
        490.21990966796875,
        86.54856872558594
      ],
      "text": "Copying\nSelective Copying"
    },
    {
      "page_no": 6,
      "bbox": [
        323.4443054199219,
        124.37358856201172,
        339.9222106933594,
        133.30499267578125
      ],
      "text": "Input"
    },
    {
      "page_no": 6,
      "bbox": [
        73.21691131591797,
        152.63861083984375,
        483.53753662109375,
        165.94674682617188
      ],
      "text": "Induction Heads\nSolution"
    },
    {
      "page_no": 6,
      "bbox": [
        106.37857055664062,
        171.16563415527344,
        307.2831115722656,
        177.11990356445312
      ],
      "text": "Perfectly solved by LTI (e.g. convolutional) models that do not need to look at the actual inputs"
    },
    {
      "page_no": 6,
      "bbox": [
        71.73100280761719,
        200.46163940429688,
        562.9793701171875,
        253.32630920410156
      ],
      "text": "Figure 2: (Left) The standard version of the Copying task involves constant spacing between input and output elements and is easily\nsolved by time-invariant models such as linear recurrences and global convolutions. (Right Top) The Selective Copying task has random\nspacing in between inputs and requires time-varying models that can selectively remember or ignore inputs depending on their content.\n(Right Bottom) The Induction Heads task is an example of associative recall that requires retrieving an answer based on context, a key\nability for LLMs."
    },
    {
      "page_no": 6,
      "bbox": [
        71.63099670410156,
        280.4660949707031,
        165.16018676757812,
        292.8203125
      ],
      "text": "Algorithm 1 SSM (S4)"
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        296.3499450683594,
        148.68983459472656,
        318.4267883300781
      ],
      "text": "Input: 𝑥: (B, L, D)\nOutput: 𝑦: (B, L, D)"
    },
    {
      "page_no": 6,
      "bbox": [
        77.17298889160156,
        318.2669677734375,
        312.1224365234375,
        417.0577392578125
      ],
      "text": "1: 𝑨: (D, N) ←Parameter\n⊲Represents structured 𝑁× 𝑁matrix\n2: 𝑩: (D, N) ←Parameter\n3: 𝑪: (D, N) ←Parameter\n4: Δ : (D) ←𝜏Δ(Parameter)\n5: 𝑨, 𝑩: (D, N) ←discretize(Δ, 𝑨, 𝑩)\n6: 𝑦←SSM(𝑨, 𝑩, 𝑪)(𝑥)\n⊲Time-invariant: recurrence or convolution\n7: return 𝑦"
    },
    {
      "page_no": 6,
      "bbox": [
        314.02899169921875,
        280.4660949707031,
        454.99005126953125,
        292.8203125
      ],
      "text": "Algorithm 2 SSM + Selection (S6)"
    },
    {
      "page_no": 6,
      "bbox": [
        314.3970031738281,
        296.3499450683594,
        391.0877990722656,
        318.4267883300781
      ],
      "text": "Input: 𝑥: (B, L, D)\nOutput: 𝑦: (B, L, D)"
    },
    {
      "page_no": 6,
      "bbox": [
        319.5699462890625,
        318.2669677734375,
        554.5371704101562,
        417.0577392578125
      ],
      "text": "1: 𝑨: (D, N) ←Parameter\n⊲Represents structured 𝑁× 𝑁matrix\n2: 𝑩: (B, L, N) ←𝑠𝐵(𝑥)\n3: 𝑪: (B, L, N) ←𝑠𝐶(𝑥)\n4: Δ : (B, L, D) ←𝜏Δ(Parameter+𝑠Δ(𝑥))\n5: 𝑨, 𝑩: (B, L, D, N) ←discretize(Δ, 𝑨, 𝑩)\n6: 𝑦←SSM(𝑨, 𝑩, 𝑪)(𝑥)\n⊲Time-varying: recurrence (scan) only\n7: return 𝑦"
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        441.9981994628906,
        331.3442077636719,
        453.9533996582031
      ],
      "text": "3.3\nEfficient Implementation of Selective SSMs"
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        459.3951416015625,
        562.69091796875,
        529.2166748046875
      ],
      "text": "Hardware-friendly primitives such as convolutions (Krizhevsky, Sutskever, and Hinton 2012) and attention (Bahdanau,\nCho, and Bengio 2015; Vaswani et al. 2017) enjoy widespread application. Here we aim to make selective SSMs efficient on\nmodern hardware (GPUs) as well. The selection mechanism is quite natural, and earlier works attempted to incorporate\nspecial cases of selection, such as letting Δ vary over time in recurrent SSMs (Gu, Dao, et al. 2020). However, as previously\nmentioned a core limitation in the usage of SSMs is their computational efficiency, which was why S4 and all derivatives\nused LTI (non-selective) models, most commonly in the form of global convolutions."
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        547.4917602539062,
        224.7864227294922,
        557.454345703125
      ],
      "text": "3.3.1\nMotivation of Prior Models"
    },
    {
      "page_no": 6,
      "bbox": [
        71.52200317382812,
        563.4661254882812,
        482.0708312988281,
        573.4287109375
      ],
      "text": "We first revisit this motivation and overview our approach to overcome limitations of prior methods."
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        581.3991088867188,
        561.600341796875,
        617.7347412109375
      ],
      "text": "• At a high level, recurrent models such as SSMs always balance a tradeoff between expressivity and speed: as discussed in\nSection 3.1, models with larger hidden state dimension should be more effective but slower. Thus we want to maximize\nhidden state dimension without paying speed and memory costs."
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        623.2421264648438,
        562.2012939453125,
        683.0654907226562
      ],
      "text": "• Note that the recurrent mode is more flexible than the convolution mode, since the latter (3) is derived from expanding\nthe former (2) (Gu, Goel, and Ré 2022; Gu, Johnson, Goel, et al. 2021). However, this would require computing and\nmaterializing the latent state ℎwith shape (B, L, D, N), which is much larger (by a factor of 𝑁, the SSM state dimension)\nthan the input 𝑥and output 𝑦of shape (B, L, D). Thus the more efficient convolution mode was introduced which could\nbypass the state computation and materializes a convolution kernel (3a) of size only (B, L, D)."
    },
    {
      "page_no": 6,
      "bbox": [
        72.0,
        688.9951171875,
        561.85986328125,
        712.6328735351562
      ],
      "text": "• Prior LTI state space models leverage the dual recurrent-convolutional forms to increase the effective state dimension by\na factor of 𝑁(≈10 −100), much larger than traditional RNNs, without efficiency penalties."
    },
    {
      "page_no": 6,
      "bbox": [
        314.4839782714844,
        740.8311157226562,
        319.1165771484375,
        750.793701171875
      ],
      "text": "6"
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        75.29667663574219,
        378.8779602050781,
        85.25927734375
      ],
      "text": "3.3.2\nOverview of Selective Scan: Hardware-Aware State Expansion"
    },
    {
      "page_no": 7,
      "bbox": [
        71.70099639892578,
        91.21273803710938,
        561.604248046875,
        125.14470672607422
      ],
      "text": "The selection mechanism is designed to overcome the limitations of LTI models; at the same time, we therefore need to\nrevisit the computation problem of SSMs. We address this with three classical techniques: kernel fusion, parallel scan, and\nrecomputation. We make two main observations:"
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        133.11509704589844,
        562.6957397460938,
        166.9876708984375
      ],
      "text": "• The naive recurrent computation uses 𝑂(𝐵𝐿𝐷𝑁) FLOPs while the convolutional computation uses 𝑂(𝐵𝐿𝐷log(𝐿)) FLOPs,\nand the former has a lower constant factor. Thus for long sequences and not-too-large state dimension 𝑁, the recurrent\nmode can actually use fewer FLOPs."
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        174.9580535888672,
        561.6036987304688,
        197.0765838623047
      ],
      "text": "• The two challenges are the sequential nature of recurrence, and the large memory usage. To address the latter, just like\nthe convolutional mode, we can attempt to not actually materialize the full state ℎ."
    },
    {
      "page_no": 7,
      "bbox": [
        71.70099639892578,
        204.74740600585938,
        561.8623657226562,
        262.62872314453125
      ],
      "text": "The main idea is to leverage properties of modern accelerators (GPUs) to materialize the state ℎonly in more efficient\nlevels of the memory hierarchy. In particular, most operations (except matrix multiplication) are bounded by memory\nbandwidth (Dao, Fu, Ermon, et al. 2022; Ivanov et al. 2021; Williams, Waterman, and Patterson 2009). This includes our\nscan operation, and we use kernel fusion to reduce the amount of memory IOs, leading to a significant speedup compared\nto a standard implementation."
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        270.62890625,
        562.692138671875,
        306.51153564453125
      ],
      "text": "Concretely, instead of preparing the scan input (𝑨, 𝑩) of size (B, L, D, N) in GPU HBM (high-bandwidth memory), we load\nthe SSM parameters (Δ, 𝑨, 𝑩, 𝑪) directly from slow HBM to fast SRAM, perform the discretization and recurrence in SRAM,\nand then write the final outputs of size (B, L, D) back to HBM."
    },
    {
      "page_no": 7,
      "bbox": [
        71.70099639892578,
        312.5417785644531,
        561.5962524414062,
        334.3597106933594
      ],
      "text": "To avoid the sequential recurrence, we observe that despite not being linear it can still be parallelized with a work-efficient\nparallel scan algorithm (Blelloch 1990; Martin and Cundy 2018; Smith, Warrington, and Linderman 2023)."
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        342.3053283691406,
        561.857421875,
        388.15869140625
      ],
      "text": "Finally, we must also avoid saving the intermediate states, which are necessary for backpropagation. We carefully apply\nthe classic technique of recomputation to reduce the memory requirements: the intermediate states are not stored but\nrecomputed in the backward pass when the inputs are loaded from HBM to SRAM. As a result, the fused selective scan\nlayer has the same memory requirements as an optimized transformer implementation with FlashAttention."
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        396.2177734375,
        561.6036987304688,
        418.04571533203125
      ],
      "text": "Details of the fused kernel and recomputation are in Appendix D. The full Selective SSM layer and algorithm is illustrated\nin Figure 1."
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        436.8081970214844,
        263.97662353515625,
        448.7633972167969
      ],
      "text": "3.4\nA Simplified SSM Architecture"
    },
    {
      "page_no": 7,
      "bbox": [
        71.6510009765625,
        454.2583923339844,
        561.6039428710938,
        512.0706787109375
      ],
      "text": "As with structured SSMs, selective SSMs are standalone sequence transformations that can be flexibly incorporated into\nneural networks. The H3 architecture is the basis for the most well-known SSM architectures (Section 2), which are\ngenerally comprised of a block inspired by linear attention interleaved with an MLP (multi-layer perceptron) block. We\nsimplify this architecture by combining these two components into one, which is stacked homogenously (Figure 3). This is\ninspired by the gated attention unit (GAU) (Hua et al. 2022), which did something similar for attention."
    },
    {
      "page_no": 7,
      "bbox": [
        71.70099639892578,
        519.9965209960938,
        561.6028442382812,
        579.8243408203125
      ],
      "text": "This architecture involves expanding the model dimension 𝐷by a controllable expansion factor 𝐸. For each block, most\nof the parameters (3𝐸𝐷2) are in the linear projections (2𝐸𝐷2 for input projections, 𝐸𝐷2 for output projection) while\nthe inner SSM contributes less.\nThe number of SSM parameters (projections for Δ, 𝑩, 𝑪, and the matrix 𝑨) are much\nsmaller in comparison. We repeat this block, interleaved with standard normalization and residual connections, to form\nthe Mamba architecture. We always fix to 𝐸= 2 in our experiments and use two stacks of the block to match the 12𝐷2"
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        579.916748046875,
        563.1314697265625,
        637.6007080078125
      ],
      "text": "parameters of a Transformer’s interleaved MHA (multi-head attention) and MLP blocks. We use the SiLU / Swish activation\nfunction (Hendrycks and Gimpel 2016; Ramachandran, Zoph, and Quoc V Le 2017), motivated so that the Gated MLP\nbecomes the popular “SwiGLU” variant (Chowdhery et al. 2023; Dauphin et al. 2017; Shazeer 2020; Touvron et al. 2023).\nFinally, we additionally use an optional normalization layer (we choose LayerNorm (J. L. Ba, Kiros, and Hinton 2016)),\nmotivated by RetNet’s usage of a normalization layer in a similar location (Y. Sun et al. 2023)."
    },
    {
      "page_no": 7,
      "bbox": [
        72.0,
        656.3621826171875,
        292.45391845703125,
        668.3173828125
      ],
      "text": "3.5\nProperties of Selection Mechanisms"
    },
    {
      "page_no": 7,
      "bbox": [
        71.70099639892578,
        673.8321533203125,
        561.7930297851562,
        698.1986694335938
      ],
      "text": "The selection mechanism is a broader concept that can be applied in different ways, such as to more traditional RNNs or\nCNNs, to different parameters (e.g. 𝑨in Algorithm 2), or using different transformations 𝑠(𝑥)."
    },
    {
      "page_no": 7,
      "bbox": [
        314.4839782714844,
        740.8311157226562,
        319.1165771484375,
        750.793701171875
      ],
      "text": "7"
    },
    {
      "page_no": 8,
      "bbox": [
        144.99609375,
        231.75982666015625,
        410.6659851074219,
        245.99681091308594
      ],
      "text": "H3\nGated MLP\nMamba"
    },
    {
      "page_no": 8,
      "bbox": [
        493.0432434082031,
        120.77701568603516,
        522.25927734375,
        136.93692016601562
      ],
      "text": "Linear \nprojection"
    },
    {
      "page_no": 8,
      "bbox": [
        493.35540771484375,
        152.4558563232422,
        536.8836059570312,
        168.61578369140625
      ],
      "text": "Sequence \ntransformation"
    },
    {
      "page_no": 8,
      "bbox": [
        493.35528564453125,
        178.2180633544922,
        534.4169311523438,
        201.52725219726562
      ],
      "text": "Nonlinearity \n(activation or \nmultiplication)"
    },
    {
      "page_no": 8,
      "bbox": [
        148.74893188476562,
        113.14391326904297,
        367.8551330566406,
        124.74613952636719
      ],
      "text": "X\nX\nX"
    },
    {
      "page_no": 8,
      "bbox": [
        413.6937255859375,
        150.01522827148438,
        419.1019287109375,
        160.8501434326172
      ],
      "text": "!"
    },
    {
      "page_no": 8,
      "bbox": [
        469.8678283691406,
        184.3905029296875,
        475.82147216796875,
        195.9927215576172
      ],
      "text": "X"
    },
    {
      "page_no": 8,
      "bbox": [
        143.7816925048828,
        169.73541259765625,
        159.4501953125,
        180.9277801513672
      ],
      "text": "Conv"
    },
    {
      "page_no": 8,
      "bbox": [
        145.00143432617188,
        132.01666259765625,
        158.24984741210938,
        143.2090301513672
      ],
      "text": "SSM"
    },
    {
      "page_no": 8,
      "bbox": [
        148.74893188476562,
        150.01522827148438,
        367.7705993652344,
        162.34165954589844
      ],
      "text": "X\n!\n!"
    },
    {
      "page_no": 8,
      "bbox": [
        356.99127197265625,
        169.73541259765625,
        372.6597595214844,
        180.9277801513672
      ],
      "text": "Conv"
    },
    {
      "page_no": 8,
      "bbox": [
        358.21099853515625,
        132.01666259765625,
        371.45941162109375,
        143.2090301513672
      ],
      "text": "SSM"
    },
    {
      "page_no": 8,
      "bbox": [
        206.81956481933594,
        232.73562622070312,
        215.75621032714844,
        244.77439880371094
      ],
      "text": "⨂"
    },
    {
      "page_no": 8,
      "bbox": [
        72.0,
        254.09207153320312,
        562.2400512695312,
        306.98333740234375
      ],
      "text": "Figure 3: (Architecture.) Our simplified block design combines the H3 block, which is the basis of most SSM architectures, with\nthe ubiquitous MLP block of modern neural networks. Instead of interleaving these two blocks, we simply repeat the Mamba block\nhomogenously. Compared to the H3 block, Mamba replaces the first multiplicative gate with an activation function. Compared to\nthe MLP block, Mamba adds an SSM to the main branch. For 𝜎we use the SiLU / Swish activation (Hendrycks and Gimpel 2016;\nRamachandran, Zoph, and Quoc V Le 2017)."
    },
    {
      "page_no": 8,
      "bbox": [
        72.0,
        332.59271240234375,
        258.3504333496094,
        342.5552978515625
      ],
      "text": "3.5.1\nConnection to Gating Mechanisms"
    },
    {
      "page_no": 8,
      "bbox": [
        71.52200317382812,
        348.4683837890625,
        561.603759765625,
        420.7460632324219
      ],
      "text": "We highlight the most important connection: the classical gating mechanism of RNNs is an instance of our selection\nmechanism for SSMs. We note that the connection between RNN gating and the discretization of continuous-time systems\nis well established (Funahashi and Nakamura 1993; Tallec and Ollivier 2018). In fact, Theorem 1 is an improvement of\nGu, Johnson, Goel, et al. (2021, Lemma 3.1) generalizing to the ZOH discretization and input-dependent gates (proof in\nAppendix C). More broadly, Δ in SSMs can be seen to play a generalized role of the RNN gating mechanism. In line with\nprior work, we adopt the view that discretization of SSMs is the principled foundation of heuristic gating mechanisms."
    },
    {
      "page_no": 8,
      "bbox": [
        71.6709976196289,
        426.3497619628906,
        562.2232055664062,
        462.444091796875
      ],
      "text": "Theorem 1. When 𝑁= 1, 𝑨= −1, 𝑩= 1,𝑠Δ = Linear(𝑥), and 𝜏Δ = softplus, then the selective SSM recurrence (Algorithm 2)\ntakes the form\n𝑔𝑡= 𝜎(Linear(𝑥𝑡))"
    },
    {
      "page_no": 8,
      "bbox": [
        267.4229736328125,
        457.6080627441406,
        562.1983642578125,
        478.08685302734375
      ],
      "text": "ℎ𝑡= (1 −𝑔𝑡)ℎ𝑡−1 + 𝑔𝑡𝑥𝑡.\n(5)"
    },
    {
      "page_no": 8,
      "bbox": [
        71.6510009765625,
        488.3927917480469,
        561.6043701171875,
        524.1144409179688
      ],
      "text": "As mentioned in Section 3.2, our specific choices of 𝑠Δ,𝜏Δ is from this connection. In particular, note that if a given input 𝑥𝑡\nshould be completely ignored (as necessary in the synthetic tasks), all 𝐷channels should ignore it, and so we project the\ninput down to 1 dimension before repeating/broadcasting with Δ."
    },
    {
      "page_no": 8,
      "bbox": [
        72.00003051757812,
        540.4407348632812,
        280.9256591796875,
        550.4033203125
      ],
      "text": "3.5.2\nInterpretation of Selection Mechanisms"
    },
    {
      "page_no": 8,
      "bbox": [
        71.52203369140625,
        556.4151000976562,
        334.4250793457031,
        566.377685546875
      ],
      "text": "We elaborate on three particular mechanistic effects of selection."
    },
    {
      "page_no": 8,
      "bbox": [
        71.70099639892578,
        582.1614379882812,
        563.1299438476562,
        629.807861328125
      ],
      "text": "Variable Spacing.\nSelectivity allows filtering out irrelevant noise tokens that may occur between inputs of interest.\nThis is exemplified by the Selective Copying task, but occurs ubiquitously in common data modalities, particularly for\ndiscrete data – for example the presence of language fillers such as “um”. This property arises because the model can\nmechanistically filter out any particular input 𝑥𝑡, for example in the gated RNN case (Theorem 1) when 𝑔𝑡→0."
    },
    {
      "page_no": 8,
      "bbox": [
        72.0,
        644.0357666015625,
        563.1328125,
        713.709716796875
      ],
      "text": "Filtering Context.\nIt has been empirically observed that many sequence models do not improve with longer context (F.\nShi et al. 2023), despite the principle that more context should lead to strictly better performance. An explanation is\nthat many sequence models cannot effectively ignore irrelevant context when necessary; an intuitive example are global\nconvolutions (and general LTI models). On the other hand, selective models can simply reset their state at any time\nto remove extraneous history, and thus their performance in principle improves monotonicly with context length (e.g.\nSection 4.3.2)."
    },
    {
      "page_no": 8,
      "bbox": [
        314.4840087890625,
        740.8311157226562,
        319.1166076660156,
        750.793701171875
      ],
      "text": "8"
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        72.9100341796875,
        563.13525390625,
        130.688720703125
      ],
      "text": "Boundary Resetting.\nIn settings where multiple independent sequences are stitched together, Transformers can keep\nthem separate by instantiating a particular attention mask, while LTI models will bleed information between the sequences.\nSelective SSMs can also reset their state at boundaries (e.g. Δ𝑡→∞, or Theorem 1 when 𝑔𝑡→1). These settings may\noccur artificially (e.g. packing documents together to improve hardware utilization) or naturally (e.g. episode boundaries in\nreinforcement learning (Lu et al. 2023))."
    },
    {
      "page_no": 9,
      "bbox": [
        71.6510009765625,
        138.6591033935547,
        334.70343017578125,
        148.6217041015625
      ],
      "text": "Additionally, we elaborate on effects of each selective parameter."
    },
    {
      "page_no": 9,
      "bbox": [
        71.63099670410156,
        164.4496612548828,
        562.6962890625,
        234.24267578125
      ],
      "text": "Interpretation of Δ.\nIn general, Δ controls the balance between how much to focus or ignore the current input 𝑥𝑡. It\ngeneralizes RNN gates (e.g. 𝑔𝑡in Theorem 1): mechanically, a large Δ resets the state ℎand focuses on the current input 𝑥,\nwhile a small Δ persists the state and ignores the current input. SSMs (1)-(2) can be interpreted as a continuous system\ndiscretized by a timestep Δ, and in this context the intuition is that large Δ →∞represents the system focusing on the\ncurrent input for longer (thus “selecting” it and forgetting its current state) while a small Δ →0 represents a transient\ninput that is ignored."
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        250.02737426757812,
        561.7908935546875,
        297.90252685546875
      ],
      "text": "Interpretation of 𝑨.\nWe remark that while the 𝑨parameter could also be selective, it ultimately affects the model\nonly through its interaction with Δ via 𝑨= exp(Δ𝑨) (the discretization (4)). Thus selectivity in Δ is enough to ensure\nselectivity in (𝑨, 𝑩), and is the main source of improvement. We hypothesize that making 𝑨selective in addition to (or\ninstead of) Δ would have similar performance, and leave it out for simplicity."
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        311.7384033203125,
        562.1937866210938,
        369.6206970214844
      ],
      "text": "Interpretation of 𝑩and 𝑪.\nAs discussed in Section 3.1, the most important property of selectivity is filtering out\nirrelevant information so that a sequence model’s context can be compressed into an efficient state. In an SSM, modifying\n𝑩and 𝑪to be selective allows finer-grained control over whether to let an input 𝑥𝑡into the state ℎ𝑡, or the state into the\noutput 𝑦𝑡. These can be interpreted as allowing the model to modulate the recurrent dynamics based on content (input)\nand context (hidden states) respectively."
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        388.3822021484375,
        234.7700653076172,
        400.33740234375
      ],
      "text": "3.6\nAdditional Model Details"
    },
    {
      "page_no": 9,
      "bbox": [
        71.7509994506836,
        405.8571472167969,
        562.696044921875,
        475.6007080078125
      ],
      "text": "Real vs. Complex.\nMost prior SSMs use complex numbers in their state ℎ, which is necessary for strong performance\non many tasks in perceptual modalities (Gu, Goel, and Ré 2022). However, it has been empirically observed that completely\nreal-valued SSMs seem to work fine, and possibly even better, in some settings (Ma et al. 2023). We use real values as\nthe default, which work well for all but one of our tasks; we hypothesize that the complex-real tradeoff is related to the\ncontinuous-discrete spectrum in data modalities, where complex numbers are helpful for continuous modalities (e.g. audio,\nvideo) but not discrete (e.g. text, DNA)."
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        491.4930419921875,
        561.6026611328125,
        549.2667236328125
      ],
      "text": "Initialization.\nMost prior SSMs also suggest special initializations, particularly in the complex-valued case, which can\nhelp in several settings such as low-data regimes. Our default initialization for the complex case is S4D-Lin and for the real\ncase is S4D-Real (Gu, Gupta, et al. 2022), which is based on the HIPPO theory (Gu, Dao, et al. 2020). These define the 𝑛-th\nelement of 𝑨as −1/2 + 𝑛𝑖and −(𝑛+ 1) respectively. However, we expect many initializations to work fine, particularly in\nthe large-data and real-valued SSM regimes; some ablations are considered in Section 4.6."
    },
    {
      "page_no": 9,
      "bbox": [
        71.60099792480469,
        565.0504150390625,
        561.78857421875,
        637.7935180664062
      ],
      "text": "Parameterization of Δ.\nWe defined the selective adjustment to Δ as 𝑠Δ(𝑥) = Broadcast𝐷(Linear1(𝑥)), which was\nmotivated by the mechanics of Δ (Section 3.5). We observe that it can be generalized from dimension 1 to a larger\ndimension R. We set this to be a small fraction of D, which uses a negligible number of parameters compared to the main\nLinear projections in the block. We additionally note that the broadcasting operation can instead be viewed as another\nLinear projection, initialized to a specific pattern of 1’s and 0’s; if this projection is trainable, this leads to the alternative\n𝑠Δ(𝑥) = Linear𝐷(Linear𝑅(𝑥)), which can be viewed as a low-rank projection."
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        641.919189453125,
        562.6956176757812,
        664.7756958007812
      ],
      "text": "In our experiments, the Δ parameter (which can be viewed as a bias term) is initialized to 𝜏−1\nΔ (Uniform([0.001, 0.1])),\nfollowing prior work on SSMs (Gu, Johnson, Timalsina, et al. 2023)."
    },
    {
      "page_no": 9,
      "bbox": [
        72.0,
        672.7957763671875,
        561.6025390625,
        697.126708984375
      ],
      "text": "Remark 3.1. For brevity in our experimental results, we sometimes abbreviate selective SSMs as S6 models, because they are\nS4 models with a selection mechanism and computed with a scan."
    },
    {
      "page_no": 9,
      "bbox": [
        314.4839782714844,
        740.8311157226562,
        319.1165771484375,
        750.793701171875
      ],
      "text": "9"
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        72.26166534423828,
        231.78797912597656,
        86.60786437988281
      ],
      "text": "4\nEmpirical Evaluation"
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        95.04779052734375,
        561.6010131835938,
        116.88567352294922
      ],
      "text": "In Section 4.1 we test Mamba’s ability to solve the two synthetic tasks motivated in Section 3.1. We then evaluate on three\ndomains, each evaluated on autoregressive pretraining as well as downstream tasks."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        124.8560562133789,
        460.4913635253906,
        134.81866455078125
      ],
      "text": "• Section 4.2: language model pretraining (scaling laws), and zero-shot downstream evaluation."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        142.78807067871094,
        463.9982604980469,
        152.75067138671875
      ],
      "text": "• Section 4.3: DNA sequence pretraining, and fine-tuning on a long-sequence classification task."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        160.72105407714844,
        486.25469970703125,
        170.68365478515625
      ],
      "text": "• Section 4.4: audio waveform pretraining, and the quality of autoregressively generated speech clips."
    },
    {
      "page_no": 10,
      "bbox": [
        71.7509994506836,
        178.62437438964844,
        561.6030883789062,
        200.57171630859375
      ],
      "text": "Finally, Section 4.5 shows Mamba’s computational efficiency at both training and inference time, and Section 4.6 ablates\nvarious components of the architecture and selective SSMs."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        219.3332061767578,
        184.1158905029297,
        231.2884063720703
      ],
      "text": "4.1\nSynthetic Tasks"
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        236.8131561279297,
        489.2436828613281,
        246.7757568359375
      ],
      "text": "Full experiment details for these tasks including task details and training protocol are in Appendix E.1."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        265.05078125,
        182.46533203125,
        275.01336669921875
      ],
      "text": "4.1.1\nSelective Copying"
    },
    {
      "page_no": 10,
      "bbox": [
        71.70099639892578,
        280.9263916015625,
        561.8544921875,
        350.7637023925781
      ],
      "text": "The Copying task is one of the most well-studied synthetic tasks for sequence modeling, originally designed to test\nthe memorization abilities of recurrent models. As discussed in Section 3.1, LTI SSMs (linear recurrences and global\nconvolutions) can easily solve this task by only keeping track of time instead of reasoning about the data; for example, by\nconstructing a convolution kernel of exactly the right length (Figure 2). This was explicitly validated in earlier work on\nglobal convolutions (Romero et al. 2021). The Selective Copying task prevents this shortcut by randomizing the spacing\nbetween tokens. Note that this task has been introduced before as the Denoising task (Jing et al. 2019)."
    },
    {
      "page_no": 10,
      "bbox": [
        70.8740005493164,
        358.8177795410156,
        561.6028442382812,
        404.56170654296875
      ],
      "text": "Note that many previous works argue that adding architecture gating (multiplicative interactions) can endow models with\n“data-dependence” and solve related tasks (Dao, Fu, Saab, et al. 2023; Poli et al. 2023). However, we find this explanation\ninsufficient intuitively because such gating does not interact along the sequence axis, and cannot affect the spacing between\ntokens. In particular architecture gating is not an instance of a selection mechanism (Appendix A)."
    },
    {
      "page_no": 10,
      "bbox": [
        71.70099639892578,
        412.4333801269531,
        563.2808227539062,
        446.4046936035156
      ],
      "text": "Table 1 confirms that gated architectures such as H3 and Mamba only partially improve performance, while the selec-\ntion mechanism (modifying S4 to S6) easily solves this task, particularly when combined with these more powerful\narchitectures."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        464.6797180175781,
        176.85638427734375,
        474.6423034667969
      ],
      "text": "4.1.2\nInduction Heads"
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        480.6243896484375,
        562.774169921875,
        526.481689453125
      ],
      "text": "Induction heads (Olsson et al. 2022) is a simple task from the mechanistic interpretability lens (Elhage et al. 2021) that is\nsurprisingly predictive of the in-context learning ability of LLMs. It requires models to perform associative recall and copy:\nfor example, if the model has seen a bigram such as “Harry Potter” in the sequence, then the next time “Harry” appears in\nthe same sequence, the model should be able to predict “Potter” by copying from history."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        542.389892578125,
        561.601318359375,
        588.1926879882812
      ],
      "text": "Dataset.\nWe train a 2-layer model on the induction heads task at sequence length 256, with a vocab size of 16, which is\ncomparable to prior work on this task (Dao, Fu, Saab, et al. 2023) but with longer sequences. We additionally investigate\ngeneralization and extrapolation abilities by evaluating on a range of sequence lengths from 26 = 64 up to 220 = 1048576 at\ntest time."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        604.17578125,
        561.86181640625,
        638.149658203125
      ],
      "text": "Models.\nFollowing established work on induction heads, we use 2 layer models, which allows attention to mechanistically\nsolve the induction heads task (Olsson et al. 2022). We test both multi-head attention (8 heads, with various positional\nencodings) and SSM variants. We use a model dimension 𝐷of 64 for Mamba and 128 for the other models."
    },
    {
      "page_no": 10,
      "bbox": [
        72.0,
        653.9317626953125,
        561.8610229492188,
        701.3788452148438
      ],
      "text": "Results.\nTable 2 shows that Mamba—or more precisely, its selective SSM layer—has the ability to solve the task perfectly\nbecause of its ability to selectively remember the relevant token while ignoring everything else in between. It generalizes\nperfectly to million-length sequences, or 4000× longer than it saw during training, while no other method goes\nbeyond 2×."
    },
    {
      "page_no": 10,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "10"
    },
    {
      "page_no": 11,
      "bbox": [
        84.33100128173828,
        75.18992614746094,
        216.75575256347656,
        84.15633392333984
      ],
      "text": "Model\nArch.\nLayer\nAcc."
    },
    {
      "page_no": 11,
      "bbox": [
        84.33100128173828,
        91.14994812011719,
        215.9390106201172,
        113.22779846191406
      ],
      "text": "S4\nNo gate\nS4\n18.3\n-\nNo gate\nS6\n97.0"
    },
    {
      "page_no": 11,
      "bbox": [
        84.33100128173828,
        118.06889343261719,
        215.9390106201172,
        151.10475158691406
      ],
      "text": "H3\nH3\nS4\n57.0\nHyena\nH3\nHyena\n30.1\n-\nH3\nS6\n99.7"
    },
    {
      "page_no": 11,
      "bbox": [
        84.33100128173828,
        155.94590759277344,
        215.9390106201172,
        188.9827423095703
      ],
      "text": "-\nMamba\nS4\n56.4\n-\nMamba\nHyena\n28.4\nMamba\nMamba\nS6\n99.8"
    },
    {
      "page_no": 11,
      "bbox": [
        71.68599700927734,
        203.28990173339844,
        233.5653533935547,
        234.17433166503906
      ],
      "text": "Table 1: (Selective Copying.)\nAccuracy for combinations of architectures\nand inner sequence layers."
    },
    {
      "page_no": 11,
      "bbox": [
        333.7608947753906,
        178.7392578125,
        550.0653076171875,
        186.3651885986328
      ],
      "text": "102\n103\n104\n105\n106"
    },
    {
      "page_no": 11,
      "bbox": [
        402.42388916015625,
        186.035888671875,
        472.8746032714844,
        195.3303985595703
      ],
      "text": "Test Sequence Length"
    },
    {
      "page_no": 11,
      "bbox": [
        304.5888977050781,
        168.0404815673828,
        312.50213623046875,
        175.34332275390625
      ],
      "text": "0.0"
    },
    {
      "page_no": 11,
      "bbox": [
        304.5888977050781,
        151.4580535888672,
        312.50213623046875,
        158.76089477539062
      ],
      "text": "0.2"
    },
    {
      "page_no": 11,
      "bbox": [
        304.5888977050781,
        134.8756103515625,
        312.50213623046875,
        142.17845153808594
      ],
      "text": "0.4"
    },
    {
      "page_no": 11,
      "bbox": [
        304.5888977050781,
        118.29318237304688,
        312.50213623046875,
        125.59601593017578
      ],
      "text": "0.6"
    },
    {
      "page_no": 11,
      "bbox": [
        304.5888977050781,
        101.71074676513672,
        312.50213623046875,
        109.01358032226562
      ],
      "text": "0.8"
    },
    {
      "page_no": 11,
      "bbox": [
        304.5888977050781,
        85.12830352783203,
        312.50213623046875,
        92.43113708496094
      ],
      "text": "1.0"
    },
    {
      "page_no": 11,
      "bbox": [
        293.699462890625,
        115.63947296142578,
        302.9939880371094,
        145.02777099609375
      ],
      "text": "Accuracy"
    },
    {
      "page_no": 11,
      "bbox": [
        390.19537353515625,
        74.33576202392578,
        485.03021240234375,
        83.63027954101562
      ],
      "text": "Induction Heads Extrapolation"
    },
    {
      "page_no": 11,
      "bbox": [
        516.4156494140625,
        98.01866149902344,
        553.0562744140625,
        161.31253051757812
      ],
      "text": "MHA-Absolute\nMHA-RoPE\nMHA-xPos\nH3\nHyena\nMamba\nRandom\nTrain Length"
    },
    {
      "page_no": 11,
      "bbox": [
        292.04998779296875,
        201.69920349121094,
        561.60009765625,
        234.1513214111328
      ],
      "text": "Table 2: (Induction Heads.) Models are trained on sequence length 28 =\n256, and tested on increasing sequence lengths of 26 = 64 up to 220 =\n1048576. Full numbers in Table 11."
    },
    {
      "page_no": 11,
      "bbox": [
        174.56097412109375,
        343.1581115722656,
        273.8750915527344,
        349.9094543457031
      ],
      "text": "1019\n1020"
    },
    {
      "page_no": 11,
      "bbox": [
        184.41140747070312,
        349.8597717285156,
        233.69134521484375,
        358.1239013671875
      ],
      "text": "FLOPs (log scale)"
    },
    {
      "page_no": 11,
      "bbox": [
        93.54190063476562,
        302.8112487792969,
        101.16222381591797,
        309.5625915527344
      ],
      "text": "101"
    },
    {
      "page_no": 11,
      "bbox": [
        86.91885375976562,
        336.9872131347656,
        101.97990417480469,
        343.7385559082031
      ],
      "text": "6 × 100"
    },
    {
      "page_no": 11,
      "bbox": [
        86.91885375976562,
        256.47698974609375,
        101.97990417480469,
        263.22833251953125
      ],
      "text": "2 × 101"
    },
    {
      "page_no": 11,
      "bbox": [
        77.18102264404297,
        270.80206298828125,
        85.4451675415039,
        330.0076904296875
      ],
      "text": "Perplexity (log scale)"
    },
    {
      "page_no": 11,
      "bbox": [
        139.00643920898438,
        250.91111755371094,
        279.1484375,
        259.1752624511719
      ],
      "text": "Scaling Laws on The Pile (Sequence Length 2048)"
    },
    {
      "page_no": 11,
      "bbox": [
        274.9642028808594,
        263.0552978515625,
        307.94879150390625,
        312.22747802734375
      ],
      "text": "Hyena\nRWKV\nTransformer\nRetNet\nH3++\nTransformer++\nMamba"
    },
    {
      "page_no": 11,
      "bbox": [
        415.10272216796875,
        343.1581115722656,
        511.9338684082031,
        349.9094543457031
      ],
      "text": "1019\n1020"
    },
    {
      "page_no": 11,
      "bbox": [
        426.80841064453125,
        349.8597717285156,
        476.0883483886719,
        358.1239013671875
      ],
      "text": "FLOPs (log scale)"
    },
    {
      "page_no": 11,
      "bbox": [
        335.93890380859375,
        302.8112487792969,
        343.5592346191406,
        309.5625915527344
      ],
      "text": "101"
    },
    {
      "page_no": 11,
      "bbox": [
        329.31585693359375,
        336.9872131347656,
        344.3769226074219,
        343.7385559082031
      ],
      "text": "6 × 100"
    },
    {
      "page_no": 11,
      "bbox": [
        329.31585693359375,
        256.47698974609375,
        344.3769226074219,
        263.22833251953125
      ],
      "text": "2 × 101"
    },
    {
      "page_no": 11,
      "bbox": [
        319.57806396484375,
        270.80206298828125,
        327.8421936035156,
        330.0076904296875
      ],
      "text": "Perplexity (log scale)"
    },
    {
      "page_no": 11,
      "bbox": [
        381.4034423828125,
        250.91111755371094,
        521.54541015625,
        259.1752624511719
      ],
      "text": "Scaling Laws on The Pile (Sequence Length 8192)"
    },
    {
      "page_no": 11,
      "bbox": [
        517.3612060546875,
        263.0552978515625,
        550.3457641601562,
        312.22747802734375
      ],
      "text": "Hyena\nRWKV\nTransformer\nRetNet\nH3++\nTransformer++\nMamba"
    },
    {
      "page_no": 11,
      "bbox": [
        72.0,
        369.6380920410156,
        562.5907592773438,
        400.611328125
      ],
      "text": "Figure 4: (Scaling Laws.) Models of size ≈125𝑀to ≈1.3𝐵parameters, trained on the Pile. Mamba scales better than all other\nattention-free models and is the first to match the performance of a very strong “Transformer++” recipe that has now become standard,\nparticularly as the sequence length grows."
    },
    {
      "page_no": 11,
      "bbox": [
        72.0,
        423.7746887207031,
        561.8607788085938,
        457.7016906738281
      ],
      "text": "Out of positional encoding variants for attention models, xPos (which was designed for length extrapolation) is slightly\nbetter than the others; also note that all attention models were only tested up to sequence length 214 = 16384 due to\nmemory limitations. Out of other SSMs, H3 and Hyena are similar, contrary to the findings in Poli et al. (2023)."
    },
    {
      "page_no": 11,
      "bbox": [
        72.0,
        476.46319580078125,
        205.26461791992188,
        488.41839599609375
      ],
      "text": "4.2\nLanguage Modeling"
    },
    {
      "page_no": 11,
      "bbox": [
        71.52200317382812,
        493.92822265625,
        561.6035766601562,
        539.771728515625
      ],
      "text": "We evaluate the Mamba architecture on standard autoregressive language modeling against other architectures, on both\npretraining metrics (perplexity) and zero-shot evaluations. We set the model sizes (depth and width) to mirror GPT3\nspecifications. We use the Pile dataset (L. Gao, Biderman, et al. 2020), and follow the training recipe described in Brown\net al. (2020). All training details are in Appendix E.2."
    },
    {
      "page_no": 11,
      "bbox": [
        72.0,
        558.0457153320312,
        159.84022521972656,
        568.00830078125
      ],
      "text": "4.2.1\nScaling Laws"
    },
    {
      "page_no": 11,
      "bbox": [
        71.70099639892578,
        573.92138671875,
        563.1384887695312,
        619.8486938476562
      ],
      "text": "For baselines, we compare against the standard Transformer architecture (GPT3 architecture), as well as the strongest\nTransformer recipe we know of (here referred to as Transformer++), based on the PaLM and LLaMa architectures (e.g.\nrotary embedding, SwiGLU MLP, RMSNorm instead of LayerNorm, no linear bias, and higher learning rates). We also\ncompare against other recent subquadratic architectures (Figure 4). All model details are in Appendix E.2."
    },
    {
      "page_no": 11,
      "bbox": [
        72.0,
        627.9188232421875,
        561.8045654296875,
        697.5567016601562
      ],
      "text": "Figure 4 shows scaling laws under the standard Chinchilla (Hoffmann et al. 2022) protocol, on models from ≈125𝑀to ≈1.3𝐵\nparameters. Mamba is the first attention-free model to match the performance of a very strong Transformer\nrecipe (Transformer++) that has now become standard, particularly as the sequence length grows. (We note\nthat full results on context length 8k are missing for the RWKV and RetNet baselines, prior strong recurrent models that\ncan also be interpreted as SSMs, because of a lack of efficient implementations leading to out-of-memory or unrealistic\ncomputation requirements.)"
    },
    {
      "page_no": 11,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "11"
    },
    {
      "page_no": 12,
      "bbox": [
        72.0,
        75.29667663574219,
        215.49134826660156,
        85.25927734375
      ],
      "text": "4.2.2\nDownstream Evaluations"
    },
    {
      "page_no": 12,
      "bbox": [
        71.70099639892578,
        91.17337799072266,
        561.7865600585938,
        149.0546875
      ],
      "text": "Table 3 shows the performance of Mamba on a range of popular downstream zero-shot evaluation tasks. We compare\nagainst the most well-known open source models at these sizes, most importantly Pythia (Biderman et al. 2023) and\nRWKV (B. Peng et al. 2023) which were trained with the same tokenizer, dataset, and training length (300B tokens) as our\nmodels. (Note that Mamba and Pythia are trained with context length 2048, while RWKV was trained with context length\n1024.)"
    },
    {
      "page_no": 12,
      "bbox": [
        71.73100280761719,
        161.63412475585938,
        562.587646484375,
        203.56629943847656
      ],
      "text": "Table 3: (Zero-shot Evaluations.) Best results for each size in bold. We compare against open source LMs with various tokenizers,\ntrained for up to 300B tokens. Pile refers to the validation split, comparing only against models trained on the same dataset and tokenizer\n(GPT-NeoX-20B). For each model size, Mamba is best-in-class on every single evaluation result, and generally matches baselines at twice\nthe model size."
    },
    {
      "page_no": 12,
      "bbox": [
        75.42752075195312,
        218.97042846679688,
        555.9326782226562,
        239.2030487060547
      ],
      "text": "Model\nToken.\nPile\nLAMBADA\nLAMBADA\nHellaSwag\nPIQA\nArc-E\nArc-C\nWinoGrande\nAverage\nppl ↓\nppl ↓\nacc ↑\nacc ↑\nacc ↑\nacc ↑\nacc ↑\nacc ↑\nacc ↑"
    },
    {
      "page_no": 12,
      "bbox": [
        75.42750549316406,
        244.33480834960938,
        539.51416015625,
        275.46282958984375
      ],
      "text": "Hybrid H3-130M\nGPT2\n—\n89.48\n25.77\n31.7\n64.2\n44.4\n24.2\n50.6\n40.1\nPythia-160M\nNeoX\n29.64\n38.10\n33.0\n30.2\n61.4\n43.2\n24.1\n51.9\n40.6\nMamba-130M\nNeoX\n10.56\n16.07\n44.3\n35.3\n64.5\n48.0\n24.3\n51.9\n44.7"
    },
    {
      "page_no": 12,
      "bbox": [
        75.42752075195312,
        280.0244140625,
        539.51416015625,
        311.1533508300781
      ],
      "text": "Hybrid H3-360M\nGPT2\n—\n12.58\n48.0\n41.5\n68.1\n51.4\n24.7\n54.1\n48.0\nPythia-410M\nNeoX\n9.95\n10.84\n51.4\n40.6\n66.9\n52.1\n24.6\n53.8\n48.2\nMamba-370M\nNeoX\n8.28\n8.14\n55.6\n46.5\n69.5\n55.1\n28.0\n55.3\n50.0"
    },
    {
      "page_no": 12,
      "bbox": [
        75.42752075195312,
        315.7149658203125,
        539.51416015625,
        336.51690673828125
      ],
      "text": "Pythia-1B\nNeoX\n7.82\n7.92\n56.1\n47.2\n70.7\n57.0\n27.1\n53.5\n51.9\nMamba-790M\nNeoX\n7.33\n6.02\n62.7\n55.1\n72.1\n61.2\n29.5\n56.1\n57.1"
    },
    {
      "page_no": 12,
      "bbox": [
        75.42752075195312,
        341.0784606933594,
        539.51416015625,
        403.18572998046875
      ],
      "text": "GPT-Neo 1.3B\nGPT2\n—\n7.50\n57.2\n48.9\n71.1\n56.2\n25.9\n54.9\n52.4\nHybrid H3-1.3B\nGPT2\n—\n11.25\n49.6\n52.6\n71.3\n59.2\n28.1\n56.9\n53.0\nOPT-1.3B\nOPT\n—\n6.64\n58.0\n53.7\n72.4\n56.7\n29.6\n59.5\n55.0\nPythia-1.4B\nNeoX\n7.51\n6.08\n61.7\n52.1\n71.0\n60.5\n28.5\n57.2\n55.2\nRWKV-1.5B\nNeoX\n7.70\n7.04\n56.4\n52.5\n72.4\n60.5\n29.4\n54.6\n54.3\nMamba-1.4B\nNeoX\n6.80\n5.04\n64.9\n59.1\n74.2\n65.5\n32.8\n61.5\n59.7"
    },
    {
      "page_no": 12,
      "bbox": [
        75.42752075195312,
        407.74639892578125,
        539.51416015625,
        469.85369873046875
      ],
      "text": "GPT-Neo 2.7B\nGPT2\n—\n5.63\n62.2\n55.8\n72.1\n61.1\n30.2\n57.6\n56.5\nHybrid H3-2.7B\nGPT2\n—\n7.92\n55.7\n59.7\n73.3\n65.6\n32.3\n61.4\n58.0\nOPT-2.7B\nOPT\n—\n5.12\n63.6\n60.6\n74.8\n60.8\n31.3\n61.0\n58.7\nPythia-2.8B\nNeoX\n6.73\n5.04\n64.7\n59.3\n74.0\n64.1\n32.9\n59.7\n59.1\nRWKV-3B\nNeoX\n7.00\n5.24\n63.9\n59.6\n73.7\n67.8\n33.1\n59.6\n59.6\nMamba-2.8B\nNeoX\n6.22\n4.23\n69.2\n66.1\n75.2\n69.7\n36.3\n63.5\n63.3"
    },
    {
      "page_no": 12,
      "bbox": [
        75.42752075195312,
        474.4153137207031,
        538.063720703125,
        513.84130859375
      ],
      "text": "GPT-J-6B\nGPT2\n–\n4.10\n68.3\n66.3\n75.4\n67.0\n36.6\n64.1\n63.0\nOPT-6.7B\nOPT\n–\n4.25\n67.7\n67.2\n76.3\n65.6\n34.9\n65.5\n62.9\nPythia-6.9B\nNeoX\n6.51\n4.45\n67.1\n64.0\n75.2\n67.3\n35.5\n61.3\n61.7\nRWKV-7.4B\nNeoX\n6.31\n4.38\n67.2\n65.5\n76.1\n67.8\n37.5\n61.0\n62.5"
    },
    {
      "page_no": 12,
      "bbox": [
        72.0,
        542.0391845703125,
        179.91958618164062,
        553.994384765625
      ],
      "text": "4.3\nDNA Modeling"
    },
    {
      "page_no": 12,
      "bbox": [
        71.70099639892578,
        559.42041015625,
        561.9439697265625,
        629.2576904296875
      ],
      "text": "Motivated by the success of large language models, there has been recent exploration into using the foundation model\nparadigm for genomics. DNA has been likened to language in that it consists of sequences of discrete tokens with a finite\nvocabulary. It is also known for requiring long-range dependencies to model (Avsec et al. 2021). We investigate Mamba as\na FM backbone for pretraining and fine-tuning in the same setting as recent works on long-sequence models for DNA\n(Nguyen, Poli, et al. 2023). In particular, we focus on two explorations of scaling laws across model size and sequence\nlength (Figure 5), and a difficult downstream synthetic classification task requiring long context (Figure 6)."
    },
    {
      "page_no": 12,
      "bbox": [
        71.63099670410156,
        637.2578735351562,
        562.6963500976562,
        683.0557250976562
      ],
      "text": "For pretraining, we largely follow a standard causal language modeling (next token prediction) setup for the training and\nmodel details (see also Appendix E.2). For the dataset, we largely follow the setup of HyenaDNA (Nguyen, Poli, et al. 2023),\nwhich uses the HG38 dataset for pretraining consisting of a single human genome with about 4.5 billion tokens (DNA base\npairs) in the training split."
    },
    {
      "page_no": 12,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "12"
    },
    {
      "page_no": 13,
      "bbox": [
        162.54379272460938,
        166.80511474609375,
        254.70802307128906,
        173.5935821533203
      ],
      "text": "106\n107"
    },
    {
      "page_no": 13,
      "bbox": [
        173.25262451171875,
        173.5486602783203,
        237.01551818847656,
        181.82843017578125
      ],
      "text": "Parameters (log scale)"
    },
    {
      "page_no": 13,
      "bbox": [
        86.64094543457031,
        158.2885284423828,
        93.69023132324219,
        164.79405212402344
      ],
      "text": "2.7"
    },
    {
      "page_no": 13,
      "bbox": [
        86.64094543457031,
        142.0471649169922,
        93.69023132324219,
        148.5526885986328
      ],
      "text": "2.8"
    },
    {
      "page_no": 13,
      "bbox": [
        86.64094543457031,
        125.80579376220703,
        93.69023132324219,
        132.3113250732422
      ],
      "text": "2.9"
    },
    {
      "page_no": 13,
      "bbox": [
        86.64094543457031,
        109.56442260742188,
        93.69023132324219,
        116.06995391845703
      ],
      "text": "3.0"
    },
    {
      "page_no": 13,
      "bbox": [
        86.64094543457031,
        93.32305908203125,
        93.69023132324219,
        99.8285903930664
      ],
      "text": "3.1"
    },
    {
      "page_no": 13,
      "bbox": [
        76.94037628173828,
        109.85945129394531,
        85.22013854980469,
        138.1278533935547
      ],
      "text": "Perplexity"
    },
    {
      "page_no": 13,
      "bbox": [
        142.9799346923828,
        74.41302490234375,
        267.3072814941406,
        82.69278717041016
      ],
      "text": "Scaling Laws on the Human Genome (HG38)"
    },
    {
      "page_no": 13,
      "bbox": [
        274.89031982421875,
        86.58015441894531,
        307.9372253417969,
        107.3713607788086
      ],
      "text": "HyenaDNA\nMamba\nTransformer++"
    },
    {
      "page_no": 13,
      "bbox": [
        348.08123779296875,
        167.13912963867188,
        547.4324340820312,
        173.93246459960938
      ],
      "text": "103\n104\n105\n106"
    },
    {
      "page_no": 13,
      "bbox": [
        424.61865234375,
        173.6391143798828,
        473.28094482421875,
        181.91888427734375
      ],
      "text": "Sequence Length"
    },
    {
      "page_no": 13,
      "bbox": [
        329.0379638671875,
        150.42398071289062,
        338.8991394042969,
        156.92950439453125
      ],
      "text": "2.75"
    },
    {
      "page_no": 13,
      "bbox": [
        329.0379638671875,
        137.51145935058594,
        338.8991394042969,
        144.01698303222656
      ],
      "text": "2.80"
    },
    {
      "page_no": 13,
      "bbox": [
        329.0379638671875,
        124.59893035888672,
        338.8991394042969,
        131.10446166992188
      ],
      "text": "2.85"
    },
    {
      "page_no": 13,
      "bbox": [
        329.0379638671875,
        111.68640899658203,
        338.8991394042969,
        118.19194030761719
      ],
      "text": "2.90"
    },
    {
      "page_no": 13,
      "bbox": [
        329.0379638671875,
        98.77389526367188,
        338.8991394042969,
        105.27942657470703
      ],
      "text": "2.95"
    },
    {
      "page_no": 13,
      "bbox": [
        329.0379638671875,
        85.86136627197266,
        338.8991394042969,
        92.36689758300781
      ],
      "text": "3.00"
    },
    {
      "page_no": 13,
      "bbox": [
        319.3373718261719,
        110.01893615722656,
        327.61712646484375,
        138.28733825683594
      ],
      "text": "Perplexity"
    },
    {
      "page_no": 13,
      "bbox": [
        392.56109619140625,
        74.39799499511719,
        505.3416442871094,
        82.6777572631836
      ],
      "text": "Scaling Laws - Sequence Length (HG38)"
    },
    {
      "page_no": 13,
      "bbox": [
        361.2541198730469,
        86.56513214111328,
        397.6958312988281,
        107.35633087158203
      ],
      "text": "HyenaDNA 1.4M\nMamba 1.4M\nMamba 7M"
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        191.92820739746094,
        561.599853515625,
        235.34034729003906
      ],
      "text": "Figure 5: (DNA Scaling Laws.) Pretraining on the HG38 (human genome) dataset. (Left) Fixing short context length 210 = 1024 and\nincreasing size from ≈200𝐾to ≈40𝑀parameters, Mamba scales better than baselines. (Right) Fixing model size and increasing sequence\nlengths while keeping tokens/batch and total training tokens fixed. Unlike baselines, the selection mechanism of Mamba facilitates\nbetter performance with increasing context length."
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        260.94873046875,
        188.333251953125,
        270.91131591796875
      ],
      "text": "4.3.1\nScaling: Model Size"
    },
    {
      "page_no": 13,
      "bbox": [
        71.70099639892578,
        276.86871337890625,
        561.598876953125,
        301.3047180175781
      ],
      "text": "In this experiment, we investigate the scaling properties of genomics foundation models with various model backbones\n(Figure 5 Left)."
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        314.7837829589844,
        561.5955810546875,
        348.797607421875
      ],
      "text": "Training.\nTo advantage the baselines, we train on a short sequence length of 1024; as shown in Section 4.3.2, we expect\nresults to favor Mamba even more at longer sequence lengths. We fix a global batch size of 1024, for a total of 220 ≈1𝑀\ntokens per batch. Models were trained for 10𝐾gradient steps for a total of 10𝐵tokens."
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        364.57977294921875,
        561.8060913085938,
        412.7003173828125
      ],
      "text": "Results.\nFigure 5 (Left) shows that Mamba’s pretraining perplexity improves smoothly with model size, and that Mamba\nscales better than both HyenaDNA and Transformer++. For example, at the largest model size of ≈40𝑀parameters, the\ncurve shows that Mamba can match the Transformer++ and HyenaDNA models with roughly 3× to 4× fewer\nparameters."
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        428.5827331542969,
        210.3804931640625,
        438.5453186035156
      ],
      "text": "4.3.2\nScaling: Context Length"
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        444.47314453125,
        562.6974487304688,
        514.2957153320312
      ],
      "text": "In the next DNA experiment, we investigate the scaling properties of models with respect to sequence length. We only\ncompare the HyenaDNA and Mamba models, as quadratic attention becomes prohibitively expensive at longer sequence\nlengths. We pretrain models on sequence lengths 210 = 1024, 212 = 4096, 214 = 16384, 216 = 65536, 218 = 262144,\n220 = 1048576. We fix a model size of 6 layers by width 128 (about 1.3M-1.4M parameters). Models were trained for 20𝐾\ngradient steps for a total of ≈330𝐵tokens. The longer sequence lengths used sequence length warmup similar to (Nguyen,\nPoli, et al. 2023)."
    },
    {
      "page_no": 13,
      "bbox": [
        71.63099670410156,
        530.0804443359375,
        561.6025390625,
        599.9166870117188
      ],
      "text": "Results.\nFigure 5 (Right) shows that Mamba is able to make use of longer context even up to extremely long\nsequences of length 1M, and its pretraining perplexity improves as the context increases. On the other hand, the\nHyenaDNA model gets worse with sequence length. This is intuitive from the discussion in Section 3.5 on properties of the\nselection mechanism. In particular, LTI models cannot selectively ignore information; from a convolutional perspective, a\nvery long convolution kernel is aggregating all information across a long sequence which may be very noisy. Note that\nwhile HyenaDNA claims to improve with longer context, their results do not control for computation time."
    },
    {
      "page_no": 13,
      "bbox": [
        72.0,
        618.1917114257812,
        243.90464782714844,
        628.154296875
      ],
      "text": "4.3.3\nSynthetic Species Classification"
    },
    {
      "page_no": 13,
      "bbox": [
        71.52200317382812,
        634.1710815429688,
        563.13427734375,
        682.0344848632812
      ],
      "text": "We evaluate models on a downstream task of classifying between 5 different species by randomly sampling a contiguous\nsegment of their DNA. This task is adapted from HyenaDNA, which used the species {human, lemur, mouse, pig, hippo}.\nWe modify the task to be significantly more challenging by classifying between the five great apes species\n{human, chimpanzee, gorilla, orangutan, bonobo}, which are known to share 99% of their DNA."
    },
    {
      "page_no": 13,
      "bbox": [
        312.1670227050781,
        740.8311157226562,
        321.4322204589844,
        750.793701171875
      ],
      "text": "13"
    },
    {
      "page_no": 14,
      "bbox": [
        99.28529357910156,
        167.14593505859375,
        301.24041748046875,
        173.93972778320312
      ],
      "text": "103\n104\n105\n106"
    },
    {
      "page_no": 14,
      "bbox": [
        177.13641357421875,
        173.6463623046875,
        225.802001953125,
        181.9266815185547
      ],
      "text": "Sequence Length"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        157.6265869140625,
        89.9808120727539,
        164.13255310058594
      ],
      "text": "0.2"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        145.61813354492188,
        89.9808120727539,
        152.1240997314453
      ],
      "text": "0.3"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        133.6096649169922,
        89.9808120727539,
        140.11563110351562
      ],
      "text": "0.4"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        121.60120391845703,
        89.9808120727539,
        128.10716247558594
      ],
      "text": "0.5"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        109.59274291992188,
        89.9808120727539,
        116.09870147705078
      ],
      "text": "0.6"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        97.58428192138672,
        89.9808120727539,
        104.09024047851562
      ],
      "text": "0.7"
    },
    {
      "page_no": 14,
      "bbox": [
        82.9310531616211,
        85.57581329345703,
        89.9808120727539,
        92.08177185058594
      ],
      "text": "0.8"
    },
    {
      "page_no": 14,
      "bbox": [
        73.2298355102539,
        111.06336975097656,
        81.5101547241211,
        137.24488830566406
      ],
      "text": "Accuracy"
    },
    {
      "page_no": 14,
      "bbox": [
        131.56600952148438,
        74.39856719970703,
        271.3088684082031,
        82.67888641357422
      ],
      "text": "Finetuning Accuracy (Species DNA Classification)"
    },
    {
      "page_no": 14,
      "bbox": [
        112.33799743652344,
        86.56652069091797,
        148.7821807861328,
        114.47807312011719
      ],
      "text": "HyenaDNA 1.4M\nMamba 1.4M\nMamba 7M\nRandom"
    },
    {
      "page_no": 14,
      "bbox": [
        71.73100280761719,
        205.4044189453125,
        313.4253845214844,
        247.24330139160156
      ],
      "text": "Figure 6: (Great Apes DNA Classification.) Accuracy after fine-\ntuning on sequences of length 210 = 1024 up to 220 = 1048576 using\npretrained models of the same context length. Numerical results in\nTable 13."
    },
    {
      "page_no": 14,
      "bbox": [
        362.7232666015625,
        167.34539794921875,
        554.1956176757812,
        174.05734252929688
      ],
      "text": "104\n105\n106"
    },
    {
      "page_no": 14,
      "bbox": [
        429.7762756347656,
        173.7721405029297,
        477.8900451660156,
        181.9585723876953
      ],
      "text": "Sequence Length"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        161.08360290527344,
        345.0302734375,
        167.5157928466797
      ],
      "text": "1.300"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        149.72894287109375,
        345.0302734375,
        156.1611328125
      ],
      "text": "1.325"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        138.374267578125,
        345.0302734375,
        144.80645751953125
      ],
      "text": "1.350"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        127.01960754394531,
        345.0302734375,
        133.45179748535156
      ],
      "text": "1.375"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        115.66494750976562,
        345.0302734375,
        122.09713745117188
      ],
      "text": "1.400"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        104.3102798461914,
        345.0302734375,
        110.74246978759766
      ],
      "text": "1.425"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        92.95561981201172,
        345.0302734375,
        99.38780975341797
      ],
      "text": "1.450"
    },
    {
      "page_no": 14,
      "bbox": [
        332.5000915527344,
        81.60095977783203,
        345.0302734375,
        88.03314971923828
      ],
      "text": "1.475"
    },
    {
      "page_no": 14,
      "bbox": [
        322.90887451171875,
        106.89628601074219,
        331.0953063964844,
        142.79205322265625
      ],
      "text": "Bits Per Byte"
    },
    {
      "page_no": 14,
      "bbox": [
        388.39996337890625,
        75.64968872070312,
        519.2657470703125,
        83.83612060546875
      ],
      "text": "Scaling Laws - Sequence Length (YouTubeMix)"
    },
    {
      "page_no": 14,
      "bbox": [
        536.9348754882812,
        87.67967987060547,
        554.06640625,
        101.15010833740234
      ],
      "text": "S4+FFN\nMamba"
    },
    {
      "page_no": 14,
      "bbox": [
        321.6929931640625,
        205.31112670898438,
        563.117919921875,
        247.24330139160156
      ],
      "text": "Figure 7: (Audio Pretraining.) Mamba improves performance\nover prior state-of-the-art (Sashimi) in autoregressive audio model-\ning, while improving up to minute-long context or million-length\nsequences (controlling for computation)."
    },
    {
      "page_no": 14,
      "bbox": [
        72.0,
        271.3461608886719,
        273.3375549316406,
        283.3013610839844
      ],
      "text": "4.4\nAudio Modeling and Generation"
    },
    {
      "page_no": 14,
      "bbox": [
        72.0,
        288.7372131347656,
        563.1329345703125,
        310.74371337890625
      ],
      "text": "For the audio waveform modality, we compare primarily to the SaShiMi architecture and training protocols (Goel et al.\n2022). This model comprises:"
    },
    {
      "page_no": 14,
      "bbox": [
        85.10099792480469,
        318.714111328125,
        525.7976684570312,
        328.8776550292969
      ],
      "text": "1. a U-Net backbone with two stages of pooling by a factor 𝑝that doubles the model dimension 𝐷per stage,"
    },
    {
      "page_no": 14,
      "bbox": [
        85.10101318359375,
        336.6471252441406,
        278.2060546875,
        346.6097412109375
      ],
      "text": "2. alternating S4 and MLP blocks in each stage."
    },
    {
      "page_no": 14,
      "bbox": [
        71.52201080322266,
        354.58013916015625,
        493.7768859863281,
        364.5427551269531
      ],
      "text": "We consider replacing the S4+MLP blocks with Mamba blocks. Experiment details are in Appendix E.4."
    },
    {
      "page_no": 14,
      "bbox": [
        72.00000762939453,
        382.8167724609375,
        288.5371398925781,
        392.77935791015625
      ],
      "text": "4.4.1\nLong-Context Autoregressive Pretraining"
    },
    {
      "page_no": 14,
      "bbox": [
        71.52200317382812,
        398.7071228027344,
        561.6050415039062,
        470.529296875
      ],
      "text": "We evaluate pretraining quality (autoregressive next-sample prediction) on YouTubeMix (DeepSound 2017), a standard\npiano music dataset used by prior work consisting of 4 hours of solo piano music, sampled at a rate of 16000 Hz. Pretraining\ndetails largely follow the standard language modeling setup (Section 4.2). Figure 7 evaluates the effect of increasing training\nsequence lengths from 213 = 8192 to 220 ≈106, while keeping computation fixed. (There are some slight edge cases to the\nway the data is curated, which may lead to kinks in the scaling curves. For example, only minute-long clips were available\nso the maximum sequence length is actually bounded by 60𝑠· 16000𝐻𝑧= 960000.)"
    },
    {
      "page_no": 14,
      "bbox": [
        72.0,
        478.89923095703125,
        561.5977783203125,
        512.0919189453125
      ],
      "text": "Both Mamba and the SaShiMi (S4+MLP) baseline improve consistently with longer context lengths; Mamba is\nbetter throughout, and the gap widens at longer lengths. The main metric is bits per byte (BPB), which is a constant\nfactor log(2) of the standard negative log-likelihood (NLL) loss for pretraining other modalities."
    },
    {
      "page_no": 14,
      "bbox": [
        71.52200317382812,
        518.4427490234375,
        561.6031494140625,
        540.2606811523438
      ],
      "text": "We note one important detail: this is the only experiment in this paper in which we switched from the real parameterization\nto complex (Section 3.6). We show additional ablations in Appendix E.4."
    },
    {
      "page_no": 14,
      "bbox": [
        72.0,
        558.5357055664062,
        256.6468200683594,
        568.498291015625
      ],
      "text": "4.4.2\nAutoregressive Speech Generation"
    },
    {
      "page_no": 14,
      "bbox": [
        71.77100372314453,
        574.4114379882812,
        561.85693359375,
        608.3826904296875
      ],
      "text": "SC09 is a benchmark speech generation dataset (Donahue, McAuley, and Puckette 2019; Warden 2018), consisting of\n1-second clips sampled at 16000 Hz of the digits “zero” through “nine” with highly variable characteristics. We largely\nfollow the autoregressive training setup and generation protocol of Goel et al. (2022)."
    },
    {
      "page_no": 14,
      "bbox": [
        71.52200317382812,
        616.25439453125,
        563.3784790039062,
        674.13671875
      ],
      "text": "Table 4 shows automated metrics of the Mamba-UNet model compared to a variety of baselines from Goel et al. (2022):\nWaveNet (Oord et al. 2016), SampleRNN (Mehri et al. 2017), WaveGAN (Donahue, McAuley, and Puckette 2019), DiffWave (Z.\nKong et al. 2021), and SaShiMi. A small Mamba model outperforms the state-of-the-art (and much larger) GAN-\nand diffusion- based models. A larger model parameter-matched to the baselines further improves on fidelity metrics\ndramatically."
    },
    {
      "page_no": 14,
      "bbox": [
        71.70099639892578,
        682.0074462890625,
        561.604248046875,
        715.979736328125
      ],
      "text": "Table 5 takes the small Mamba model and investigates combinations of different architectures for the outer stages and\ncenter stage. It shows that Mamba is consistently better than S4+MLP in the outer blocks, and Mamba > S4+MLP >\nMHA+MLP in the center blocks."
    },
    {
      "page_no": 14,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "14"
    },
    {
      "page_no": 15,
      "bbox": [
        71.68599700927734,
        71.65966796875,
        317.33843994140625,
        113.44930267333984
      ],
      "text": "Table 4: (SC09) Automated metrics for unconditional generation on\na challenging dataset of fixed-length speech clips. (Top to Bottom)\nAutoregressive baselines, non-autoregressive baselines, Mamba, and\ndataset metrics."
    },
    {
      "page_no": 15,
      "bbox": [
        90.23899841308594,
        128.87979125976562,
        296.7441101074219,
        137.1099090576172
      ],
      "text": "Model\nParams\nNLL ↓\nFID ↓\nIS ↑\nmIS ↑\nAM ↓"
    },
    {
      "page_no": 15,
      "bbox": [
        90.23899841308594,
        141.85079956054688,
        291.86553955078125,
        164.76454162597656
      ],
      "text": "SampleRNN\n35.0M\n2.042\n8.96\n1.71\n3.02\n1.76\nWaveNet\n4.2M\n1.925\n5.08\n2.27\n5.80\n1.47\nSaShiMi\n5.8M\n1.873\n1.99\n5.13\n42.57\n0.74"
    },
    {
      "page_no": 15,
      "bbox": [
        90.23899841308594,
        170.76181030273438,
        291.86553955078125,
        193.6765899658203
      ],
      "text": "WaveGAN\n19.1M\n-\n2.03\n4.90\n36.10\n0.80\nDiffWave\n24.1M\n-\n1.92\n5.26\n51.21\n0.68\n+ SaShiMi\n23.0M\n-\n1.42\n5.94\n69.17\n0.59"
    },
    {
      "page_no": 15,
      "bbox": [
        90.23899841308594,
        199.67379760742188,
        293.0558166503906,
        216.29168701171875
      ],
      "text": "Mamba\n6.1M\n1.852\n0.94\n6.26\n88.54\n0.52\nMamba\n24.3M\n1.860\n0.67\n7.33\n144.9\n0.36"
    },
    {
      "page_no": 15,
      "bbox": [
        90.23898315429688,
        220.3171844482422,
        292.7615966796875,
        235.7073211669922
      ],
      "text": "Train\n-\n-\n0.00\n8.56\n292.5\n0.16\nTest\n-\n-\n0.02\n8.33\n257.6\n0.19"
    },
    {
      "page_no": 15,
      "bbox": [
        321.42401123046875,
        71.65518188476562,
        561.7720947265625,
        157.28431701660156
      ],
      "text": "Table 5: (SC09 Model Ablations) Models with 6M parameters. In\nSaShiMi’s U-Net backbone, there are 8 center blocks operating on\nsequence length 1000, sandwiched on each side by 8 outer blocks on\nsequence length 4000, sandwiched by 8 outer blocks on sequence\nlength 16000 (40 blocks total). The architecture of the 8 center\nblocks are ablated independently of the rest. Note that Transformers\n(MHA+MLP) were not tested in the more important outer blocks\nbecause of efficiency constraints."
    },
    {
      "page_no": 15,
      "bbox": [
        337.5260009765625,
        172.71578979492188,
        543.9520263671875,
        180.94590759277344
      ],
      "text": "Outer\nCenter\nNLL ↓\nFID ↓\nIS ↑\nmIS ↑\nAM ↓"
    },
    {
      "page_no": 15,
      "bbox": [
        337.5260009765625,
        185.68679809570312,
        540.2628173828125,
        234.1846923828125
      ],
      "text": "S4+MLP\nMHA+MLP\n1.859\n1.45\n5.06\n47.03\n0.70\nS4+MLP\nS4+MLP\n1.867\n1.43\n5.42\n53.54\n0.65\nS4+MLP\nMamba\n1.859\n1.42\n5.71\n56.51\n0.64\nMamba\nMHA+MLP\n1.850\n1.37\n5.63\n58.23\n0.62\nMamba\nS4+MLP\n1.853\n1.07\n6.05\n73.34\n0.55\nMamba\nMamba\n1.852\n0.94\n6.26\n88.54\n0.52"
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        261.2861633300781,
        274.1385498046875,
        273.2413635253906
      ],
      "text": "4.5\nSpeed and Memory Benchmarks"
    },
    {
      "page_no": 15,
      "bbox": [
        71.52200317382812,
        278.6673889160156,
        561.603759765625,
        360.4596862792969
      ],
      "text": "We benchmark the speed of the SSM scan operation (state expansion 𝑁= 16), as well as the end-to-end inference\nthroughput of Mamba, in Figure 8. Our efficient SSM scan is faster than the best attention implementation that we know of\n(FlashAttention-2 (Dao 2024)) beyond sequence length 2K, and up to 20-40× faster than a standard scan implementation\nin PyTorch. Mamba achieves 4-5× higher inference throughput than a Transformer of similar size, since without the\nKV cache it can use much higher batch sizes. For example, a Mamba-6.9B (untrained) would have higher inference\nthroughput than a 5× smaller Transformer-1.3B. Details in Appendix E.5, which additionally includes a benchmark of\nmemory consumption."
    },
    {
      "page_no": 15,
      "bbox": [
        109.2316665649414,
        466.40338134765625,
        303.676025390625,
        480.2857971191406
      ],
      "text": "512\n1k\n2k\n4k\n8k\n16k\n32k\n64k\n128k\n256k\n512k\nSequence length"
    },
    {
      "page_no": 15,
      "bbox": [
        93.134765625,
        451.22259521484375,
        99.96862030029297,
        457.529296875
      ],
      "text": "0.1"
    },
    {
      "page_no": 15,
      "bbox": [
        97.2429428100586,
        437.0158386230469,
        99.96888732910156,
        443.3225402832031
      ],
      "text": "1"
    },
    {
      "page_no": 15,
      "bbox": [
        94.51764678955078,
        422.8091125488281,
        99.96953582763672,
        429.1158142089844
      ],
      "text": "10"
    },
    {
      "page_no": 15,
      "bbox": [
        91.79235076904297,
        408.6023864746094,
        99.97018432617188,
        414.9090881347656
      ],
      "text": "100"
    },
    {
      "page_no": 15,
      "bbox": [
        89.06705474853516,
        394.3956298828125,
        99.97083282470703,
        400.70233154296875
      ],
      "text": "1000"
    },
    {
      "page_no": 15,
      "bbox": [
        79.6089859008789,
        410.50054931640625,
        87.63571166992188,
        438.44903564453125
      ],
      "text": "Time (ms)"
    },
    {
      "page_no": 15,
      "bbox": [
        128.5899200439453,
        376.2113037109375,
        283.019775390625,
        384.2380065917969
      ],
      "text": "Scan vs Convolution vs Attention time (A100 80GB PCIe)"
    },
    {
      "page_no": 15,
      "bbox": [
        121.64108276367188,
        388.006591796875,
        157.55799865722656,
        408.3040466308594
      ],
      "text": "FlashAttention-2\nConvolution\nScan (PyTorch)"
    },
    {
      "page_no": 15,
      "bbox": [
        121.64108276367188,
        409.17486572265625,
        146.28379821777344,
        422.4701843261719
      ],
      "text": "Scan (ours)\nOOM"
    },
    {
      "page_no": 15,
      "bbox": [
        364.28082275390625,
        468.72735595703125,
        536.1494140625,
        480.68658447265625
      ],
      "text": "1\n2\n4\n8\n16\n32\n64\n128\nBatch size"
    },
    {
      "page_no": 15,
      "bbox": [
        334.6982421875,
        442.0113830566406,
        341.7431335449219,
        447.44439697265625
      ],
      "text": "500"
    },
    {
      "page_no": 15,
      "bbox": [
        332.35052490234375,
        420.36279296875,
        341.7437438964844,
        425.7958068847656
      ],
      "text": "1000"
    },
    {
      "page_no": 15,
      "bbox": [
        332.35052490234375,
        398.7142028808594,
        341.7437438964844,
        404.147216796875
      ],
      "text": "1500"
    },
    {
      "page_no": 15,
      "bbox": [
        324.2027282714844,
        397.47918701171875,
        331.1174621582031,
        452.94287109375
      ],
      "text": "Throughput (tokens / s)"
    },
    {
      "page_no": 15,
      "bbox": [
        355.7907409667969,
        456.94073486328125,
        358.99298095703125,
        459.4102783203125
      ],
      "text": "140"
    },
    {
      "page_no": 15,
      "bbox": [
        379.67236328125,
        452.3023986816406,
        382.8746032714844,
        454.7719421386719
      ],
      "text": "247"
    },
    {
      "page_no": 15,
      "bbox": [
        403.55401611328125,
        443.8805236816406,
        406.7562561035156,
        446.3500671386719
      ],
      "text": "441"
    },
    {
      "page_no": 15,
      "bbox": [
        427.4356384277344,
        430.7698669433594,
        430.63787841796875,
        433.2394104003906
      ],
      "text": "744"
    },
    {
      "page_no": 15,
      "bbox": [
        450.7826232910156,
        415.8247375488281,
        455.0522766113281,
        418.2942810058594
      ],
      "text": "1089"
    },
    {
      "page_no": 15,
      "bbox": [
        474.66424560546875,
        400.4132995605469,
        478.93389892578125,
        402.8828430175781
      ],
      "text": "1445"
    },
    {
      "page_no": 15,
      "bbox": [
        498.5458984375,
        389.8891296386719,
        502.8155517578125,
        392.3586730957031
      ],
      "text": "1688"
    },
    {
      "page_no": 15,
      "bbox": [
        522.427490234375,
        384.4414978027344,
        526.6970825195312,
        386.9110412597656
      ],
      "text": "1814"
    },
    {
      "page_no": 15,
      "bbox": [
        361.6987609863281,
        459.58050537109375,
        363.8335876464844,
        462.050048828125
      ],
      "text": "79"
    },
    {
      "page_no": 15,
      "bbox": [
        385.0457458496094,
        457.283447265625,
        388.24798583984375,
        459.75299072265625
      ],
      "text": "132"
    },
    {
      "page_no": 15,
      "bbox": [
        408.9273681640625,
        454.3652648925781,
        412.1296081542969,
        456.8348083496094
      ],
      "text": "199"
    },
    {
      "page_no": 15,
      "bbox": [
        432.8089904785156,
        451.5108642578125,
        436.01123046875,
        453.98040771484375
      ],
      "text": "265"
    },
    {
      "page_no": 15,
      "bbox": [
        456.6906433105469,
        449.01580810546875,
        459.89288330078125,
        451.4853515625
      ],
      "text": "323"
    },
    {
      "page_no": 15,
      "bbox": [
        480.572265625,
        447.21295166015625,
        483.7745056152344,
        449.6824951171875
      ],
      "text": "364"
    },
    {
      "page_no": 15,
      "bbox": [
        367.0721130371094,
        460.4764404296875,
        532.0368041992188,
        465.4605407714844
      ],
      "text": "OOM\nOOM\n58"
    },
    {
      "page_no": 15,
      "bbox": [
        390.41912841796875,
        458.630615234375,
        393.6213684082031,
        461.10015869140625
      ],
      "text": "101"
    },
    {
      "page_no": 15,
      "bbox": [
        414.3007507324219,
        455.531982421875,
        417.50299072265625,
        458.00152587890625
      ],
      "text": "172"
    },
    {
      "page_no": 15,
      "bbox": [
        438.182373046875,
        451.6922302246094,
        441.3846130371094,
        454.1617736816406
      ],
      "text": "261"
    },
    {
      "page_no": 15,
      "bbox": [
        462.0639953613281,
        447.2521667480469,
        465.2662353515625,
        449.7217102050781
      ],
      "text": "364"
    },
    {
      "page_no": 15,
      "bbox": [
        485.94561767578125,
        443.80609130859375,
        489.1478576660156,
        446.275634765625
      ],
      "text": "443"
    },
    {
      "page_no": 15,
      "bbox": [
        509.8272705078125,
        440.6988525390625,
        536.9110717773438,
        444.2304992675781
      ],
      "text": "490\n515"
    },
    {
      "page_no": 15,
      "bbox": [
        372.44549560546875,
        457.7914733886719,
        470.6396179199219,
        463.4698486328125
      ],
      "text": "46\n66\n91\n109\n120"
    },
    {
      "page_no": 15,
      "bbox": [
        490.82501220703125,
        462.9909973144531,
        542.7835693359375,
        465.4605407714844
      ],
      "text": "OOM\nOOM\nOOM"
    },
    {
      "page_no": 15,
      "bbox": [
        381.1417541503906,
        376.2379150390625,
        516.9580078125,
        383.15264892578125
      ],
      "text": "Inference throughput on A100 80GB (prompt length 2048)"
    },
    {
      "page_no": 15,
      "bbox": [
        360.411865234375,
        386.3991394042969,
        393.0589904785156,
        409.6668701171875
      ],
      "text": "Mamba 1.4B\nTransformer 1.3B\nMamba 6.9B\nTransformer 6.7B"
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        491.74920654296875,
        562.6616821289062,
        513.1906127929688
      ],
      "text": "Figure 8: (Efficiency Benchmarks.) (Left) Training: our efficient scan is 40× faster than a standard implementation. (Right) Inference:\nas a recurrent model, Mamba can achieve 5× higher throughput than Transformers."
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        537.3231811523438,
        188.45562744140625,
        549.2783813476562
      ],
      "text": "4.6\nModel Ablations"
    },
    {
      "page_no": 15,
      "bbox": [
        71.52200317382812,
        554.86279296875,
        561.5975341796875,
        578.4408569335938
      ],
      "text": "We perform a series of detailed ablations on components of our model, focusing on the setting of language modeling with\nsize ≈350M models at Chinchilla token counts (same setting as Figure 4)."
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        594.9957275390625,
        159.29229736328125,
        604.9583129882812
      ],
      "text": "4.6.1\nArchitecture"
    },
    {
      "page_no": 15,
      "bbox": [
        71.70099639892578,
        610.9700927734375,
        497.6916809082031,
        620.9326782226562
      ],
      "text": "Table 6 investigates the effects of the architecture (block) and its inner SSM layer (Figure 3). We find that"
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        628.9031372070312,
        553.0050659179688,
        638.86572265625
      ],
      "text": "• Among previous non-selective (LTI) SSMs, which are equivalent to global convolutions, performance is very similar."
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        646.8361206054688,
        562.692138671875,
        668.7537231445312
      ],
      "text": "• Replacing the complex-valued S4 variant from previous work with a real-valued one does not affect performance much,\nsuggesting that (at least for LM) real-valued SSMs may be a better choice when accounting for hardware efficiency."
    },
    {
      "page_no": 15,
      "bbox": [
        72.0,
        676.6254272460938,
        561.60107421875,
        698.6417236328125
      ],
      "text": "• Replacing any of these with a selective SSM (S6) significantly improves performance, validating the motivation of\nSection 3."
    },
    {
      "page_no": 15,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "15"
    },
    {
      "page_no": 16,
      "bbox": [
        71.73100280761719,
        71.67765045166016,
        562.5838623046875,
        102.49031829833984
      ],
      "text": "Table 6: (Ablations: Architecture and SSM layer.) The Mamba block performs similarly to H3 while being simpler. In the inner layer,\nthere is little difference among different parameterizations of LTI models, while selective SSMs (S6) provide a large improvement. More\nspecifically, the S4 (real) variant is S4D-Real and the S4 (complex) variant is S4D-Lin."
    },
    {
      "page_no": 16,
      "bbox": [
        111.95800018310547,
        117.7350845336914,
        301.018310546875,
        127.69768524169922
      ],
      "text": "Model\nArch.\nSSM Layer\nPerplexity"
    },
    {
      "page_no": 16,
      "bbox": [
        111.95797729492188,
        134.6910858154297,
        274.6581726074219,
        182.9309844970703
      ],
      "text": "Hyena\nH3\nHyena\n10.24\nH3\nH3\nS4 (complex)\n10.30\n-\nH3\nS4 (real)\n10.34\n-\nH3\nS6\n8.95"
    },
    {
      "page_no": 16,
      "bbox": [
        323.43499755859375,
        117.7350845336914,
        519.1503295898438,
        127.69768524169922
      ],
      "text": "Model\nArch.\nSSM Layer\nPerplexity"
    },
    {
      "page_no": 16,
      "bbox": [
        323.43499755859375,
        134.6910858154297,
        492.7901916503906,
        182.9309844970703
      ],
      "text": "-\nMamba\nHyena\n10.75\n-\nMamba\nS4 (complex)\n10.54\n-\nMamba\nS4 (real)\n10.56\nMamba\nMamba\nS6\n8.69"
    },
    {
      "page_no": 16,
      "bbox": [
        71.73100280761719,
        197.22494506835938,
        318.31195068359375,
        228.1573028564453
      ],
      "text": "Table 7: (Ablations: Selective parameters.) Δ is the most impor-\ntant parameter (Theorem 1), but using multiple selective parameters\ntogether synergizes."
    },
    {
      "page_no": 16,
      "bbox": [
        74.66200256347656,
        243.4031219482422,
        311.64801025390625,
        255.80471801757812
      ],
      "text": "Selective Δ\nSelective 𝑩\nSelective 𝑪\nPerplexity"
    },
    {
      "page_no": 16,
      "bbox": [
        74.66200256347656,
        260.3154296875,
        284.95819091796875,
        318.14166259765625
      ],
      "text": "✗\n✗\n✗\n10.93\n✗\n✓\n✗\n10.15\n✗\n✗\n✓\n9.98\n✓\n✗\n✗\n9.81\n✓\n✓\n✓\n8.71"
    },
    {
      "page_no": 16,
      "bbox": [
        340.95001220703125,
        197.66610717773438,
        562.983642578125,
        239.5983428955078
      ],
      "text": "Table 8: (Ablations: Parameterization of 𝑨.) The more\nstandard initializations based on S4D-Lin (Gu, Gupta, et al.\n2022) perform worse than S4D-Real or a random initialization,\nwhen the SSM is selective."
    },
    {
      "page_no": 16,
      "bbox": [
        357.5559997558594,
        254.84312438964844,
        542.83447265625,
        267.2447204589844
      ],
      "text": "𝑨𝑛Initialization\nField\nPerplexity"
    },
    {
      "page_no": 16,
      "bbox": [
        357.5559997558594,
        270.5851745605469,
        392.0908203125,
        284.23370361328125
      ],
      "text": "𝑨𝑛= −1"
    },
    {
      "page_no": 16,
      "bbox": [
        357.55596923828125,
        271.8320617675781,
        511.5120544433594,
        320.0996398925781
      ],
      "text": "2 + 𝑛𝑖\nComplex\n9.16\n𝑨𝑛= −1/2\nReal\n8.85\n𝑨𝑛= −(𝑛+ 1)\nReal\n8.71\n𝑨𝑛∼exp(N (0, 1))\nReal\n8.71"
    },
    {
      "page_no": 16,
      "bbox": [
        72.0,
        344.0673828125,
        561.5969848632812,
        366.0837097167969
      ],
      "text": "• The Mamba architecture performs similarly to the H3 architecture (and seems slightly better when using a selective\nlayer)."
    },
    {
      "page_no": 16,
      "bbox": [
        71.52200317382812,
        374.1537780761719,
        561.6029052734375,
        395.9717102050781
      ],
      "text": "We also investigate interleaving the Mamba block with other blocks such as MLP (a traditional architecture) MHA (a hybrid\nattention architecture) in Appendix E.2.2."
    },
    {
      "page_no": 16,
      "bbox": [
        72.0,
        414.2467346191406,
        163.12789916992188,
        424.2093200683594
      ],
      "text": "4.6.2\nSelective SSM"
    },
    {
      "page_no": 16,
      "bbox": [
        71.70099639892578,
        430.1617736816406,
        563.2880859375,
        454.0875244140625
      ],
      "text": "Table 7 ablates the selective SSM layer by considering different combinations of selective Δ, 𝑩, and 𝑪parameters (Algo-\nrithm 2), showing that Δ is the most important parameter due to its connection to RNN gating (Theorem 1)."
    },
    {
      "page_no": 16,
      "bbox": [
        71.70099639892578,
        460.0104064941406,
        563.1328125,
        517.8917236328125
      ],
      "text": "Table 8 considers different initializations of the SSM, which have been shown to make a large difference in some data\nmodalities and settings (Gu, Goel, and Ré 2022; Gu, Gupta, et al. 2022). On language modeling, we find that simpler\nreal-valued diagonal initializations (S4D-Real, row 3) instead of more standard complex-valued parameterizations (S4D-Lin,\nrow 1) perform better. Random initializations also work well, consistent with findings from prior work (Mehta et al.\n2023)."
    },
    {
      "page_no": 16,
      "bbox": [
        71.70099639892578,
        525.7830810546875,
        561.598388671875,
        559.7346801757812
      ],
      "text": "Table 9 and Table 10 consider varying the dimension of the Δ and (𝑩, 𝑪) projections respectively. Changing them from\nstatic to selective provides the most benefit, while increasing the dimensions further generally improves performance\nmodestly with a small increase in parameter count."
    },
    {
      "page_no": 16,
      "bbox": [
        72.0,
        567.6162719726562,
        561.8321533203125,
        601.5776977539062
      ],
      "text": "Of particular note is the dramatic improvement of the selective SSM when the state size 𝑁is increased, with over a 1.0\nperplexity improvement for a cost of only 1% additional parameters. This validates our core motivation in Sections 3.1\nand 3.3."
    },
    {
      "page_no": 16,
      "bbox": [
        72.0,
        623.586669921875,
        163.72959899902344,
        637.932861328125
      ],
      "text": "5\nDiscussion"
    },
    {
      "page_no": 16,
      "bbox": [
        71.52200317382812,
        646.2921142578125,
        334.454833984375,
        656.2546997070312
      ],
      "text": "We discuss related work, limitations, and some future directions."
    },
    {
      "page_no": 16,
      "bbox": [
        72.0,
        672.0394287109375,
        561.5960083007812,
        694.0557250976562
      ],
      "text": "Related Work.\nAppendix A discusses how the selection mechanism relates to similar concepts. Appendix B has an\nextended related work of SSMs and other related models."
    },
    {
      "page_no": 16,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "16"
    },
    {
      "page_no": 17,
      "bbox": [
        71.66799926757812,
        71.51712036132812,
        230.1908721923828,
        159.083984375
      ],
      "text": "Table 9: (Ablations: Expressivity of Δ.)\nThe selection mechanism of Δ constructs it\nwith a projection of the input. Projecting it\neven to dim. 1 provides a large increase in\nperformance; increasing it further provides\nfurther improvements at the cost of a mod-\nest increase in parameters. State size fixed\nto 𝑁= 16."
    },
    {
      "page_no": 17,
      "bbox": [
        72.0,
        172.5300750732422,
        253.47909545898438,
        184.44149780273438
      ],
      "text": "Size of Δ proj.\nParams (M)\nPerplexity"
    },
    {
      "page_no": 17,
      "bbox": [
        71.99999237060547,
        189.48509216308594,
        222.1568145751953,
        283.1347351074219
      ],
      "text": "-\n358.9\n9.12\n1\n359.1\n8.97\n2\n359.3\n8.97\n4\n359.7\n8.91\n8\n360.5\n8.83\n16\n362.1\n8.84\n32\n365.2\n8.80\n64\n371.5\n8.71"
    },
    {
      "page_no": 17,
      "bbox": [
        243.093994140625,
        74.17662048339844,
        561.7714233398438,
        128.64324951171875
      ],
      "text": "Table 10: (Ablations: SSM state dimension.) (Top) Constant 𝑩and 𝑪(Bottom) Selective\n𝑩and 𝑪. Increasing the SSM state dimension 𝑁, which can be viewed as an expansion\nfactor on the dimension of the recurrent state, can significantly improve performance for\na negligible cost in parameters/FLOPs, but only when 𝑩and 𝑪are also selective. Size of\nΔ projection fixed to 64."
    },
    {
      "page_no": 17,
      "bbox": [
        300.2449951171875,
        142.1340789794922,
        502.2271728515625,
        152.29759216308594
      ],
      "text": "State dimension 𝑁\nParams (M)\nPerplexity"
    },
    {
      "page_no": 17,
      "bbox": [
        300.2449951171875,
        159.09007263183594,
        470.90472412109375,
        216.87274169921875
      ],
      "text": "1\n367.1\n9.88\n2\n367.4\n9.86\n4\n368.0\n9.82\n8\n369.1\n9.82\n16\n371.5\n9.81"
    },
    {
      "page_no": 17,
      "bbox": [
        300.2449951171875,
        223.86607360839844,
        470.90472412109375,
        281.6496887207031
      ],
      "text": "1\n367.1\n9.73\n2\n367.4\n9.40\n4\n368.0\n9.09\n8\n369.1\n8.84\n16\n371.5\n8.71"
    },
    {
      "page_no": 17,
      "bbox": [
        72.0,
        308.1963806152344,
        561.6051025390625,
        366.0787048339844
      ],
      "text": "No Free Lunch: Continuous-Discrete Spectrum.\nStructured SSMs were originally defined as discretizations of\ncontinuous systems (1), and have had a strong inductive bias toward continuous-time data modalities such as perceptual\nsignals (e.g. audio, video). As discussed in Sections 3.1 and 3.5, the selection mechanism overcomes their weaknesses on\ndiscrete modalities such as text and DNA; but this conversely can impede their performance on data that LTI SSMs excel\non. Our ablations on audio waveforms examine this tradeoff in more detail."
    },
    {
      "page_no": 17,
      "bbox": [
        72.0,
        381.6567687988281,
        563.2802734375,
        427.39068603515625
      ],
      "text": "Downstream Affordances.\nTransformer-based foundation models (particularly LLMs) have a rich ecosystem of proper-\nties and modes of interaction with pretrained models, such as fine-tuning, adaptation, prompting, in-context learning,\ninstruction tuning, RLHF, quantization, and so on. We are particularly interested in whether Transformer alternatives such\nas SSMs have similar properties and affordances."
    },
    {
      "page_no": 17,
      "bbox": [
        71.70099639892578,
        442.9298095703125,
        561.6033325195312,
        500.65771484375
      ],
      "text": "Scaling.\nOur empirical evaluation is limited to small model sizes, below the threshold of most strong open source LLMs\n(e.g. Llama (Touvron et al. 2023)) as well as other recurrent models such as RWKV (B. Peng et al. 2023) and RetNet (Y. Sun\net al. 2023), which have been evaluated at the 7B parameter scale and beyond. It remains to assess whether Mamba still\ncompares favorably at these larger sizes. We also note that scaling SSMs may involve further engineering challenges and\nadjustments to the model that are not discussed in this paper."
    },
    {
      "page_no": 17,
      "bbox": [
        72.0,
        522.2677001953125,
        167.86131286621094,
        536.6138916015625
      ],
      "text": "6\nConclusion"
    },
    {
      "page_no": 17,
      "bbox": [
        71.52200317382812,
        544.8743896484375,
        561.7930297851562,
        614.711669921875
      ],
      "text": "We introduce a selection mechanism to structured state space models, allowing them to perform context-dependent\nreasoning while scaling linearly in sequence length. When incorporated into a simple attention-free architecture, Mamba\nachieves state-of-the-art results on a diverse set of domains, where it matches or exceeds the performance of strong\nTransformer models. We are excited about the broad applications of selective state space models to build foundation models\nfor different domains, especially in emerging modalities requiring long context such as genomics, audio, and video. Our\nresults suggest that Mamba is a strong candidate to be a general sequence model backbone."
    },
    {
      "page_no": 17,
      "bbox": [
        72.0,
        632.5877075195312,
        156.00465393066406,
        642.55029296875
      ],
      "text": "Acknowledgments"
    },
    {
      "page_no": 17,
      "bbox": [
        71.52200317382812,
        648.5621337890625,
        421.07989501953125,
        658.5247192382812
      ],
      "text": "We thank Karan Goel, Arjun Desai, and Kush Bhatia for helpful feedback on the draft."
    },
    {
      "page_no": 17,
      "bbox": [
        72.0,
        680.1346435546875,
        143.47276306152344,
        694.4808349609375
      ],
      "text": "References"
    },
    {
      "page_no": 17,
      "bbox": [
        81.26499938964844,
        698.9880981445312,
        562.5930786132812,
        723.3687133789062
      ],
      "text": "[1]\nMartin Arjovsky, Amar Shah, and Yoshua Bengio. “Unitary Evolution Recurrent Neural Networks”. In: The Interna-\ntional Conference on Machine Learning (ICML). 2016, pp. 1120–1128."
    },
    {
      "page_no": 17,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "17"
    },
    {
      "page_no": 18,
      "bbox": [
        76.63296508789062,
        72.8063735961914,
        576.6407470703125,
        718.9547119140625
      ],
      "text": "[2]\nŽiga Avsec, Vikram Agarwal, Daniel Visentin, Joseph R Ledsam, Agnieszka Grabska-Barwinska, Kyle R Taylor,\nYannis Assael, John Jumper, Pushmeet Kohli, and David R Kelley. “Effective Gene Expression Prediction from\nSequence by Integrating Long-range Interactions”. In: Nature Methods 18.10 (2021), pp. 1196–1203.\n[3]\nJimmy Ba, Geoffrey E Hinton, Volodymyr Mnih, Joel Z Leibo, and Catalin Ionescu. “Using Fast Weights to Attend\nto the Recent Past”. In: Advances in Neural Information Processing Systems (NeurIPS) 29 (2016).\n[4]\nJimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. “Layer Normalization”. In: arXiv preprint arXiv:1607.06450\n(2016).\n[5]\nDzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. “Neural Machine Translation by Jointly Learning to\nAlign and Translate”. In: The International Conference on Learning Representations (ICLR). 2015.\n[6]\nDavid Balduzzi and Muhammad Ghifary. “Strongly-typed Recurrent Neural Networks”. In: International Conference\non Machine Learning. PMLR. 2016, pp. 1292–1300.\n[7]\nStella Biderman, Hailey Schoelkopf, Quentin Gregory Anthony, Herbie Bradley, Kyle O’Brien, Eric Hallahan,\nMohammad Aflah Khan, Shivanshu Purohit, USVSN Sai Prashanth, Edward Raff, et al. “Pythia: A Suite for Analyzing\nLarge Language Models across Training and Scaling”. In: The International Conference on Machine Learning (ICML).\nPMLR. 2023, pp. 2397–2430.\n[8]\nYonatan Bisk, Rowan Zellers, Jianfeng Gao, Yejin Choi, et al. “PIQA: Reasoning about Physical Commonsense in\nNatural Language”. In: Proceedings of the AAAI conference on Artificial Intelligence. Vol. 34. 2020.\n[9]\nSid Black, Stella Biderman, Eric Hallahan, Quentin Anthony, Leo Gao, Laurence Golding, Horace He, Connor Leahy,\nKyle McDonell, Jason Phang, et al. “Gpt-NeoX-20B: An Open-source Autoregressive Language Model”. In: arXiv\npreprint arXiv:2204.06745 (2022).\n[10]\nGuy E Blelloch. “Prefix Sums and Their Applications”. In: (1990).\n[11]\nJames Bradbury, Stephen Merity, Caiming Xiong, and Richard Socher. “Quasi-recurrent Neural Networks”. In:\narXiv preprint arXiv:1611.01576 (2016).\n[12]\nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan,\nPranav Shyam, Girish Sastry, Amanda Askell, et al. “Language Models are Few-shot Learners”. In: Advances in\nNeural Information Processing Systems (NeurIPS) 33 (2020), pp. 1877–1901.\n[13]\nAydar Bulatov, Yuri Kuratov, and Mikhail S Burtsev. “Scaling Transformer to 1M tokens and Beyond with RMT”.\nIn: arXiv preprint arXiv:2304.11062 (2023).\n[14]\nRewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. “Generating Long Sequences with Sparse Transformers”.\nIn: arXiv preprint arXiv:1904.10509 (2019).\n[15]\nKrzysztof Choromanski, Valerii Likhosherstov, David Dohan, Xingyou Song, Andreea Gane, Tamas Sarlos, Peter\nHawkins, Jared Davis, Afroz Mohiuddin, Lukasz Kaiser, et al. “Rethinking Attention with Performers”. In: The\nInternational Conference on Learning Representations (ICLR). 2021.\n[16]\nAakanksha Chowdhery, Sharan Narang, Jacob Devlin, Maarten Bosma, Gaurav Mishra, Adam Roberts, Paul Barham,\nHyung Won Chung, Charles Sutton, Sebastian Gehrmann, et al. “PaLM: Scaling Language Modeling with Pathways”.\nIn: Journal of Machine Learning Research 24.240 (2023), pp. 1–113. url: http://jmlr.org/papers/v24/22-\n1144.html.\n[17]\nJunyoung Chung, Caglar Gulcehre, KyungHyun Cho, and Yoshua Bengio. “Empirical Evaluation of Gated Recurrent\nNeural Networks on Sequence Modeling”. In: arXiv preprint arXiv:1412.3555 (2014).\n[18]\nPeter Clark, Isaac Cowhey, Oren Etzioni, Tushar Khot, Ashish Sabharwal, Carissa Schoenick, and Oyvind Tafjord.\n“Think you have Solved Question Answering? Try ARC, the AI2 Reasoning Challenge”. In: arXiv preprint arXiv:1803.05457\n(2018).\n[19]\nTri Dao. “FlashAttention-2: Faster Attention with Better Parallelism and Work Partitioning”. In: The International\nConference on Learning Representations (ICLR). 2024.\n[20]\nTri Dao, Daniel Y Fu, Stefano Ermon, Atri Rudra, and Christopher Ré. “FlashAttention: Fast and Memory-Efficient\nExact Attention with IO-Awareness”. In: Advances in Neural Information Processing Systems (NeurIPS). 2022.\n[21]\nTri Dao, Daniel Y Fu, Khaled K Saab, Armin W Thomas, Atri Rudra, and Christopher Ré. “Hungry Hungry Hippos:\nTowards Language Modeling with State Space Models”. In: The International Conference on Learning Representations\n(ICLR). 2023.\n[22]\nYann N Dauphin, Angela Fan, Michael Auli, and David Grangier. “Language Modeling with Gated Convolutional\nNetworks”. In: The International Conference on Machine Learning (ICML). PMLR. 2017, pp. 933–941.\n[23]\nDeepSound. SampleRNN. https://github.com/deepsound-project/samplernn-pytorch. 2017.\n[24]\nJiayu Ding, Shuming Ma, Li Dong, Xingxing Zhang, Shaohan Huang, Wenhui Wang, and Furu Wei. “LongNet:\nScaling Transformers to 1,000,000,000 Tokens”. In: arXiv preprint arXiv:2307.02486 (2023)."
    },
    {
      "page_no": 18,
      "bbox": [
        312.1679992675781,
        740.8311157226562,
        321.4331970214844,
        750.793701171875
      ],
      "text": "18"
    },
    {
      "page_no": 19,
      "bbox": [
        76.63298034667969,
        72.90506744384766,
        563.1368408203125,
        718.9547119140625
      ],
      "text": "[25]\nChris Donahue, Julian McAuley, and Miller Puckette. “Adversarial Audio Synthesis”. In: The International Conference\non Learning Representations (ICLR). 2019.\n[26]\nAlexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner,\nMostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, et al. “An Image is Worth 16x16 Words:\nTransformers for Image Recognition at Scale”. In: The International Conference on Learning Representations (ICLR).\n2020.\n[27]\nNelson Elhage, Neel Nanda, Catherine Olsson, Tom Henighan, Nicholas Joseph, Ben Mann, Amanda Askell, Yuntao\nBai, Anna Chen, Tom Conerly, Nova DasSarma, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds, Danny Hernandez,\nAndy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario Amodei, Tom Brown, Jack Clark, Jared Kaplan,\nSam McCandlish, and Chris Olah. “A Mathematical Framework for Transformer Circuits”. In: Transformer Circuits\nThread (2021). https://transformer-circuits.pub/2021/framework/index.html.\n[28]\nMahan Fathi, Jonathan Pilault, Pierre-Luc Bacon, Christopher Pal, Orhan Firat, and Ross Goroshin. “Block-State\nTransformer”. In: arXiv preprint arXiv:2306.09539 (2023).\n[29]\nYassir Fathullah, Chunyang Wu, Yuan Shangguan, Junteng Jia, Wenhan Xiong, Jay Mahadeokar, Chunxi Liu,\nYangyang Shi, Ozlem Kalinli, Mike Seltzer, and Mark J. F. Gales. “Multi-Head State Space Model for Speech\nRecognition”. In: Proc. INTERSPEECH 2023. 2023, pp. 241–245. doi: 10.21437/Interspeech.2023-1036.\n[30]\nKarl J Friston, Lee Harrison, and Will Penny. “Dynamic Causal Modelling”. In: Neuroimage 19.4 (2003), pp. 1273–\n1302.\n[31]\nDaniel Y Fu, Elliot L Epstein, Eric Nguyen, Armin W Thomas, Michael Zhang, Tri Dao, Atri Rudra, and Christopher\nRé. “Simple Hardware-efficient Long Convolutions for Sequence Modeling”. In: The International Conference on\nMachine Learning (ICML) (2023).\n[32]\nKen-ichi Funahashi and Yuichi Nakamura. “Approximation of Dynamical Systems by Continuous Time Recurrent\nNeural Networks”. In: Neural Networks 6.6 (1993), pp. 801–806.\n[33]\nLeo Gao, Stella Biderman, Sid Black, Laurence Golding, Travis Hoppe, Charles Foster, Jason Phang, Horace He,\nAnish Thite, Noa Nabeshima, Shawn Presser, and Connor Leahy. “The Pile: An 800GB Dataset of Diverse Text for\nLanguage Modeling”. In: arXiv preprint arXiv:2101.00027 (2020).\n[34]\nLeo Gao, Jonathan Tow, Stella Biderman, Sid Black, Anthony DiPofi, Charles Foster, Laurence Golding, Jeffrey\nHsu, Kyle McDonell, Niklas Muennighoff, Jason Phang, Laria Reynolds, Eric Tang, Anish Thite, Ben Wang, Kevin\nWang, and Andy Zou. A Framework for Few-shot Language Model Evaluation. Version v0.0.1. Sept. 2021. doi:\n10.5281/zenodo.5371628. url: https://doi.org/10.5281/zenodo.5371628.\n[35]\nKaran Goel, Albert Gu, Chris Donahue, and Christopher Ré. “It’s Raw! Audio Generation with State-Space Models”.\nIn: The International Conference on Machine Learning (ICML). 2022.\n[36]\nAlbert Gu, Tri Dao, Stefano Ermon, Atri Rudra, and Christopher Ré. “HIPPO: Recurrent Memory with Optimal\nPolynomial Projections”. In: Advances in Neural Information Processing Systems (NeurIPS). 2020.\n[37]\nAlbert Gu, Karan Goel, and Christopher Ré. “Efficiently Modeling Long Sequences with Structured State Spaces”.\nIn: The International Conference on Learning Representations (ICLR). 2022.\n[38]\nAlbert Gu, Caglar Gulcehre, Tom Le Paine, Matt Hoffman, and Razvan Pascanu. “Improving the Gating Mechanism\nof Recurrent Neural Networks”. In: The International Conference on Machine Learning (ICML). 2020.\n[39]\nAlbert Gu, Ankit Gupta, Karan Goel, and Christopher Ré. “On the Parameterization and Initialization of Diagonal\nState Space Models”. In: Advances in Neural Information Processing Systems (NeurIPS). 2022.\n[40]\nAlbert Gu, Isys Johnson, Karan Goel, Khaled Saab, Tri Dao, Atri Rudra, and Christopher Ré. “Combining Recurrent,\nConvolutional, and Continuous-time Models with the Linear State Space Layer”. In: Advances in Neural Information\nProcessing Systems (NeurIPS). 2021.\n[41]\nAlbert Gu, Isys Johnson, Aman Timalsina, Atri Rudra, and Christopher Ré. “How to Train Your HIPPO: State Space\nModels with Generalized Basis Projections”. In: The International Conference on Learning Representations (ICLR).\n2023.\n[42]\nAnkit Gupta, Albert Gu, and Jonathan Berant. “Diagonal State Spaces are as Effective as Structured State Spaces”.\nIn: Advances in Neural Information Processing Systems 35 (2022), pp. 22982–22994.\n[43]\nAnkit Gupta, Harsh Mehta, and Jonathan Berant. “Simplifying and Understanding State Space Models with Diagonal\nLinear RNNs”. In: arXiv preprint arXiv:2212.00768 (2022).\n[44]\nDavid Ha, Andrew Dai, and Quoc V. Le. “HyperNetworks”. In: The International Conference on Learning Representa-\ntions (ICLR). 2017.\n[45]\nDanijar Hafner, Timothy Lillicrap, Jimmy Ba, and Mohammad Norouzi. “Dream to Control: Learning Behaviors by\nLatent Imagination”. In: The International Conference on Learning Representations (ICLR). 2020."
    },
    {
      "page_no": 19,
      "bbox": [
        312.1670227050781,
        740.8311157226562,
        321.4322204589844,
        750.793701171875
      ],
      "text": "19"
    },
    {
      "page_no": 20,
      "bbox": [
        76.63296508789062,
        72.90506744384766,
        563.2861938476562,
        706.9996948242188
      ],
      "text": "[46]\nRamin Hasani, Mathias Lechner, Tsun-Hsuan Wang, Makram Chahine, Alexander Amini, and Daniela Rus. “Liquid\nStructural State-Space Models”. In: The International Conference on Learning Representations (ICLR). 2023.\n[47]\nMikael Henaff, Arthur Szlam, and Yann LeCun. “Recurrent Orthogonal Networks and Long-Memory Tasks”. In:\nThe International Conference on Machine Learning (ICML). 2016.\n[48]\nDan Hendrycks and Kevin Gimpel. “Gaussian Error Linear Units (GELUs)”. In: arXiv preprint arXiv:1606.08415\n(2016).\n[49]\nSepp Hochreiter. “Untersuchungen zu dynamischen neuronalen Netzen”. In: Diploma, Technische Universität\nMünchen 91.1 (1991), p. 31.\n[50]\nSepp Hochreiter, Yoshua Bengio, Paolo Frasconi, Jürgen Schmidhuber, et al. Gradient Flow in Recurrent Nets: The\nDifficulty of Learning Long-term Dependencies. 2001.\n[51]\nSepp Hochreiter and Jürgen Schmidhuber. “Long Short-Term Memory”. In: Neural Computation 9.8 (1997), pp. 1735–\n1780.\n[52]\nJordan Hoffmann, Sebastian Borgeaud, Arthur Mensch, Elena Buchatskaya, Trevor Cai, Eliza Rutherford, Diego\nde Las Casas, Lisa Anne Hendricks, Johannes Welbl, Aidan Clark, et al. “An Empirical Analysis of Compute-\nOptimal Large Language Model Training”. In: Advances in Neural Information Processing Systems (NeurIPS) 35 (2022),\npp. 30016–30030.\n[53]\nWeizhe Hua, Zihang Dai, Hanxiao Liu, and Quoc Le. “Transformer Quality in Linear Time”. In: The International\nConference on Machine Learning (ICML). PMLR. 2022, pp. 9099–9117.\n[54]\nHassan Ismail Fawaz, Germain Forestier, Jonathan Weber, Lhassane Idoumghar, and Pierre-Alain Muller. “Deep\nLearning for Time Series Classification: A Review”. In: Data Mining and Knowledge Discovery 33.4 (2019), pp. 917–\n963.\n[55]\nAndrei Ivanov, Nikoli Dryden, Tal Ben-Nun, Shigang Li, and Torsten Hoefler. “Data Movement is All You Need: A\nCase Study on Optimizing Transformers”. In: Proceedings of Machine Learning and Systems 3 (2021), pp. 711–732.\n[56]\nLi Jing, Caglar Gulcehre, John Peurifoy, Yichen Shen, Max Tegmark, Marin Soljacic, and Yoshua Bengio. “Gated\nOrthogonal Recurrent Units: On Learning to Forget”. In: Neural Computation 31.4 (2019), pp. 765–783.\n[57]\nRudolph Emil Kalman. “A New Approach to Linear Filtering and Prediction Problems”. In: (1960).\n[58]\nAngelos Katharopoulos, Apoorv Vyas, Nikolaos Pappas, and François Fleuret. “Transformers are RNNs: Fast\nAutoregressive Transformers with Linear Attention”. In: International Conference on Machine Learning. PMLR. 2020,\npp. 5156–5165.\n[59]\nShiva Kaul. “Linear Dynamical Systems as a Core Computational Primitive”. In: Advances in Neural Information\nProcessing Systems 33 (2020), pp. 16808–16820.\n[60]\nZhifeng Kong, Wei Ping, Jiaji Huang, Kexin Zhao, and Bryan Catanzaro. “DiffWave: A Versatile Diffusion Model\nfor Audio Synthesis”. In: International Conference on Learning Representations. 2021.\n[61]\nChrysoula Kosma, Giannis Nikolentzos, and Michalis Vazirgiannis. “Time-Parameterized Convolutional Neural\nNetworks for Irregularly Sampled Time Series”. In: arXiv preprint arXiv:2308.03210 (2023).\n[62]\nAlex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. “ImageNet Classification with Deep Convolutional Neural\nNetworks”. In: Advances in Neural Information Processing Systems (NeurIPS) 25 (2012).\n[63]\nTao Lei. “When Attention Meets Fast Recurrence: Training Language Models with Reduced Compute”. In: Proceedings\nof the 2021 Conference on Empirical Methods in Natural Language Processing. 2021, pp. 7633–7648.\n[64]\nTao Lei, Yu Zhang, Sida I Wang, Hui Dai, and Yoav Artzi. “Simple Recurrent Units for Highly Parallelizable\nRecurrence”. In: arXiv preprint arXiv:1709.02755 (2017).\n[65]\nMario Lezcano-Casado and David Martínez-Rubio. “Cheap Orthogonal Constraints in Neural Networks: A Simple\nParametrization of the Orthogonal and Unitary Group”. In: The International Conference on Machine Learning\n(ICML). 2019.\n[66]\nYuhong Li, Tianle Cai, Yi Zhang, Deming Chen, and Debadeepta Dey. “What Makes Convolutional Models Great\non Long Sequence Modeling?” In: The International Conference on Learning Representations (ICLR). 2023.\n[67]\nVasileios Lioutas and Yuhong Guo. “Time-aware Large Kernel Convolutions”. In: The International Conference on\nMachine Learning (ICML). PMLR. 2020, pp. 6172–6183.\n[68]\nChris Lu, Yannick Schroecker, Albert Gu, Emilio Parisotto, Jakob Foerster, Satinder Singh, and Feryal Behbahani.\n“Structured State Space Models for In-Context Reinforcement Learning”. In: Advances in Neural Information Processing\nSystems (NeurIPS). 2023.\n[69]\nShahar Lutati, Itamar Zimerman, and Lior Wolf. “Focus Your Attention (with Adaptive IIR Filters)”. In: arXiv preprint\narXiv:2305.14952 (2023)."
    },
    {
      "page_no": 20,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "20"
    },
    {
      "page_no": 21,
      "bbox": [
        76.63298034667969,
        72.8063735961914,
        563.1365966796875,
        718.9547119140625
      ],
      "text": "[70]\nXuezhe Ma, Chunting Zhou, Xiang Kong, Junxian He, Liangke Gui, Graham Neubig, Jonathan May, and Luke\nZettlemoyer. “Mega: Moving Average Equipped Gated Attention”. In: The International Conference on Learning\nRepresentations (ICLR). 2023.\n[71]\nEric Martin and Chris Cundy. “Parallelizing Linear Recurrent Neural Nets Over Sequence Length”. In: The Interna-\ntional Conference on Learning Representations (ICLR). 2018.\n[72]\nSoroush Mehri, Kundan Kumar, Ishaan Gulrajani, Rithesh Kumar, Shubham Jain, Jose Sotelo, Aaron Courville, and\nYoshua Bengio. “SampleRNN: An Unconditional End-to-End Neural Audio Generation Model”. In: The International\nConference on Learning Representations (ICLR). 2017.\n[73]\nHarsh Mehta, Ankit Gupta, Ashok Cutkosky, and Behnam Neyshabur. “Long Range Language Modeling via Gated\nState Spaces”. In: The International Conference on Learning Representations (ICLR). 2023.\n[74]\nZakaria Mhammedi, Andrew Hellicar, Ashfaqur Rahman, and James Bailey. “Efficient Orthogonal Parametrisation\nof Recurrent Neural Networks using Householder Reflections”. In: International Conference on Machine Learning.\nPMLR. 2017, pp. 2401–2409.\n[75]\nEric Nguyen, Karan Goel, Albert Gu, Gordon Downs, Preey Shah, Tri Dao, Stephen Baccus, and Christopher\nRé. “S4ND: Modeling Images and Videos as Multidimensional Signals with State Spaces”. In: Advances in Neural\nInformation Processing Systems (NeurIPS). 2022.\n[76]\nEric Nguyen, Michael Poli, Marjan Faizi, Armin Thomas, Callum Birch-Sykes, Michael Wornow, Aman Patel,\nClayton Rabideau, Stefano Massaroli, Yoshua Bengio, et al. “HyenaDNA: Long-range Genomic Sequence Modeling\nat Single Nucleotide Resolution”. In: Advances in Neural Information Processing Systems (NeurIPS). 2023.\n[77]\nCatherine Olsson, Nelson Elhage, Neel Nanda, Nicholas Joseph, Nova DasSarma, Tom Henighan, Ben Mann, Amanda\nAskell, Yuntao Bai, Anna Chen, Tom Conerly, Dawn Drain, Deep Ganguli, Zac Hatfield-Dodds, Danny Hernandez,\nScott Johnston, Andy Jones, Jackson Kernion, Liane Lovitt, Kamal Ndousse, Dario Amodei, Tom Brown, Jack Clark,\nJared Kaplan, Sam McCandlish, and Chris Olah. “In-context Learning and Induction Heads”. In: Transformer Circuits\nThread (2022). https://transformer-circuits.pub/2022/in-context-learning-and-induction-heads/index.html.\n[78]\nAaron van den Oord, Sander Dieleman, Heiga Zen, Karen Simonyan, Oriol Vinyals, Alex Graves, Nal Kalchbrenner,\nAndrew Senior, and Koray Kavukcuoglu. “WaveNet: A Generative Model for Raw Audio”. In: arXiv preprint\narXiv:1609.03499 (2016).\n[79]\nAntonio Orvieto, Samuel L Smith, Albert Gu, Anushan Fernando, Caglar Gulcehre, Razvan Pascanu, and Soham De.\n“Resurrecting Recurrent Neural Networks for Long Sequences”. In: The International Conference on Machine Learning\n(ICML). 2023.\n[80]\nDenis Paperno, Germán Kruszewski, Angeliki Lazaridou, Ngoc-Quan Pham, Raffaella Bernardi, Sandro Pezzelle,\nMarco Baroni, Gemma Boleda, and Raquel Fernández. “The LAMBADA Dataset: Word Prediction Requiring a Broad\nDiscourse Context”. In: Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics. 2016,\npp. 1525–1534.\n[81]\nRazvan Pascanu, Tomas Mikolov, and Yoshua Bengio. “On the Difficulty of Training Recurrent Neural Networks”.\nIn: International Conference on Machine Learning. 2013, pp. 1310–1318.\n[82]\nBo Peng, Eric Alcaide, Quentin Anthony, Alon Albalak, Samuel Arcadinho, Huanqi Cao, Xin Cheng, Michael Chung,\nMatteo Grella, Kranthi Kiran GV, et al. “RWKV: Reinventing RNNs for the Transformer Era”. In: arXiv preprint\narXiv:2305.13048 (2023).\n[83]\nHao Peng, Nikolaos Pappas, Dani Yogatama, Roy Schwartz, Noah A Smith, and Lingpeng Kong. “Random Feature\nAttention”. In: The International Conference on Learning Representations (ICLR). 2021.\n[84]\nMichael Poli, Stefano Massaroli, Eric Nguyen, Daniel Y Fu, Tri Dao, Stephen Baccus, Yoshua Bengio, Stefano Ermon,\nand Christopher Ré. “Hyena Hierarchy: Towards Larger Convolutional Language Models”. In: The International\nConference on Machine Learning (ICML). 2023.\n[85]\nZhen Qin, Xiaodong Han, Weixuan Sun, Bowen He, Dong Li, Dongxu Li, Yuchao Dai, Lingpeng Kong, and\nYiran Zhong. “Toeplitz Neural Network for Sequence Modeling”. In: The International Conference on Learning\nRepresentations (ICLR). 2023.\n[86]\nZhen Qin, Xiaodong Han, Weixuan Sun, Dongxu Li, Lingpeng Kong, Nick Barnes, and Yiran Zhong. “The devil in\nlinear transformer”. In: arXiv preprint arXiv:2210.10340 (2022).\n[87]\nZhen Qin, Weixuan Sun, Hui Deng, Dongxu Li, Yunshen Wei, Baohong Lv, Junjie Yan, Lingpeng Kong, and Yiran\nZhong. “CosFormer: Rethinking Softmax in Attention”. In: The International Conference on Learning Representations\n(ICLR). 2022.\n[88]\nAli Rahimi and Benjamin Recht. “Random Features for Large-Scale Kernel Machines”. In: Advances in Neural\nInformation Processing Systems (NeurIPS) 20 (2007)."
    },
    {
      "page_no": 21,
      "bbox": [
        312.1670227050781,
        740.8311157226562,
        321.4322204589844,
        750.793701171875
      ],
      "text": "21"
    },
    {
      "page_no": 22,
      "bbox": [
        71.99996948242188,
        72.85066223144531,
        563.2861328125,
        706.9996948242188
      ],
      "text": "[89]\nPrajit Ramachandran, Barret Zoph, and Quoc V Le. “Swish: A Self-gated Activation Function”. In: arXiv preprint\narXiv:1710.05941 7.1 (2017), p. 5.\n[90]\nDavid W Romero, Anna Kuzina, Erik J Bekkers, Jakub M Tomczak, and Mark Hoogendoorn. “CKConv: Continuous\nKernel Convolution For Sequential Data”. In: arXiv preprint arXiv:2102.02611 (2021).\n[91]\nKeisuke Sakaguchi, Ronan Le Bras, Chandra Bhagavatula, and Yejin Choi. “Winogrande: An Adversarial Winograd\nSchema Challenge at Scale”. In: Communications of the ACM 64.9 (2021), pp. 99–106.\n[92]\nGeorge Saon, Ankit Gupta, and Xiaodong Cui. “Diagonal State Space Augmented Transformers for Speech Recogni-\ntion”. In: ICASSP 2023-2023 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP). IEEE.\n2023, pp. 1–5.\n[93]\nImanol Schlag, Kazuki Irie, and Jürgen Schmidhuber. “Linear Transformers are Secretly Fast Weight Programmers”.\nIn: The International Conference on Machine Learning (ICML). PMLR. 2021, pp. 9355–9366.\n[94]\nJürgen Schmidhuber. “Learning to control fast-weight memories: An alternative to dynamic recurrent networks”.\nIn: Neural Computation 4.1 (1992), pp. 131–139.\n[95]\nNoam Shazeer. “GLU Variants Improve Transformer”. In: arXiv preprint arXiv:2002.05202 (2020).\n[96]\nFreda Shi, Xinyun Chen, Kanishka Misra, Nathan Scales, David Dohan, Ed H Chi, Nathanael Schärli, and Denny\nZhou. “Large Language Models can be Easily Distracted by Irrelevant Context”. In: The International Conference on\nMachine Learning (ICML). PMLR. 2023, pp. 31210–31227.\n[97]\nJiaxin Shi, Ke Alexander Wang, and Emily Fox. “Sequence Modeling with Multiresolution Convolutional Memory”.\nIn: The International Conference on Machine Learning (ICML). PMLR. 2023, pp. 31312–31327.\n[98]\nJimmy TH Smith, Andrew Warrington, and Scott W Linderman. “Simplified State Space Layers for Sequence\nModeling”. In: The International Conference on Learning Representations (ICLR). 2023.\n[99]\nJianlin Su, Yu Lu, Shengfeng Pan, Ahmed Murtadha, Bo Wen, and Yunfeng Liu. “Roformer: Enhanced Transformer\nwith Rotary Position Embedding”. In: arXiv preprint arXiv:2104.09864 (2021).\n[100]\nYutao Sun, Li Dong, Shaohan Huang, Shuming Ma, Yuqing Xia, Jilong Xue, Jianyong Wang, and Furu Wei. “Retentive\nnetwork: A successor to transformer for large language models”. In: arXiv preprint arXiv:2307.08621 (2023).\n[101]\nIlya Sutskever, Oriol Vinyals, and Quoc V Le. “Sequence to Sequence Learning with Neural Networks”. In: Advances\nin Neural Information Processing Systems (NeurIPS) 27 (2014).\n[102]\nCorentin Tallec and Yann Ollivier. “Can Recurrent Neural Networks Warp Time?” In: The International Conference\non Learning Representations (ICLR). 2018.\n[103]\nYi Tay, Mostafa Dehghani, Samira Abnar, Yikang Shen, Dara Bahri, Philip Pham, Jinfeng Rao, Liu Yang, Sebastian\nRuder, and Donald Metzler. “Long Range Arena: A Benchmark for Efficient Transformers”. In: International\nConference on Learning Representations (ICLR). 2021.\n[104]\nYi Tay, Mostafa Dehghani, Dara Bahri, and Donald Metzler. “Efficient Transformers: A Survey”. In: ACM Computing\nSurveys 55.6 (2022), pp. 1–28.\n[105]\nHugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste\nRozière, Naman Goyal, Eric Hambro, Faisal Azhar, et al. “Llama: Open and Efficient Foundation Language Models”.\nIn: arXiv preprint arXiv:2302.13971 (2023).\n[106]\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and\nIllia Polosukhin. “Attention Is All You Need”. In: Advances in Neural Information Processing Systems (NeurIPS). 2017.\n[107]\nEugene Vorontsov, Chiheb Trabelsi, Samuel Kadoury, and Chris Pal. “On Orthogonality and Learning Recurrent\nNetworks with Long Term Dependencies”. In: International Conference on Machine Learning. PMLR. 2017, pp. 3570–\n3578.\n[108]\nJue Wang, Wentao Zhu, Pichao Wang, Xiang Yu, Linda Liu, Mohamed Omar, and Raffay Hamid. “Selective Structured\nState-Spaces for Long-form Video Understanding”. In: Proceedings of the IEEE/CVF Conference on Computer Vision\nand Pattern Recognition. 2023, pp. 6387–6397.\n[109]\nPete Warden. “Speech Commands: A Dataset for Limited-Vocabulary Speech Recognition”. In: ArXiv abs/1804.03209\n(2018).\n[110]\nSamuel Williams, Andrew Waterman, and David Patterson. “Roofline: An Insightful Visual Performance Model for\nMulticore Architectures”. In: Communications of the ACM 52.4 (2009), pp. 65–76.\n[111]\nBrandon Yang, Gabriel Bender, Quoc V Le, and Jiquan Ngiam. “CondConv: Conditionally Parameterized Convolu-\ntions for Efficient Inference”. In: Advances in Neural Information Processing Systems (NeurIPS) 32 (2019).\n[112]\nRowan Zellers, Ari Holtzman, Yonatan Bisk, Ali Farhadi, and Yejin Choi. “HellaSwag: Can a Machine Really Finish\nYour Sentence?” In: Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics. 2019."
    },
    {
      "page_no": 22,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "22"
    },
    {
      "page_no": 23,
      "bbox": [
        72.0,
        72.88030242919922,
        563.134765625,
        169.0177001953125
      ],
      "text": "[113]\nShuangfei Zhai, Walter Talbott, Nitish Srivastava, Chen Huang, Hanlin Goh, Ruixiang Zhang, and Josh Susskind.\n“An Attention Free Transformer”. In: arXiv preprint arXiv:2105.14103 (2021).\n[114]\nMichael Zhang, Khaled K Saab, Michael Poli, Tri Dao, Karan Goel, and Christopher Ré. “Effectively Modeling Time\nSeries with Simple Discrete State Spaces”. In: The International Conference on Learning Representations (ICLR). 2023.\n[115]\nLin Zheng, Chong Wang, and Lingpeng Kong. “Linear complexity randomized self-attention mechanism”. In:\nInternational Conference on Machine Learning. PMLR. 2022, pp. 27011–27041.\n[116]\nSimiao Zuo, Xiaodong Liu, Jian Jiao, Denis Charles, Eren Manavoglu, Tuo Zhao, and Jianfeng Gao. “Efficient Long\nSequence Modeling via State Space Augmented Transformer”. In: arXiv preprint arXiv:2212.08136 (2022)."
    },
    {
      "page_no": 23,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "23"
    },
    {
      "page_no": 24,
      "bbox": [
        72.0,
        72.26166534423828,
        312.74359130859375,
        86.60786437988281
      ],
      "text": "A\nDiscussion: Selection Mechanism"
    },
    {
      "page_no": 24,
      "bbox": [
        72.0,
        94.93346405029297,
        561.6019287109375,
        140.79571533203125
      ],
      "text": "Our selection mechanism is inspired by and related to concepts such as gating, hypernetworks, and data-dependence. It\ncan also be viewed as related to “fast weights” (J. Ba et al. 2016; Schmidhuber 1992), which connects classical RNNs with\nthe mechanism of linear attention (Schlag, Irie, and Schmidhuber 2021). However, we believe that it is a distinct concept\nthat is worth clarifying."
    },
    {
      "page_no": 24,
      "bbox": [
        71.77100372314453,
        156.67416381835938,
        561.7923583984375,
        202.5067138671875
      ],
      "text": "Gating.\nGating originally referred to the gating mechanisms of RNNs such as the LSTM (Hochreiter and Schmidhuber\n1997) and GRU (J. Chung et al. 2014), or the gated equation (5) in Theorem 1. This was interpreted as a particular mechanism\nfor controlling whether to let an input into the hidden state of an RNN. In particular, this affects the propagation of signal\nthrough time and causes inputs to interact along the sequence length dimension."
    },
    {
      "page_no": 24,
      "bbox": [
        71.70099639892578,
        210.37838745117188,
        561.6009521484375,
        270.72369384765625
      ],
      "text": "However, the concept of gating has since been relaxed in popular usage to simply mean any multiplicative interaction\n(often with an activation function). For example, elementwise multiplicative components of neural network architectures\n(that do not interact along sequence length) are now commonly referred to as gated architectures (Hua et al. 2022; Mehta\net al. 2023), despite a very different meaning than the original RNN sense. Thus we believe the original concept of RNN\ngating versus the popular usage of multiplicative gating actually have a very different semantic meaning."
    },
    {
      "page_no": 24,
      "bbox": [
        71.77100372314453,
        284.0444030761719,
        561.785888671875,
        329.9717102050781
      ],
      "text": "Hypernetworks.\nHypernetworks refer to neural networks whose parameters are themselves generated by smaller\nneural networks. The original idea (Ha, Dai, and Quoc V. Le 2017) used it in a narrow sense to define a large RNN whose\nrecurrent parameters are generated by a smaller RNN, and other variants have been around for a long time (Schmidhuber\n1992)."
    },
    {
      "page_no": 24,
      "bbox": [
        72.0,
        345.8491516113281,
        561.6033935546875,
        367.7716979980469
      ],
      "text": "Data-dependence.\nSimilar to hypernetworks, data-dependence can refer to any notion where some parameters of the\nmodel depend on the data (Poli et al. 2023)."
    },
    {
      "page_no": 24,
      "bbox": [
        71.4020004272461,
        383.7347717285156,
        562.7796630859375,
        431.92169189453125
      ],
      "text": "Example: GLU Activation.\nTo illustrate the issues with these concepts, consider a simple diagonal linear layer 𝑦= 𝑫𝑥,\nwhere 𝑫is a diagonal weight parameter. Now suppose that 𝑫is itself generated from a linear transformation of 𝑥,\nwith an optional nonlinearity: 𝑫= 𝜎(𝑾𝑥). Since it is diagonal, the multiplication becomes an elementwise product:\n𝑦= 𝜎(𝑾𝑥) ◦𝑥."
    },
    {
      "page_no": 24,
      "bbox": [
        70.8740005493164,
        437.55279541015625,
        561.6029052734375,
        483.2817077636719
      ],
      "text": "This is a rather trivial transformation, yet it technically satisfies the common meanings of gating (since it has a multiplicative\n“branch”), hypernetworks (since the parameter 𝑫is generated by another layer), and data-dependent (since 𝑫depends\non the data 𝑥). However, this in fact simply defines a GLU function, which is so simple that it is often considered just an\nactivation function (Dauphin et al. 2017; Shazeer 2020) instead of a meaningful layer."
    },
    {
      "page_no": 24,
      "bbox": [
        71.63099670410156,
        499.08013916015625,
        562.6929931640625,
        544.99267578125
      ],
      "text": "Selection.\nThus, while selection mechanisms could be considered a special case of ideas such as architectural gating,\nhypernetworks, or data-dependence, so can an enormous range of other constructions—essentially anything with a\nmultiplication, including standard attention mechanisms (Bahdanau, Cho, and Bengio 2015; Vaswani et al. 2017) as\nwell—and we find it uninformative to think of them as such."
    },
    {
      "page_no": 24,
      "bbox": [
        72.0,
        553.0628051757812,
        562.1983032226562,
        634.65673828125
      ],
      "text": "Instead, we view it as most closely related to the gating mechanism of traditional RNNs, which is a special case (Theorem 1)\nand also has a deeper history of connections to SSMs through variable (input-dependent) discretization of Δ (Funahashi\nand Nakamura 1993; Gu, Dao, et al. 2020; Tallec and Ollivier 2018). We also eschew the term “gating” in favor of selection to\nclarify the overloaded use of former. More narrowly, we use selection to refer to the mechanistic action of a model to select\nor ignore inputs and facilitate data interaction along the sequence length (Section 3.1). Beyond selective SSMs and gated\nRNNs, other examples may include input-dependent convolutions (Kosma, Nikolentzos, and Vazirgiannis 2023; Lioutas and\nGuo 2020; Lutati, Zimerman, and Wolf 2023; Yang et al. 2019) and even attention."
    },
    {
      "page_no": 24,
      "bbox": [
        72.0,
        656.6646728515625,
        185.2632293701172,
        671.0108642578125
      ],
      "text": "B\nRelated Work"
    },
    {
      "page_no": 24,
      "bbox": [
        71.52200317382812,
        679.4697875976562,
        561.6028442382812,
        701.2882690429688
      ],
      "text": "We overview several prior works related to our methods. We mention that some of the most closely related models include\nrecurrent layers such as S4, S5, and quasi-RNNs; as well as end-to-end architectures such as H3, RetNet, and RWKV."
    },
    {
      "page_no": 24,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "24"
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        73.79115295410156,
        248.82940673828125,
        85.74635314941406
      ],
      "text": "B.1\nS4 Variants and Derivatives"
    },
    {
      "page_no": 25,
      "bbox": [
        71.52200317382812,
        91.17337799072266,
        561.7908325195312,
        113.18968963623047
      ],
      "text": "We describe a brief overview of some structured SSMs from past work, particularly those that have a relation to our\nmethod."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        121.0604019165039,
        561.601318359375,
        155.03271484375
      ],
      "text": "• S4 (Gu, Goel, and Ré 2022; Gu, Johnson, Goel, et al. 2021) introduced the first structured SSM, describing diagonal\nstructure and diagonal plus low-rank (DPLR). It focused on efficient convolutional algorithms for DPLR SSMs due to a\nconnection to continuous-time online memorization (HIPPO) (Gu, Dao, et al. 2020)."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        163.0030975341797,
        563.285400390625,
        184.92071533203125
      ],
      "text": "• DSS (Gupta, Gu, and Berant 2022) first discovered the empirical effectiveness of diagonal structured SSMs by approximat-\ning the HIPPO initialization. This was expanded on theoretically in S4D (Gu, Gupta, et al. 2022)."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        192.79141235351562,
        561.6014404296875,
        262.62872314453125
      ],
      "text": "• S5 (Smith, Warrington, and Linderman 2023) independently discovered the diagonal SSM approximation, and is the\nfirst S4 model to be computed recurrently with the parallel scan. However, this required lowering the effective state\ndimension, which they accomplished by switching the SSM dimensions from a SISO (single-input single-output) to\nMIMO (multi-input multi-output) formulation. Our proposed S6 shares the scan, but differs by (i) keeping the SISO\ndimensions, which provides a larger effective recurrent state, (ii) using a hardware-aware algorithm to overcome the\ncomputation issue, (iii) adding the selection mechanism."
    },
    {
      "page_no": 25,
      "bbox": [
        80.47799682617188,
        270.5003967285156,
        562.6959228515625,
        316.4277038574219
      ],
      "text": "Lu et al. (2023) applied S5 to meta-RL in order to handle resetting the SSM state between episode trajectories. Their\nmechanism can be viewed as a particular hard-coded instance of a selection mechanism, where 𝑨is manually set to 0,\ninstead of our learnable mechanism that depends on the input. It would be interesting to apply selective SSMs generically\nto this setting and probe if the model has learned to automatically reset its state on episode boundaries."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        324.3970947265625,
        563.1358032226562,
        370.2253112792969
      ],
      "text": "• Mega (Ma et al. 2023) introduced a simplification of S4 to be real- instead of complex- valued, giving it an interpretation of\nbeing an exponential moving average (EMA). They additionally make an interesting connection of the discretization step\nof SSMs to an EMA damping term. Contrary to findings in the original S4 papers, this was the first model to show that\nreal-valued SSMs are empirically effective in certain settings or when combined with different architectural components."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        378.1416931152344,
        561.8596801757812,
        412.0686950683594
      ],
      "text": "• Liquid S4 (Hasani et al. 2023) is also motivated by augmenting S4 with an input-dependent state transition. From this\nperspective it shares similarity to selection mechanisms, although in a limited form which is still computed convolutionally\nand close to LTI."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        420.0390930175781,
        561.8342895507812,
        430.001708984375
      ],
      "text": "• SGConv (Y. Li et al. 2023), Hyena (Poli et al. 2023), LongConv (Fu et al. 2023), MultiresConv (J. Shi, K. A. Wang, and Fox"
    },
    {
      "page_no": 25,
      "bbox": [
        80.47799682617188,
        432.0937805175781,
        561.5988159179688,
        465.86669921875
      ],
      "text": "2023), and Toeplitz Neural Network (Qin, Han, W. Sun, B. He, et al. 2023) all focus on the convolutional representation of\nS4 and create global or long convolution kernels with different parameterizations. However, these methods cannot do\nfast autoregressive inference directly."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        473.7384033203125,
        561.8624877929688,
        495.75469970703125
      ],
      "text": "Notably, all of these methods, and all other structured SSMs that we are aware of, have been non-selective and usually\nstrictly LTI (linear time invariant)."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        514.1351318359375,
        200.2554168701172,
        526.09033203125
      ],
      "text": "B.2\nSSM Architectures"
    },
    {
      "page_no": 25,
      "bbox": [
        71.52200317382812,
        531.7147827148438,
        561.6030883789062,
        553.53271484375
      ],
      "text": "We use SSM architectures or state space neural networks (SSNN) to refer to deep neural network architectures incorporating\none of the previous SSMs as a black box layer."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        561.5031127929688,
        561.6009521484375,
        607.3316650390625
      ],
      "text": "• GSS (Mehta et al. 2023) was the first gated neural network architecture incorporating SSMs. It is motivated by the gated\nattention unit (GAU) of Hua et al. (2022) and looks quite similar to our block, except with additional projections. Most\nimportantly, its projection contracts the model dimension to reduce the state size of the SSM, while ours expands the\nmodel dimension in order to increase the state size, based on the motivation in Section 3.1."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        615.3010864257812,
        561.5962524414062,
        637.2197265625
      ],
      "text": "• Mega (Ma et al. 2023) combined the EMA simplification of S4 described above into a hybrid architecture using an efficient\nattention approximation."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        645.0904541015625,
        561.7892456054688,
        679.0626831054688
      ],
      "text": "• H3 (Dao, Fu, Saab, et al. 2023) is motivated by combining S4 with linear attention (Katharopoulos et al. 2020). It is\nthe first to generalize this formulation of linear attention to more general recurrences, which is also the basis of later\narchitectures."
    },
    {
      "page_no": 25,
      "bbox": [
        72.0,
        686.9382934570312,
        561.6012573242188,
        720.9061279296875
      ],
      "text": "• Selective S4 (J. Wang et al. 2023) incorporates S4 as a black box to generate a binary mask which is multiplied on the\ninput. While sharing the “selection” name, we consider this an architectural modification that is closer to architectural\ngating than a selection mechanism (Appendix A). For example, we hypothesize that it would not solve the Selective"
    },
    {
      "page_no": 25,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "25"
    },
    {
      "page_no": 26,
      "bbox": [
        80.17900085449219,
        72.85559844970703,
        561.60302734375,
        94.82372283935547
      ],
      "text": "Copying task because simply masking out the irrelevant inputs does not affect the spacing between the relevant ones\n(indeed, the Selective Copying task can even be viewed as coming pre-masked if the noise tokens are embedded to 0)."
    },
    {
      "page_no": 26,
      "bbox": [
        72.0,
        102.76830291748047,
        561.6046752929688,
        136.66668701171875
      ],
      "text": "• RetNet (Y. Sun et al. 2023) is also based on Linear Attention and very similar to H3, but reduces the inner S4 layer to a\nspecial case where the state dimension is 𝑁= 1. Although not framed as such, its recurrence can be viewed as a special\ncase of a linear SSM."
    },
    {
      "page_no": 26,
      "bbox": [
        80.22899627685547,
        144.73577880859375,
        563.1375122070312,
        202.419677734375
      ],
      "text": "Its primary source of improvement is using a linear attention with large head dimension, which can be viewed as another\nmethod to perform input-dependent state expansion. Using a larger head dimension in the context of linear attention\nvariants was first done by H3, but not extensively used since this requires a proportional amount of extra computation.\nRetNet avoids this with an alternate way to parallelize the computation with a variant of standard multi-head attention\ninstead of convolutions, made feasible by their particular special case of SSMs which acts as a simple EMA."
    },
    {
      "page_no": 26,
      "bbox": [
        72.0,
        210.34059143066406,
        561.6034545898438,
        244.2626953125
      ],
      "text": "• RWKV (B. Peng et al. 2023) is another recent RNN designed for language modeling. It is based on AFT (attention-free\nTransformer (S. Zhai et al. 2021)), another variant of linear attention. Its main “WKV” mechanism involves LTI recurrences\nand can be seen as the ratio of two SSMs."
    },
    {
      "page_no": 26,
      "bbox": [
        71.52200317382812,
        252.332763671875,
        561.6028442382812,
        286.105712890625
      ],
      "text": "We also highlight the gated attention unit (GAU) from Hua et al. (2022), which was motivated by combining the Transformer’s\nMHA and MLP blocks together and was an inspiration for our architecture (Section 3.4) combining the H3 and MLP\nblocks."
    },
    {
      "page_no": 26,
      "bbox": [
        72.0,
        304.8672180175781,
        218.76205444335938,
        316.8224182128906
      ],
      "text": "B.3\nRelationship to RNNs"
    },
    {
      "page_no": 26,
      "bbox": [
        72.0,
        322.34710693359375,
        480.11376953125,
        334.7727355957031
      ],
      "text": "RNNs and SSMs are broadly related, as they both involve the concepts of recurrence on a latent state."
    },
    {
      "page_no": 26,
      "bbox": [
        72.0,
        340.3797912597656,
        563.1304321289062,
        386.10870361328125
      ],
      "text": "Several older RNNs such as the strongly typed RNN (Balduzzi and Ghifary 2016), quasi-RNN (QRNN) (Bradbury et al. 2016),\nand simple recurrent unit (SRU) (Lei 2021; Lei et al. 2017) involve forms of gated RNNs without time-wise nonlinearities.\nBecause of the connections of gating mechanisms and selection mechanisms, these can be viewed as cases of selective SSMs,\nand are thus more powerful in a sense than the family of LTI structured SSMs above. The main differences are:"
    },
    {
      "page_no": 26,
      "bbox": [
        88.4280014038086,
        394.0780944824219,
        561.6036376953125,
        415.9967041015625
      ],
      "text": "• They do not use state expansion (𝑁= 1) or selective 𝑩, 𝑪parameters, both of which are important for performance\n(Section 4.6)."
    },
    {
      "page_no": 26,
      "bbox": [
        88.4280014038086,
        423.8674011230469,
        562.976318359375,
        457.8396911621094
      ],
      "text": "• They use a heuristic gating mechanism, which we generalize as a consequence of the selection mechanism +\ndiscretization (Theorem 1). The connections to principled SSM theory provides better parameterizations and\ninitializations (Section 3.6)."
    },
    {
      "page_no": 26,
      "bbox": [
        71.63099670410156,
        465.823974609375,
        562.69580078125,
        547.502685546875
      ],
      "text": "Additionally, older RNNs famously suffered from efficiency issues and the vanishing gradients problem (Hochreiter 1991;\nHochreiter, Bengio, et al. 2001; Pascanu, Mikolov, and Bengio 2013), both caused by their sequential nature. The former\ncould be solved for some of the above RNNs by leveraging the parallel scan (Martin and Cundy 2018), but the latter\nwas difficult without theory later developed for SSMs. For example, modern structured SSMs differ in more careful\nparameterization of the recurrent dynamics inspired by classical SSM theory (e.g. through discretization (Gu, Johnson,\nGoel, et al. 2021; Gu, Johnson, Timalsina, et al. 2023)), or direct analysis (Gupta, Mehta, and Berant 2022; Kaul 2020; Orvieto\net al. 2023))."
    },
    {
      "page_no": 26,
      "bbox": [
        71.52200317382812,
        555.3743896484375,
        562.6951904296875,
        625.211669921875
      ],
      "text": "We also note that there is a long line of work on orthogonal RNNs (Arjovsky, Shah, and Bengio 2016; Henaff, Szlam,\nand LeCun 2016; Lezcano-Casado and Martínez-Rubio 2019; Mhammedi et al. 2017; Vorontsov et al. 2017) which are\nmotivated by constraining the 𝑨transition matrix to be orthogonal or unitary, in order to control its eigenvalues and\nprevent the vanishing gradient problem. However, these had other limitations; we believe that these stem from the fact\nthat orthogonal/unitary RNNs are also LTI. For example, they are almost always evaluated on the Copying task which they\ncan solve perfectly, but observed to struggle on the Selective Copying task (Jing et al. 2019)."
    },
    {
      "page_no": 26,
      "bbox": [
        72.0,
        643.97314453125,
        191.64767456054688,
        655.9283447265625
      ],
      "text": "B.4\nLinear Attention"
    },
    {
      "page_no": 26,
      "bbox": [
        71.70099639892578,
        661.5028076171875,
        561.8368530273438,
        719.2362670898438
      ],
      "text": "The Linear Attention (LA) (Katharopoulos et al. 2020) framework is an important result popularizing kernel attention and\nshowing how it relates to recurrent autoregressive models. Many variants have proposed alternative kernels and other\nmodifications. Random Feature Attention (RFA) (H. Peng et al. 2021) chooses the kernel feature map to approximate softmax\nattention (i.e. the exp feature map) using the random Fourier feature approximation of Gaussian kernels (Rahimi and\nRecht 2007). Performer (Choromanski et al. 2021) finds an approximation to the exponential kernel involving only positive"
    },
    {
      "page_no": 26,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "26"
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        72.82603454589844,
        563.1331787109375,
        142.6436767578125
      ],
      "text": "features, which also allows the softmax normalization term. TransNormer (Qin, Han, W. Sun, D. Li, et al. 2022) showed\nthat the LA denominator term can be unstable and proposed replacing it with a LayerNorm. cosFormer (Qin, W. Sun, et al.\n2022) augments RFA with a cosine reweighting mechanism that incorporates positional information to emphasize locality.\nLinear Randomized Attention (Zheng, C. Wang, and L. Kong 2022) generalize RFA from the perspective of importance\nsampling, and generalize it to provide better estimates of the full softmax kernel (rather than just the exp-transformed\nnumerator)."
    },
    {
      "page_no": 27,
      "bbox": [
        71.6510009765625,
        150.65884399414062,
        562.197998046875,
        172.53167724609375
      ],
      "text": "Aside from kernel attention, many other variants of efficient attention exist; the survey Tay, Dehghani, Bahri, et al. (2022)\noffers an extensive categorization of many of these."
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        191.2931671142578,
        216.27537536621094,
        203.2483673095703
      ],
      "text": "B.5\nLong Context Models"
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        208.872802734375,
        563.1353149414062,
        230.69142150878906
      ],
      "text": "Long context has become a popular subject, and several recent models have claimed to scale to longer and longer sequences.\nHowever, these are often from a computational standpoint and have not been extensively validated. These include:"
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        238.56240844726562,
        561.7842407226562,
        272.53472900390625
      ],
      "text": "• Recurrent Memory Transformer (Bulatov, Kuratov, and Burtsev 2023), a lightweight wrapper around a Transformer\nbackbone. It showed ability to generalize up to 1M sequences but only on synthetic memorization tasks; their main result\nis similar to our Induction Heads extrapolation experiment (Table 2)."
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        280.5041198730469,
        555.005859375,
        290.66766357421875
      ],
      "text": "• LongNet (Ding et al. 2023), which claimed to scale to 1B length but only evaluated on length < 100𝐾for actual tasks."
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        298.34820556640625,
        563.2844848632812,
        332.3096923828125
      ],
      "text": "• Hyena and HyenaDNA (Nguyen, Poli, et al. 2023; Poli et al. 2023), which claimed to leverage up to 1M context. How-\never, their experiments trained on proportionally more data at longer contexts, making it hard to conclude if quality\nimprovements at 1M context are due to context length or due to more data and computation."
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        340.181396484375,
        561.7857055664062,
        374.1536865234375
      ],
      "text": "• Sparse Transformer (Child et al. 2019) showed a proof-of-concept of using a strided sparse attention Transformer to\nmodel audio waveforms of length 220 = 1048576, although did not discuss performance tradeoffs when controlling for\ncomputation and model size."
    },
    {
      "page_no": 27,
      "bbox": [
        71.63099670410156,
        382.2227783203125,
        561.6026000976562,
        404.04071044921875
      ],
      "text": "In contrast, we believe this work presents one of the first approaches to meaningfully demonstrate increasing performance\nwith longer context."
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        426.0496520996094,
        279.8620910644531,
        440.3958435058594
      ],
      "text": "C\nMechanics of Selective SSMs"
    },
    {
      "page_no": 27,
      "bbox": [
        72.0,
        448.740234375,
        561.5963134765625,
        470.6737060546875
      ],
      "text": "Proof of Theorem 1. Consider a selective SSM (Algorithm 2) with 𝑁= 1, 𝑨= −1, 𝑩= 1,𝑠Δ = Linear(𝑥),𝜏Δ = softplus. The\ncorresponding continuous-time SSM (1) is"
    },
    {
      "page_no": 27,
      "bbox": [
        277.1809997558594,
        482.8290100097656,
        355.47259521484375,
        494.5903015136719
      ],
      "text": "ℎ(𝑡) = −ℎ(𝑡) + 𝑥(𝑡)"
    },
    {
      "page_no": 27,
      "bbox": [
        71.63107299804688,
        504.5460510253906,
        225.28485107421875,
        516.9716796875
      ],
      "text": "which is also called a leaky integrator."
    },
    {
      "page_no": 27,
      "bbox": [
        71.70108032226562,
        522.4791259765625,
        190.7939453125,
        532.4417114257812
      ],
      "text": "The discretization step size is"
    },
    {
      "page_no": 27,
      "bbox": [
        238.4410858154297,
        544.5980834960938,
        354.3892822265625,
        557.2645263671875
      ],
      "text": "Δ𝑡= 𝜏Δ(Parameter + 𝑠Δ(𝑥𝑡))"
    },
    {
      "page_no": 27,
      "bbox": [
        251.1790771484375,
        559.5420532226562,
        394.76031494140625,
        571.818115234375
      ],
      "text": "= softplus(Parameter + Linear(𝑥𝑡))"
    },
    {
      "page_no": 27,
      "bbox": [
        251.17910766601562,
        574.4860229492188,
        342.0333251953125,
        586.7620849609375
      ],
      "text": "= softplus(Linear(𝑥𝑡))"
    },
    {
      "page_no": 27,
      "bbox": [
        71.631103515625,
        596.203125,
        511.60943603515625,
        606.1657104492188
      ],
      "text": "where we observe that the parameter can be viewed as a learnable bias and folded into the linear projection."
    },
    {
      "page_no": 27,
      "bbox": [
        72.00010681152344,
        614.1351318359375,
        337.5631408691406,
        624.0977172851562
      ],
      "text": "Now applying the zero-order hold (ZOH) discretization formulas:"
    },
    {
      "page_no": 27,
      "bbox": [
        194.33299255371094,
        633.5770874023438,
        419.5721435546875,
        659.6331176757812
      ],
      "text": "𝑨𝑡= exp(Δ𝑨) =\n1\n1 + exp(Linear(𝑥𝑡)) = 𝜎(−Linear(𝑥𝑡))"
    },
    {
      "page_no": 27,
      "bbox": [
        207.887939453125,
        661.8311157226562,
        287.59814453125,
        674.30810546875
      ],
      "text": "= 1 −𝜎(Linear(𝑥𝑡))"
    },
    {
      "page_no": 27,
      "bbox": [
        194.96099853515625,
        677.3662109375,
        439.4162292480469,
        691.2046508789062
      ],
      "text": "𝑩𝑡= (Δ𝑨)−1(exp(Δ𝑨) −𝑰) · Δ𝑩= −(exp(Δ𝑨) −𝑰) = 1 −𝑨"
    },
    {
      "page_no": 27,
      "bbox": [
        207.88800048828125,
        693.9480590820312,
        275.0517578125,
        706.22412109375
      ],
      "text": "= 𝜎(Linear(𝑥𝑡))."
    },
    {
      "page_no": 27,
      "bbox": [
        312.16796875,
        740.8311157226562,
        321.43316650390625,
        750.793701171875
      ],
      "text": "27"
    },
    {
      "page_no": 28,
      "bbox": [
        71.70099639892578,
        72.90506744384766,
        235.13739013671875,
        82.86766815185547
      ],
      "text": "Thus the final discrete recurrence (2a) is"
    },
    {
      "page_no": 28,
      "bbox": [
        269.1319885253906,
        95.02396392822266,
        344.8192138671875,
        107.30005645751953
      ],
      "text": "𝑔𝑡= 𝜎(Linear(𝑥𝑡))"
    },
    {
      "page_no": 28,
      "bbox": [
        268.68402099609375,
        109.76700592041016,
        363.2317199707031,
        122.94378662109375
      ],
      "text": "ℎ𝑡= (1 −𝑔𝑡)ℎ𝑡−1 + 𝑔𝑡𝑥𝑡"
    },
    {
      "page_no": 28,
      "bbox": [
        72.00003051757812,
        131.6412811279297,
        561.6002807617188,
        141.6475830078125
      ],
      "text": "as desired.\n□"
    },
    {
      "page_no": 28,
      "bbox": [
        72.00003051757812,
        163.656494140625,
        400.140625,
        178.00270080566406
      ],
      "text": "D\nHardware-aware Algorithm For Selective SSMs"
    },
    {
      "page_no": 28,
      "bbox": [
        71.52200317382812,
        186.4118194580078,
        562.6983032226562,
        280.01068115234375
      ],
      "text": "Without input-dependent selectivity, SSMs can be efficiently implemented as a convolution (Dao, Fu, Saab, et al. 2023; Gu,\nGoel, and Ré 2022), which leverages the fast Fourier transform (FFT) as primitive. With selectivity, SSMs are no-longer\nequivalent to convolution, but we leverage the parallel associative scan. While SSM scans are theoretically efficient\n(𝑂(𝐵𝐿𝐷𝑁) FLOPs, scaling linear in 𝐿), training foundation models with selective SSMs requires them to be efficient on\nmodern hardware (GPUs) as well. We describe how we use kernel fusion and recomputation to make SSM scan fast and\nmemory-efficient. We evaluate the speed of our scan implementation compared to convolution and attention in Section 4.5,\nshowing that it is up to 7× times faster than attention at sequence length 32K, and is as memory-efficient as the best\nattention implementation (FlashAttention)."
    },
    {
      "page_no": 28,
      "bbox": [
        72.0,
        295.8052062988281,
        563.2847290039062,
        341.7217102050781
      ],
      "text": "Speed.\nOn modern hardware accelerators (GPUs) most operations (except matrix multiply) are bounded by memory-\nbandwidth (Dao, Fu, Ermon, et al. 2022; Ivanov et al. 2021; Williams, Waterman, and Patterson 2009). This the case with our\nscan operation, and we use kernel fusion to reduce the amount of memory IOs, leading to significant speedup compared to\na standard implementation."
    },
    {
      "page_no": 28,
      "bbox": [
        71.63099670410156,
        349.7917785644531,
        561.603759765625,
        409.9147033691406
      ],
      "text": "The standard way to implement the scan algorithm in Section 3.2 is to prepare the scan input 𝑨, 𝑩of size (𝐵, 𝐿, 𝐷, 𝑁) in GPU\nHBM (high-bandwidth memory, commonly referred to as GPU memory), call a parallel associative scan implementation to\nwrite the scan output of size (𝐵, 𝐿, 𝐷, 𝑁) to GPU HBM, then multiply that scan output with 𝑪to produce an output of size\n(𝐵, 𝐿, 𝐷). However, this requires the number of memory reads/writes on the order of 𝑂(𝐵𝐿𝐷𝑁). We can instead fuse the\ndiscretization step, the scan, and the multiplication with 𝑪into one kernel:"
    },
    {
      "page_no": 28,
      "bbox": [
        85.10101318359375,
        415.4450988769531,
        445.6371154785156,
        427.8467102050781
      ],
      "text": "1. We read in 𝑂(𝐵𝐿𝐷+ 𝐷𝑁) bytes of memory (Δ, 𝑨, 𝑩, 𝑪) from slow HBM to fast SRAM."
    },
    {
      "page_no": 28,
      "bbox": [
        85.10104370117188,
        433.3780822753906,
        334.3715515136719,
        445.77972412109375
      ],
      "text": "2. We discretize to produce 𝑨, 𝑩of size (𝐵, 𝐿, 𝐷, 𝑁) in SRAM."
    },
    {
      "page_no": 28,
      "bbox": [
        85.10101318359375,
        451.31109619140625,
        487.3715515136719,
        462.9928894042969
      ],
      "text": "3. We perform a parallel associative scan, yielding intermediate states of size (𝐵, 𝐿, 𝐷, 𝑁) in SRAM."
    },
    {
      "page_no": 28,
      "bbox": [
        85.10101318359375,
        469.2441101074219,
        445.0483703613281,
        481.6457214355469
      ],
      "text": "4. We multiply and sum with 𝑪, producing outputs of size (𝐵, 𝐿, 𝐷) and write it to HBM."
    },
    {
      "page_no": 28,
      "bbox": [
        71.70099639892578,
        487.077392578125,
        561.6006469726562,
        509.0946960449219
      ],
      "text": "This way, we reduce IOs by a factor of 𝑂(𝑁) (the state dimension), which in practice speeds up the operation by 20-40\ntimes (Section 4.5)."
    },
    {
      "page_no": 28,
      "bbox": [
        72.0,
        517.163818359375,
        561.6026611328125,
        550.9376831054688
      ],
      "text": "For sequence length 𝐿too long where we cannot fit the sequence in SRAM (which is much smaller than HBM), we split the\nsequences into chunks and perform the fused scan on each chunk. As long as we have the intermediate scan states, we can\ncontinue the scan with the next chunk."
    },
    {
      "page_no": 28,
      "bbox": [
        72.0,
        566.721435546875,
        561.8590698242188,
        588.7376708984375
      ],
      "text": "Memory.\nWe describe how we use the classical technique of recomputation to reduce the total amount of memory\nrequired to train selective SSM layers."
    },
    {
      "page_no": 28,
      "bbox": [
        71.552001953125,
        596.8078002929688,
        563.1321411132812,
        666.4467163085938
      ],
      "text": "From the way we fuse the forward pass, we do not save the intermediate states of size (𝐵, 𝐿, 𝐷, 𝑁) to avoid memory blowup.\nHowever, these intermediate states are necessary for the backward pass to compute gradients. We instead recompute those\nintermediate states in the backward pass. Since the inputs Δ, 𝑨, 𝑩, 𝑪and output gradient read from HBM to SRAM are\nof size 𝑂(𝐵𝐿𝑁+ 𝐷𝑁), and the input gradients are also of size 𝑂(𝐵𝐿𝑁+ 𝐷𝑁), recomputation avoids the cost of reading\n𝑂(𝐵𝐿𝑁𝐷) elements from HBM. This means that recomputation of the SSM states in the backward pass speeds up the\ncomputation compared to storing them and reading them from HBM."
    },
    {
      "page_no": 28,
      "bbox": [
        72.0,
        674.3184204101562,
        563.1292724609375,
        720.2451171875
      ],
      "text": "Beyond optimizing for the memory requirement of just the scan operation, we also use recomputation to optimize the\nmemory requirement of the entire selective SSM block (input projection, convolution, activation, scan, output projection).\nIn particular, we do not save intermediate activations that take a lot of memory but are fast to recompute (e.g. output of\nactivation function or short convolution). As a result, the selective SSM layer has the same memory requirement as an"
    },
    {
      "page_no": 28,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "28"
    },
    {
      "page_no": 29,
      "bbox": [
        71.73100280761719,
        70.09721374511719,
        561.5986328125,
        93.39099884033203
      ],
      "text": "Table 11: (Induction heads.) Models are trained on sequence length 28 = 256, and tested on various sequence lengths of 26 = 64 up to\n220 = 1048576. ✓denotes perfect generalization accuracy, while ✗denotes out of memory."
    },
    {
      "page_no": 29,
      "bbox": [
        100.49199676513672,
        107.0768814086914,
        424.8113098144531,
        115.04698181152344
      ],
      "text": "Model\nParams\nTest Accuracy (%) at Seqence Length"
    },
    {
      "page_no": 29,
      "bbox": [
        187.4219970703125,
        120.30426788330078,
        530.6173095703125,
        131.31175231933594
      ],
      "text": "26\n27\n28\n29\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220"
    },
    {
      "page_no": 29,
      "bbox": [
        100.491943359375,
        135.8428955078125,
        530.3356323242188,
        203.14695739746094
      ],
      "text": "MHA-Abs\n137K\n✓\n99.6\n100.0\n58.6\n26.6\n18.8\n9.8\n10.9\n7.8\n✗\n✗\n✗\n✗\n✗\n✗\nMHA-RoPE\n137K\n✓\n✓\n100.0\n83.6\n31.3\n18.4\n8.6\n9.0\n5.5\n✗\n✗\n✗\n✗\n✗\n✗\nMHA-xPos\n137K\n✓\n✓\n100.0\n99.6\n67.6\n25.4\n7.0\n9.0\n7.8\n✗\n✗\n✗\n✗\n✗\n✗\nH3\n153K\n✓\n✓\n100.0\n80.9\n39.5\n23.8\n14.8\n8.2\n5.9\n6.6\n8.2\n4.7\n8.2\n6.3\n7.4\nHyena\n69M∗\n97.7\n✓\n100.0\n✓\n44.1\n12.5\n6.6\n5.1\n7.0\n5.9\n6.6\n6.6\n5.9\n6.3\n9.8\nMamba\n74K\n✓\n✓\n100.0\n✓\n✓\n✓\n✓\n✓\n✓\n✓\n✓\n✓\n✓\n✓\n✓\n∗Most of the parameters are in learnable positional encodings."
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        225.9921417236328,
        561.6041870117188,
        283.85870361328125
      ],
      "text": "optimized Transformer implementation with FlashAttention. In particular, each attention layer (FlashAttention) stores\naround 12 bytes of activations per token, an each MLP layer stores around 20 bytes of activations per token, for a total of\n32 bytes ((assuming mixed-precision training in FP16 or BF16)). Each selective SSM stores around 16 bytes of activations\nper token. Hence two layers of selective SSMs have around the same activation memory as an attention layer and an MLP\nlayer."
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        305.8676452636719,
        385.3066101074219,
        320.2138366699219
      ],
      "text": "E\nExperimental Details and Additional Results"
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        331.4521789550781,
        185.2516326904297,
        343.4073791503906
      ],
      "text": "E.1\nSynthetic Tasks"
    },
    {
      "page_no": 29,
      "bbox": [
        71.63099670410156,
        348.88262939453125,
        561.6046142578125,
        384.8042907714844
      ],
      "text": "Selective Copying.\nOur setting is on sequences of length 4096, with a vocab size of 16 possible tokens (including the\nwhite “noise” token from Figure 2) and requiring models to memorize 16 “data” tokens. We use 2 layer models with a model\ndimension of 𝐷= 64."
    },
    {
      "page_no": 29,
      "bbox": [
        71.99999237060547,
        390.77508544921875,
        451.416748046875,
        400.9386291503906
      ],
      "text": "Models are trained for 400K steps at a constant learning rate of 0.0001 with a batch size of 64."
    },
    {
      "page_no": 29,
      "bbox": [
        70.8740005493164,
        416.52239990234375,
        561.6019287109375,
        486.35870361328125
      ],
      "text": "Induction Heads.\nTraining consists of randomly generating data every step, with a batch size of 8. We choose an\n“epoch” size of 8192 steps, and track the accuracy on fixed validation sets (also randomly generated) of each target sequence\nlength. For the MHA-Abs and Mamba models, results are reported after the 25th epoch (8192 × 25 = 204800 steps). For the\nMHA-RoPE and MHA-xPos models, results are reported after the 50th epoch (8192 × 50 = 409600 steps). For the LTI H3\nand Hyena models, results are reported after the 10th epoch (81920 steps) because they had converged by then and failed\nto improve further."
    },
    {
      "page_no": 29,
      "bbox": [
        71.52200317382812,
        494.3937683105469,
        561.603515625,
        541.8768920898438
      ],
      "text": "We use the Adam optimizer with no weight decay. All models are trained at constant learning rates 2𝑒−4 and 1𝑒−3, and\nthe better results are reported for each model (2𝑒−4 for all models except Mamba). The attention and Hyena models did\nnot learn at LR 1𝑒−3. H3 learned at both LRs, but interestingly generalized better to shorter sequences at the smaller LR of\n2𝑒−4. Mamba learned at both LRs, but extrapolated better at the larger LR of 1𝑒−3."
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        558.919189453125,
        206.40036010742188,
        570.8743896484375
      ],
      "text": "E.2\nLanguage Modeling"
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        578.7907104492188,
        190.5150604248047,
        588.7532958984375
      ],
      "text": "E.2.1\nScaling Law Details"
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        594.6664428710938,
        563.2850341796875,
        616.6827392578125
      ],
      "text": "Scaling law experiments generally followed the GPT3 recipe. All models were trained on the Pile with the GPT2 tok-\nenizer."
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        632.4674072265625,
        563.28271484375,
        690.3486938476562
      ],
      "text": "Model Sizes.\nTable 12 specifies the model sizes we use for scaling laws. This is taken directly from the GPT3 specifi-\ncations (Brown et al. 2020), with very minor modifications. First, we changed the batch size of the 1.3B model from 1M\ntokens to 0.5M tokens, since we did not use enough parallelization to require the larger batch size. Second, we changed the\nnumber of training steps and total tokens to roughly match Chinchilla scaling laws (Hoffmann et al. 2022), which specify\nthat training tokens should increase proportionally to model size."
    },
    {
      "page_no": 29,
      "bbox": [
        72.0,
        706.2321166992188,
        340.3623046875,
        718.5863037109375
      ],
      "text": "Training Recipes.\nAll models used the AdamW optimizer with"
    },
    {
      "page_no": 29,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "29"
    },
    {
      "page_no": 30,
      "bbox": [
        71.73100280761719,
        71.67314910888672,
        561.5986938476562,
        91.53133392333984
      ],
      "text": "Table 12: (Scaling Law Model Sizes.) Our model sizes and hyperparameters for scaling experiments. (Model dimension and number of\nheads applies only to Transformer models.)"
    },
    {
      "page_no": 30,
      "bbox": [
        98.70500183105469,
        107.07090759277344,
        532.6541137695312,
        117.8731689453125
      ],
      "text": "Params\nn_layers\nd_model\nn_heads / d_head\nTraining steps\nLearning Rate\nBatch Size\nTokens"
    },
    {
      "page_no": 30,
      "bbox": [
        98.70500183105469,
        123.02989196777344,
        520.0360717773438,
        164.8732452392578
      ],
      "text": "125M\n12\n768\n12 / 64\n4800\n6e-4\n0.5M tokens\n2.5B\n350M\n24\n1024\n16 / 64\n13500\n3e-4\n0.5M tokens\n7B\n760M\n24\n1536\n16 / 96\n29000\n2.5e-4\n0.5M tokens\n15B\n1.3B\n24\n2048\n32 / 64\n50000\n2e-4\n0.5M tokens\n26B"
    },
    {
      "page_no": 30,
      "bbox": [
        88.4280014038086,
        190.6030731201172,
        186.7895965576172,
        200.76658630371094
      ],
      "text": "• gradient clip value 1.0"
    },
    {
      "page_no": 30,
      "bbox": [
        88.42798614501953,
        208.5360565185547,
        164.8215789794922,
        218.69956970214844
      ],
      "text": "• weight decay 0.1"
    },
    {
      "page_no": 30,
      "bbox": [
        88.42796325683594,
        226.4680633544922,
        142.20689392089844,
        236.4306640625
      ],
      "text": "• no dropout"
    },
    {
      "page_no": 30,
      "bbox": [
        88.42796325683594,
        244.4010467529297,
        286.8937072753906,
        254.3636474609375
      ],
      "text": "• linear learning rate warmup with cosine decay"
    },
    {
      "page_no": 30,
      "bbox": [
        71.99996948242188,
        262.3340148925781,
        313.6029357910156,
        272.296630859375
      ],
      "text": "By default, the peak learning rate is the GPT3 specification."
    },
    {
      "page_no": 30,
      "bbox": [
        71.52200317382812,
        280.16839599609375,
        561.5977172851562,
        302.1846923828125
      ],
      "text": "We give several models an “improved recipe”, inspired by changes adopted by popular large language models such as\nPaLM (Chowdhery et al. 2023) and LLaMa (Touvron et al. 2023). These include:"
    },
    {
      "page_no": 30,
      "bbox": [
        88.4280014038086,
        310.15509033203125,
        490.1698913574219,
        321.8368835449219
      ],
      "text": "• linear learning rate warmup with cosine decay to 1𝑒−5, with a peak value of 5× the GPT3 value"
    },
    {
      "page_no": 30,
      "bbox": [
        88.42791748046875,
        328.08709716796875,
        177.3548583984375,
        338.0497131347656
      ],
      "text": "• no linear bias terms"
    },
    {
      "page_no": 30,
      "bbox": [
        88.42791748046875,
        346.0201110839844,
        230.8540496826172,
        355.98272705078125
      ],
      "text": "• RMSNorm instead of LayerNorm"
    },
    {
      "page_no": 30,
      "bbox": [
        88.42791748046875,
        363.953125,
        508.865478515625,
        375.91534423828125
      ],
      "text": "• AdamW hyperparameter 𝛽= (.9, .95) (the GPT3 value) instead of the PyTorch default of 𝛽= (.9, .999)"
    },
    {
      "page_no": 30,
      "bbox": [
        71.99993896484375,
        389.7981262207031,
        301.63818359375,
        402.15234375
      ],
      "text": "Architecture and Training Details.\nOur models are:"
    },
    {
      "page_no": 30,
      "bbox": [
        71.99993896484375,
        407.73114013671875,
        358.31561279296875,
        420.0853576660156
      ],
      "text": "• Transformer: The standard Transformer based on GPT3 (Table 12)."
    },
    {
      "page_no": 30,
      "bbox": [
        71.99993133544922,
        425.6641540527344,
        561.6007080078125,
        447.5816955566406
      ],
      "text": "• Transformer++: A Transformer with an improved architecture, namely rotary positional encodings (Su et al. 2021) and\nSwiGLU MLP (Shazeer 2020), and the improved training recipe above."
    },
    {
      "page_no": 30,
      "bbox": [
        72.0,
        455.5520935058594,
        561.8627319335938,
        491.1438903808594
      ],
      "text": "• Hyena: Interleaving a Hyena block (the H3 block with S4 replaced by a global convolution parameterized by an MLP) with\nstandard MLP blocks. The MLP blocks have expansion factor 2 instead of 4 and the number of layers is correspondingly\nincreased by 1.5× to preserve parameter count."
    },
    {
      "page_no": 30,
      "bbox": [
        71.99998474121094,
        497.3951110839844,
        561.5966796875,
        521.7757568359375
      ],
      "text": "• H3++: The H3 architecture with a few modifications, including (i) using the same “thin” Hyena dimensions above (ii) the\nimproved training recipe above (iii) a linear attention head dimension of 8."
    },
    {
      "page_no": 30,
      "bbox": [
        72.0,
        527.2831420898438,
        561.6013793945312,
        550.9198608398438
      ],
      "text": "• RWKV: The default RWKV model from B. Peng et al. (2023), including its modified MLP block. We also used as much of\nits specified training recipe as possible, such as increasing the learning rates by 2× or 3× on certain parameters."
    },
    {
      "page_no": 30,
      "bbox": [
        71.99996948242188,
        557.1710815429688,
        534.642822265625,
        569.5252685546875
      ],
      "text": "• RetNet: The default RetNet model from Y. Sun et al. (2023). We also gave it the improved training recipe above."
    },
    {
      "page_no": 30,
      "bbox": [
        71.99996948242188,
        575.1041259765625,
        401.2742614746094,
        587.4583129882812
      ],
      "text": "• Mamba: The standard Mamba architecture, with the improved training recipe."
    },
    {
      "page_no": 30,
      "bbox": [
        71.99996948242188,
        603.3406982421875,
        253.5384521484375,
        613.3032836914062
      ],
      "text": "E.2.2\nAdditional Scaling Law Ablations"
    },
    {
      "page_no": 30,
      "bbox": [
        71.52200317382812,
        619.2164306640625,
        561.597900390625,
        643.6956787109375
      ],
      "text": "We perform additional ablations on the architecture using the same protocol as the 2k context length scaling laws in\nFigure 4 (Left)."
    },
    {
      "page_no": 30,
      "bbox": [
        72.0,
        657.0174560546875,
        561.6027221679688,
        693.5031127929688
      ],
      "text": "Mamba Architecture: Interleaving Blocks.\nWe test the effect of different architectural blocks combined with the\nMamba block. We focus on the viewpoint that the Mamba block is simply the standard SwiGLU block with an extra\nconv →SSM path added. This leads to two natural ablations:"
    },
    {
      "page_no": 30,
      "bbox": [
        72.0,
        698.9591064453125,
        561.6041870117188,
        720.876708984375
      ],
      "text": "• What if the Mamba block is interleaved with a standard MLP block, instead of stacked homogenously? This can also be\ninterpreted as taking Mamba and removing half of the SSMs."
    },
    {
      "page_no": 30,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "30"
    },
    {
      "page_no": 31,
      "bbox": [
        175.546630859375,
        166.76483154296875,
        276.316162109375,
        173.52500915527344
      ],
      "text": "1019\n1020"
    },
    {
      "page_no": 31,
      "bbox": [
        184.17477416992188,
        173.47523498535156,
        233.51901245117188,
        181.75015258789062
      ],
      "text": "FLOPs (log scale)"
    },
    {
      "page_no": 31,
      "bbox": [
        93.12017822265625,
        106.61267852783203,
        100.75044250488281,
        113.37284088134766
      ],
      "text": "101"
    },
    {
      "page_no": 31,
      "bbox": [
        86.93356323242188,
        146.83291625976562,
        101.88135528564453,
        153.5930938720703
      ],
      "text": "7 × 100"
    },
    {
      "page_no": 31,
      "bbox": [
        86.93356323242188,
        131.7862548828125,
        101.88135528564453,
        138.5464324951172
      ],
      "text": "8 × 100"
    },
    {
      "page_no": 31,
      "bbox": [
        86.93356323242188,
        118.51417541503906,
        101.88135528564453,
        125.27433013916016
      ],
      "text": "9 × 100"
    },
    {
      "page_no": 31,
      "bbox": [
        77.18302917480469,
        94.31438446044922,
        85.45796203613281,
        153.59725952148438
      ],
      "text": "Perplexity (log scale)"
    },
    {
      "page_no": 31,
      "bbox": [
        138.71054077148438,
        74.39746856689453,
        279.035400390625,
        82.67240142822266
      ],
      "text": "Scaling Laws on The Pile (Sequence Length 2048)"
    },
    {
      "page_no": 31,
      "bbox": [
        278.458984375,
        86.5574951171875,
        307.93707275390625,
        107.28787994384766
      ],
      "text": "Mamba\nMamba-MLP\nMamba-MHA"
    },
    {
      "page_no": 31,
      "bbox": [
        414.39599609375,
        166.8142547607422,
        518.9791259765625,
        173.55575561523438
      ],
      "text": "1019\n1020"
    },
    {
      "page_no": 31,
      "bbox": [
        423.5179748535156,
        173.506103515625,
        472.7258605957031,
        181.75816345214844
      ],
      "text": "FLOPs (log scale)"
    },
    {
      "page_no": 31,
      "bbox": [
        329.29937744140625,
        127.97437286376953,
        336.9085693359375,
        134.7158660888672
      ],
      "text": "101"
    },
    {
      "page_no": 31,
      "bbox": [
        319.5758056640625,
        94.56403350830078,
        327.8278503417969,
        153.68307495117188
      ],
      "text": "Perplexity (log scale)"
    },
    {
      "page_no": 31,
      "bbox": [
        378.17938232421875,
        74.70216369628906,
        518.116455078125,
        82.9542236328125
      ],
      "text": "Scaling Laws on The Pile (Sequence Length 2048)"
    },
    {
      "page_no": 31,
      "bbox": [
        533.80810546875,
        86.82858276367188,
        550.3690185546875,
        114.69343566894531
      ],
      "text": "Hyena\nHyena+\nH3+\nH3++"
    },
    {
      "page_no": 31,
      "bbox": [
        175.41400146484375,
        193.35691833496094,
        458.1866149902344,
        204.54005432128906
      ],
      "text": "Figure 9: (Scaling laws: extra ablations.) (Left) Instead of (Right) Instead of"
    },
    {
      "page_no": 31,
      "bbox": [
        72.00003051757812,
        225.5400848388672,
        561.6008911132812,
        247.45867919921875
      ],
      "text": "• What if the Mamba block is interleaved with MHA (multi-head attention) blocks? This can also be interpreted as taking\na Transformer with SwiGLU MLPs (i.e. what we call Transformer++) and simply adding SSMs to the MLP blocks."
    },
    {
      "page_no": 31,
      "bbox": [
        71.70099639892578,
        255.4132080078125,
        562.6991577148438,
        313.2117004394531
      ],
      "text": "Figure 9 (Right) shows these variants compared to the original (homogenous) Mamba architecture. Interestingly, neither\nchange matters too much. The Mamba-MLP architecture is only slightly worse, and still better than all models except\nTransformer++. The Mamba-MHA architecture is only slightly better, which is somewhat surprising in light of the fact\nthat many recent works have found that combining (LTI) SSMs with Attention can lead to substantial improvements (Dao,\nFu, Saab, et al. 2023; Fathi et al. 2023; Fathullah et al. 2023; Saon, Gupta, and Cui 2023; Zuo et al. 2022)."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        329.0357666015625,
        561.5951538085938,
        351.0126953125
      ],
      "text": "H3 Architecture: Training Recipes.\nNext we ablate differences between the Hyena and H3++ models, our weakest\nand strongest models outside of Transformer++ and Mamba, particularly to isolate the effect of training recipes."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        358.98309326171875,
        486.7032775878906,
        371.3373107910156
      ],
      "text": "• Hyena: The Hyena block with its original architecture and GPT3 training recipe (same as Figure 4)."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        376.91510009765625,
        436.8106994628906,
        389.2693176269531
      ],
      "text": "• Hyena+: The same architecture but with the improved training recipe described above."
    },
    {
      "page_no": 31,
      "bbox": [
        71.99999237060547,
        394.8481140136719,
        563.1378784179688,
        407.1815490722656
      ],
      "text": "• H3+: The same architecture as Hyena+ but with the Hyena convolution kernel swapped out for S4D convolution kernel."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        412.6824035644531,
        561.5980224609375,
        434.6986999511719
      ],
      "text": "• H3++: The same as H3+, but with a linear attention head dimension of 8. This increases computation inside the SSM\nrecurrence but does not increase parameters."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        442.7637939453125,
        561.6038208007812,
        464.5867004394531
      ],
      "text": "Our general convention is that “Model+” represents the base model with the improved training recipe, and “Model++” also\nallows for architectural changes."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        472.5570983886719,
        181.9724578857422,
        484.98272705078125
      ],
      "text": "Figure 9 (Right) shows that"
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        490.484130859375,
        561.6043090820312,
        512.40771484375
      ],
      "text": "• A large improvement is achieved by the improved training recipe, which was used for many of the models in the main\nFigure 4 (RetNet, H3++, Transformer++, Mamba)."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        520.3771362304688,
        551.0714111328125,
        530.3397216796875
      ],
      "text": "• The choice of the inner LTI SSM does not matter (e.g. Hyena vs. S4), consistent with findings throughout this paper."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        538.21142578125,
        561.5970458984375,
        560.2277221679688
      ],
      "text": "• The head dimension expansion improves performance, consistent with one of our main themes that expanded state\ndimension improves performance for SSMs (Section 3)."
    },
    {
      "page_no": 31,
      "bbox": [
        72.0,
        578.5027465820312,
        246.1661834716797,
        588.46533203125
      ],
      "text": "E.2.3\nDownstream Evaluation Details"
    },
    {
      "page_no": 31,
      "bbox": [
        71.63099670410156,
        594.4622192382812,
        561.932373046875,
        640.3046875
      ],
      "text": "This pretraining procedure is the same as the scaling law protocol, but extended to 300B tokens and with the GPT-NeoX\ntokenizer (Black et al. 2022) instead of GPT2 tokenizer. For the 1.3B model, we use a batch size of 1M tokens to be consistent\nwith the GPT3 specifications. We report the perplexity on the Pile validation set, and for this metric only compare to\nmodels trained on the same dataset and with the same tokenizer, in particular Pythia and RWKV."
    },
    {
      "page_no": 31,
      "bbox": [
        71.63099670410156,
        648.3447265625,
        561.6041259765625,
        670.1926879882812
      ],
      "text": "For downstream evaluation, we use the LM evaluation harness from EleutherAI (L. Gao, Tow, et al. 2021), as done by most\nwork in this area. We evaluate on the following tasks/datasets that measure common sense reasoning:"
    },
    {
      "page_no": 31,
      "bbox": [
        88.42799377441406,
        678.1631469726562,
        229.0210418701172,
        688.125732421875
      ],
      "text": "• LAMBADA (Paperno et al. 2016)"
    },
    {
      "page_no": 31,
      "bbox": [
        88.42799377441406,
        696.0961303710938,
        219.43698120117188,
        706.0587158203125
      ],
      "text": "• HellaSwag (Zellers et al. 2019)"
    },
    {
      "page_no": 31,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "31"
    },
    {
      "page_no": 32,
      "bbox": [
        88.4280014038086,
        72.90506744384766,
        187.8356170654297,
        82.86766815185547
      ],
      "text": "• PIQA (Bisk et al. 2020)"
    },
    {
      "page_no": 32,
      "bbox": [
        88.42799377441406,
        90.83805084228516,
        241.52374267578125,
        100.80065155029297
      ],
      "text": "• ARC-challenge (P. Clark et al. 2018)"
    },
    {
      "page_no": 32,
      "bbox": [
        88.42799377441406,
        108.77103424072266,
        275.3367919921875,
        118.73363494873047
      ],
      "text": "• ARC-easy: an easy subset of ARC-challenge"
    },
    {
      "page_no": 32,
      "bbox": [
        88.42799377441406,
        126.70401763916016,
        242.04132080078125,
        136.6666259765625
      ],
      "text": "• WinoGrande (Sakaguchi et al. 2021)"
    },
    {
      "page_no": 32,
      "bbox": [
        71.52200317382812,
        144.64105224609375,
        561.7889404296875,
        166.5546875
      ],
      "text": "We report accuracy for LAMBADA, WinoGrande, PIQA, and ARC-easy, and accuracy normalized by sequence length for\nHellaSwag and ARC-challenge (since normalized accuracy is higher for almost all models for these task)."
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        185.31617736816406,
        181.05532836914062,
        197.27137756347656
      ],
      "text": "E.3\nDNA Modeling"
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        205.18772888183594,
        189.04063415527344,
        215.15032958984375
      ],
      "text": "E.3.1\nPretraining Details"
    },
    {
      "page_no": 32,
      "bbox": [
        71.52200317382812,
        221.1621551513672,
        444.1929931640625,
        231.124755859375
      ],
      "text": "We describe the dataset and training procedure of the HG38 pretraining task in more detail."
    },
    {
      "page_no": 32,
      "bbox": [
        71.70099639892578,
        239.0951385498047,
        561.6033935546875,
        284.9226989746094
      ],
      "text": "The dataset follows the splits from the prior Enformer work on genomics (Avsec et al. 2021); the training split contains a\ntotal of 𝑆= 34021 segments of length 217 = 131072 that cover the genome, for a total of approximately 4.5 billion tokens\n(DNA base pairs). These segments are pairs of (chromosome number, starting index, ending index), and can be extended if\nnecessary (e.g. to get longer segments)."
    },
    {
      "page_no": 32,
      "bbox": [
        71.52200317382812,
        291.9541931152344,
        561.6021118164062,
        338.720703125
      ],
      "text": "We deviate from HyenaDNA when the training sequence length is not 217. HyenaDNA always takes a fixed sub-segment\n(e.g. the beginning or middle of the prescribed segment), and thus for any training sequence length each epoch is fixed\nto 34021 samples and doesn’t necessarily go through the whole genome. On the other hand, we use the entire training\ndata:"
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        345.753173828125,
        561.5961303710938,
        371.6578674316406
      ],
      "text": "• When the context length 𝐿is less than (or equal to) 217, we divide up each segment into non-overlapping sub-segments\nof length 𝐿, so that there are 𝑆× 217"
    },
    {
      "page_no": 32,
      "bbox": [
        217.6300048828125,
        358.0793151855469,
        433.13275146484375,
        373.51239013671875
      ],
      "text": "𝐿total samples and 𝑆× 217 ≈4.5𝐵tokens per epoch."
    },
    {
      "page_no": 32,
      "bbox": [
        71.99996948242188,
        376.97119140625,
        561.7897338867188,
        425.4568786621094
      ],
      "text": "• When the context length 𝐿is greater than 217, we turn each segment into two samples, one that begins with the prescribed\nsegment and one that ends with the prescribed segment. Thus each epoch has 2𝑆items and 2𝑆𝐿tokens per epoch. For\nexample, at sequence length 218 = 262144 there are 4× as many tokens as the default, and at sequence length 220 there\nare 16× as many tokens."
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        431.6083984375,
        561.7911987304688,
        465.5806884765625
      ],
      "text": "Other training details generally follow the same protocol as our language modeling experiments (Appendix E.2). For\nexample, we use the AdamW with (𝛽1, 𝛽2) = (0.9, 0.95), no dropout, weight decay 0.1. We use a cosine learning rate\nscheduler with linear warmup for 10% of total steps."
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        483.8547058105469,
        223.2621307373047,
        493.8172912597656
      ],
      "text": "E.3.2\nScaling: Model Size Details"
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        499.8290710449219,
        232.82662963867188,
        512.1832885742188
      ],
      "text": "Models.\nThe models we consider are:"
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        517.6683349609375,
        563.134765625,
        527.7251586914062
      ],
      "text": "• Transformer++: a Transformer with improved architecture, notably the usage of RoPE positional encodings (Su et al."
    },
    {
      "page_no": 32,
      "bbox": [
        80.47799682617188,
        529.7171020507812,
        557.3081665039062,
        539.6796875
      ],
      "text": "2021). Informally, we found these to be noticeably better than vanilla positional encodings from (Vaswani et al. 2017)."
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        547.6500854492188,
        561.59619140625,
        569.5676879882812
      ],
      "text": "• HyenaDNA: the Hyena model from Nguyen, Poli, et al. (2023) and Poli et al. (2023), which is roughly a Transformer with\nthe MHA block replaced by an H3 block using a global convolution parameterized by an MLP."
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        577.5381469726562,
        252.96044921875,
        587.500732421875
      ],
      "text": "• Mamba: the standard Mamba architecture."
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        603.3840942382812,
        274.39996337890625,
        615.73828125
      ],
      "text": "Model Sizes.\nWe use the following model sizes."
    },
    {
      "page_no": 32,
      "bbox": [
        161.83099365234375,
        624.6611328125,
        471.76776123046875,
        658.53466796875
      ],
      "text": "Blocks\n4\n5\n6\n7\n8\n10\n12\nModel Dimension\n64\n96\n128\n192\n256\n384\n512\nParams (Approx.)\n250K\n700K\n1.4M\n3.5M\n7.0M\n19.3M\n40.7M"
    },
    {
      "page_no": 32,
      "bbox": [
        72.0,
        669.0968627929688,
        561.5978393554688,
        690.9796752929688
      ],
      "text": "Note that the number of blocks for Mamba is doubled, because one Transformer “layer” includes both the MHA and MLP\nblocks (and similarly for Hyena), which requires two Mamba blocks to match parameters (Section 3.4)."
    },
    {
      "page_no": 32,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "32"
    },
    {
      "page_no": 33,
      "bbox": [
        72.0,
        72.95478820800781,
        561.6027221679688,
        130.688720703125
      ],
      "text": "Training.\nFor each model (Transformer++, HyenaDNA, Mamba), we swept the learning rate across {1𝑒−3, 2𝑒−3, 4𝑒−\n3, 8𝑒−3}. The optimal Transformer and HyenaDNA learning rates were 2e-3 across all sizes. The optimal Mamba learning\nrate was 8e-3; note that Mamba performed better than baselines with matched learning rates (2e-3), but was more stable\nand improved even more at higher learning rates. (Furthermore, as this LR is on the upper range of the sweep, it is possible\nthat our results are still suboptimal.)"
    },
    {
      "page_no": 33,
      "bbox": [
        72.0,
        138.65414428710938,
        561.9710083007812,
        172.53167724609375
      ],
      "text": "Note that, in contrast to standard LM scaling laws (Table 12), our LR held constant across model sizes for simplicity. The\noptimal LR should go down for larger models, but we didn’t find a noticeable effect at the small model sizes (at most a few\nmillion parameters) we considered."
    },
    {
      "page_no": 33,
      "bbox": [
        72.0,
        190.8066864013672,
        245.3093719482422,
        200.769287109375
      ],
      "text": "E.3.3\nScaling: Context Length Details"
    },
    {
      "page_no": 33,
      "bbox": [
        71.52200317382812,
        203.06539916992188,
        561.6015625,
        252.60870361328125
      ],
      "text": "We use a total batch size of 224 ≈16𝑀tokens per training step, for every sequence length (e.g. at length 220 there are\n16 segments per batch and at length 210 there are 16384 segments per batch). This is a large batch size relative to the\nmodel size by usual LM standards, but note that a batch size of 223 is the minimum possible on a machine with 8 GPUs and\nsequence length of 220, and that HyenaDNA used much larger batches of 228."
    },
    {
      "page_no": 33,
      "bbox": [
        71.70099639892578,
        260.67877197265625,
        561.6005249023438,
        282.6976318359375
      ],
      "text": "The learning rate used was 0.008 for Mamba and 0.001 for HyenaDNA; we initially attempted to use the same learning rate\nof 0.002 from the previous section for HyenaDNA, but found that it was unstable at the longest context length."
    },
    {
      "page_no": 33,
      "bbox": [
        71.70099639892578,
        298.2814025878906,
        563.1348266601562,
        357.8818664550781
      ],
      "text": "Sequence Length Warmup.\nFollowing (Nguyen, Poli, et al. 2023), we use sequence length warmup (SLW) during\npretraining. We choose a simple schedule of 2 epochs at each power-of-two sequence length starting from 210 = 1024.\n(Note that because of how data is curated, at the longest sequence lengths more steps and tokens are spent proportionally.\nIn particular, each stage up to length 217 processes the same number of tokens, but 4× as many tokens are processed at\nlength 218, 8× as many at length 219, and 16× as many at length 220.)"
    },
    {
      "page_no": 33,
      "bbox": [
        72.0,
        364.0343933105469,
        561.8622436523438,
        386.0506896972656
      ],
      "text": "Unlike HyenaDNA, we always control for the number of tokens per gradient update, so the batch size is successively\nhalved as the sequence lengths are doubled in each stage."
    },
    {
      "page_no": 33,
      "bbox": [
        72.0,
        396.3377990722656,
        561.6031494140625,
        430.35772705078125
      ],
      "text": "Remark E.1. We also note that the schedule was not tuned, and we never experimented with turning off sequence length\nwarmup for these pretraining experiments. We later found that SLW did not help noticeably for audio pretraining at similar\nlengths (Section 4.4), and it is possible that it is not necessary for DNA pretraining either."
    },
    {
      "page_no": 33,
      "bbox": [
        72.0,
        446.1687316894531,
        258.1910095214844,
        456.1313171386719
      ],
      "text": "E.3.4\nSpecies (Great Apes) Classification"
    },
    {
      "page_no": 33,
      "bbox": [
        71.63099670410156,
        462.0837707519531,
        561.6026611328125,
        531.8817138671875
      ],
      "text": "Models are causal and therefore only the last element (across the sequence length) of the model’s output is used for the\nclassification head. Note that we control for the total number of elements in the loss function per gradient step. The\npretraining objective includes all positions across the sequence length, so that batch_size × sequence_length is held\nconstant; in other words, the batch size decreases as the sequence length increases. However, for a classification task, since\nonly the last position enters the loss, the batch size itself is held constant. Note that this also means that fine-tuning models\nwith longer sequence lengths is more computationally expensive."
    },
    {
      "page_no": 33,
      "bbox": [
        71.70099639892578,
        539.891845703125,
        561.8623657226562,
        573.7247314453125
      ],
      "text": "Training consists of 10 epochs, each of which has 1024 gradient steps. Each gradient step uses batch size 64, which are all\nindependently randomly drawn by uniformly picking a species, uniformly picking a chromosome, and then uniformly\npicking a contiguous segment of DNA."
    },
    {
      "page_no": 33,
      "bbox": [
        71.63099670410156,
        580.0776977539062,
        561.6033325195312,
        627.522705078125
      ],
      "text": "Following (Nguyen, Poli, et al. 2023), models with a maximum context length greater than 214 = 16384 use sequence length\nwarmup with 1 epoch at length 214 = 16384, 1 epoch at length 215 = 32768, 1 epoch at length 216 = 65536, and so on up to\nthe maximum sequence length. For example, the model with 220 = 1048576 context undergoes 6 epochs of sequence length\nwarmup before 4 more epochs at its maximum sequence length."
    },
    {
      "page_no": 33,
      "bbox": [
        71.70099639892578,
        635.5927734375,
        561.6049194335938,
        718.9058837890625
      ],
      "text": "The learning rate for all Hyena models is 4e −5, while the learning rate for all Mamba models is 1e −4. These were found\nby performing learning rate sweeps for each model among {1𝑒−5, 2𝑒−5, 4𝑒−5, 1𝑒−4, 2𝑒−4} for the smaller sequence\nlengths (210, 212, 214, 216), and these values were consistently found to be the best for each model. An abridged learning rate\nsweep was done at length 218, which agreed with these values, and a single run at length 220 was performed (as described\nabove, the computational cost of these experiments is proportional to the sequence length). The learning rate followed\na cosine decay schedule with warmup with 5 epochs of linear warmup to the maximum learning rate, and 5 epochs of\ncosine decay down to 1𝑒−6. The unusually long learning rate warmup schedule was chosen because the sequence length"
    },
    {
      "page_no": 33,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "33"
    },
    {
      "page_no": 34,
      "bbox": [
        71.73100280761719,
        70.09721374511719,
        561.6000366210938,
        91.5913314819336
      ],
      "text": "Table 13: (Great Apes DNA Classification.) Accuracy after fine-tuning on sequences of length 210 = 1024 up to 220 = 1048576 using\npretrained models of the same context length. Random guessing is 20%."
    },
    {
      "page_no": 34,
      "bbox": [
        170.94200134277344,
        106.83609771728516,
        438.4179992675781,
        116.79869842529297
      ],
      "text": "Model\nParams\nAccuracy (%) at Seqence Length"
    },
    {
      "page_no": 34,
      "bbox": [
        273.8659973144531,
        122.65422058105469,
        448.6496276855469,
        133.55572509765625
      ],
      "text": "210\n212\n214\n216\n218\n220"
    },
    {
      "page_no": 34,
      "bbox": [
        170.94200134277344,
        140.5491180419922,
        460.1670227050781,
        164.85833740234375
      ],
      "text": "HyenaDNA\n1.4M\n28.04\n28.43\n41.17\n42.22\n31.10\n54.87\nMamba\n1.4M\n31.47\n27.50\n27.66\n40.72\n42.41\n71.67"
    },
    {
      "page_no": 34,
      "bbox": [
        170.94200134277344,
        169.4601287841797,
        460.1670227050781,
        181.8143310546875
      ],
      "text": "Mamba\n7M\n30.00\n29.01\n31.48\n43.73\n56.60\n81.31"
    },
    {
      "page_no": 34,
      "bbox": [
        187.00399780273438,
        195.46189880371094,
        446.330322265625,
        204.4282989501953
      ],
      "text": "Table 14: YouTubeMix length scaling sequence lengths and batch sizes."
    },
    {
      "page_no": 34,
      "bbox": [
        213.8209991455078,
        219.67308044433594,
        424.4703063964844,
        229.63568115234375
      ],
      "text": "Seqence length\nBatch size\nTokens / batch"
    },
    {
      "page_no": 34,
      "bbox": [
        206.63800048828125,
        236.6290740966797,
        391.2655944824219,
        332.2772521972656
      ],
      "text": "468 × 2048 = 958464\n1\n958464\n234 × 2048 = 479232\n2\n958464\n117 × 2048 = 239616\n4\n958464\n59 × 2048 = 120832\n8\n966656\n30 × 2048 = 61440\n16\n983040\n15 × 2048 = 30720\n32\n983040\n8 × 2048 = 16384\n64\n1048576\n4 × 2048 = 8192\n128\n1048576"
    },
    {
      "page_no": 34,
      "bbox": [
        71.63099670410156,
        353.93218994140625,
        561.5968627929688,
        376.7886962890625
      ],
      "text": "warmup was also long (e.g. comprising 6 out of 10 epochs for the model with context length 220); we did not experiment\nwith this choice."
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        384.7580871582031,
        301.6976013183594,
        394.720703125
      ],
      "text": "Results for the Species classification task are in Table 13."
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        413.17620849609375,
        173.8105010986328,
        425.13140869140625
      ],
      "text": "E.4\nAudio Details"
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        433.0477294921875,
        244.46258544921875,
        443.01031494140625
      ],
      "text": "E.4.1\nYouTubeMix Audio Pretraining"
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        448.92340087890625,
        561.7882690429688,
        472.9393005371094
      ],
      "text": "Model.\nWe use a model with 3 blocks per stage (3 × 5 = 15 total Mamba blocks), pooling factor 𝑝= 16, and outer\ndimension 𝐷= 64, for about 3.5M parameters."
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        486.5757751464844,
        533.2464599609375,
        498.85565185546875
      ],
      "text": "Dataset.\nThe data is mu-law encoded at 8 bits, so the model is modeling discrete tokens with a vocab size of 256."
    },
    {
      "page_no": 34,
      "bbox": [
        71.70099639892578,
        504.54779052734375,
        561.8609619140625,
        550.2763061523438
      ],
      "text": "The dataset consists of clips of up to 1 minute long, or length 960000, which is subsampled and divided into segments of any\ndesired sequence length. Since the architecture involves two stages of pooling by a factor of 16, and we want the resulting\nsequence length to be a a multiple of 8 for hardware efficiency, the longest possible sequence is 468 × 2048 = 958464. The\nrest of our sequence lengths are defined by successively halving this and rounding up to the nearest multiple of 2048."
    },
    {
      "page_no": 34,
      "bbox": [
        71.70099639892578,
        558.1484375,
        561.7887573242188,
        592.1196899414062
      ],
      "text": "Table 14 lists the specifications used in Figure 7. Beyond the varying batch sizes, the number of valid segments in the\ntraining set varied between different sequence lengths (e.g. the number of training steps per epoch was not constant for\ndifferent points in the graph), which may have contributed to kinks in the scaling curves."
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        607.7857666015625,
        562.6939697265625,
        629.8146362304688
      ],
      "text": "Training.\nModels were trained for 200𝐾training steps with a maximum learning rate of 0.002, 20𝐾(10%) warmup steps,\nand weight decay 0.1 (similar to our general pretraining recipe across domains)."
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        645.2738037109375,
        561.6011352539062,
        691.2186279296875
      ],
      "text": "Additional Ablations: SSM Parameterizations.\nWe investigate SSM parameterizations on long-form audio waveform\npretraining in the setting of Figure 7. The setting is modified slightly to use larger models (8 layers and 𝐷= 64 for 6M\nparams, the SaShiMi default), shorter sequences (211 = 2048 to 218 = 262144 instead of 213 to 220), lower LR (0.001 from\n0.002), and shorter training cycles (100K instead of 200K steps)."
    },
    {
      "page_no": 34,
      "bbox": [
        72.0,
        698.889404296875,
        561.604248046875,
        720.9057006835938
      ],
      "text": "Figure 10 shows that the change from S4 →S6 (i.e. the selection mechanism) is not always beneficial. On long-form\naudio waveforms, it in fact significantly hampers performance, which may be intuitive from the point of view that audio"
    },
    {
      "page_no": 34,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "34"
    },
    {
      "page_no": 35,
      "bbox": [
        165.531982421875,
        167.1918182373047,
        264.4900817871094,
        173.95835876464844
      ],
      "text": "104\n105"
    },
    {
      "page_no": 35,
      "bbox": [
        178.54257202148438,
        173.69415283203125,
        227.2223663330078,
        181.97689819335938
      ],
      "text": "Sequence Length"
    },
    {
      "page_no": 35,
      "bbox": [
        82.93424224853516,
        151.01182556152344,
        92.7989501953125,
        157.51968383789062
      ],
      "text": "1.25"
    },
    {
      "page_no": 35,
      "bbox": [
        82.93424224853516,
        138.7951202392578,
        92.7989501953125,
        145.302978515625
      ],
      "text": "1.30"
    },
    {
      "page_no": 35,
      "bbox": [
        82.93424224853516,
        126.57843017578125,
        92.7989501953125,
        133.08628845214844
      ],
      "text": "1.35"
    },
    {
      "page_no": 35,
      "bbox": [
        82.93424224853516,
        114.36172485351562,
        92.7989501953125,
        120.86958312988281
      ],
      "text": "1.40"
    },
    {
      "page_no": 35,
      "bbox": [
        82.93424224853516,
        102.14503479003906,
        92.7989501953125,
        108.65289306640625
      ],
      "text": "1.45"
    },
    {
      "page_no": 35,
      "bbox": [
        82.93424224853516,
        89.92832946777344,
        92.7989501953125,
        96.43619537353516
      ],
      "text": "1.50"
    },
    {
      "page_no": 35,
      "bbox": [
        73.23019409179688,
        105.89958953857422,
        81.51292419433594,
        142.21763610839844
      ],
      "text": "Bits Per Byte"
    },
    {
      "page_no": 35,
      "bbox": [
        143.57431030273438,
        74.15342712402344,
        262.15216064453125,
        82.4361572265625
      ],
      "text": "Audio Waveforms - SSM Parameterization"
    },
    {
      "page_no": 35,
      "bbox": [
        272.9076843261719,
        86.32493591308594,
        304.29541015625,
        128.9182891845703
      ],
      "text": "S4+MLP\nMamba (S6)\n+complex\n-selective B/C\n-selective \n   (Mamba-S4)"
    },
    {
      "page_no": 35,
      "bbox": [
        412.7349853515625,
        167.1918182373047,
        511.6930847167969,
        173.95835876464844
      ],
      "text": "104\n105"
    },
    {
      "page_no": 35,
      "bbox": [
        425.7455749511719,
        173.69415283203125,
        474.42535400390625,
        181.97689819335938
      ],
      "text": "Sequence Length"
    },
    {
      "page_no": 35,
      "bbox": [
        330.1372375488281,
        149.77833557128906,
        340.001953125,
        156.28619384765625
      ],
      "text": "1.25"
    },
    {
      "page_no": 35,
      "bbox": [
        330.1372375488281,
        135.75811767578125,
        340.001953125,
        142.26597595214844
      ],
      "text": "1.30"
    },
    {
      "page_no": 35,
      "bbox": [
        330.1372375488281,
        121.73788452148438,
        340.001953125,
        128.24574279785156
      ],
      "text": "1.35"
    },
    {
      "page_no": 35,
      "bbox": [
        330.1372375488281,
        107.71766662597656,
        340.001953125,
        114.22552490234375
      ],
      "text": "1.40"
    },
    {
      "page_no": 35,
      "bbox": [
        330.1372375488281,
        93.69744873046875,
        340.001953125,
        100.20530700683594
      ],
      "text": "1.45"
    },
    {
      "page_no": 35,
      "bbox": [
        320.4331970214844,
        105.89958953857422,
        328.7159118652344,
        142.21763610839844
      ],
      "text": "Bits Per Byte"
    },
    {
      "page_no": 35,
      "bbox": [
        390.7773132324219,
        74.15342712402344,
        509.35516357421875,
        82.4361572265625
      ],
      "text": "Audio Waveforms - SSM Parameterization"
    },
    {
      "page_no": 35,
      "bbox": [
        520.1107177734375,
        86.51983642578125,
        551.4984130859375,
        121.79725646972656
      ],
      "text": "Mamba (S6)\n+complex\n-selective B/C\n-selective \n   (Mamba-S4)"
    },
    {
      "page_no": 35,
      "bbox": [
        71.73100280761719,
        193.5856170654297,
        563.1168212890625,
        226.59608459472656
      ],
      "text": "Figure 10: (Audio Pretraining (YouTubeMix) Ablations.) As a uniformly-sampled “continuous” signal modality, audio waveforms actu-\nally benefit from LTI models which have matching inductive bias. (Left) Homogenous models (all blocks have the same parameterization)\n(Right) Only the center U-Net blocks are ablated; the outer blocks are Mamba-S4. Purple line is same as figure on left."
    },
    {
      "page_no": 35,
      "bbox": [
        71.6510009765625,
        247.49838256835938,
        563.1328125,
        281.4696960449219
      ],
      "text": "is uniformly sampled and very smooth, and therefore benefits from continuous linear time-invariant (LTI) methods.\nAfter ablating away the selection mechanism, note that the resulting model is the S4 layer inside the Mamba block. To\ndisambiguate, we call this Mamba-S4 as opposed the default Mamba architecture Mamba-S6."
    },
    {
      "page_no": 35,
      "bbox": [
        72.0,
        289.3414001464844,
        561.6026000976562,
        335.2687072753906
      ],
      "text": "However, on the right side, we keep the outer layers of the U-Net Mamba-S4 and ablate only the inner layers. The\nperformance differences shrink dramatically; this reinforces the hypothesis that layers closer to the raw audio signal should\nbe LTI, but once they are “tokenized” and compressed by the outer layers, the inner layers no longer need to be LTI. In this\nsetting however, the real-valued SSM still underperforms the complex-valued one."
    },
    {
      "page_no": 35,
      "bbox": [
        72.0,
        353.542724609375,
        212.76153564453125,
        363.50531005859375
      ],
      "text": "E.4.2\nSC09 Speech Generation"
    },
    {
      "page_no": 35,
      "bbox": [
        71.6510009765625,
        369.51708984375,
        463.77880859375,
        379.4797058105469
      ],
      "text": "Autoregressive training largely followed the autoregressive language modeling protocol, such as"
    },
    {
      "page_no": 35,
      "bbox": [
        88.4280014038086,
        387.4501037597656,
        166.02760314941406,
        397.6136474609375
      ],
      "text": "• Weight decay 0.1"
    },
    {
      "page_no": 35,
      "bbox": [
        88.42798614501953,
        405.38311767578125,
        275.2673645019531,
        415.3457336425781
      ],
      "text": "• Learning rate warmup for 10% of total steps"
    },
    {
      "page_no": 35,
      "bbox": [
        88.427978515625,
        423.3161315917969,
        251.77249145507812,
        435.2783508300781
      ],
      "text": "• AdamW optimizer with 𝛽= (0.9, 0.95)"
    },
    {
      "page_no": 35,
      "bbox": [
        88.42794799804688,
        441.2481384277344,
        188.63255310058594,
        451.41168212890625
      ],
      "text": "• Gradient clip value 0.1"
    },
    {
      "page_no": 35,
      "bbox": [
        71.52194213867188,
        459.18115234375,
        391.87969970703125,
        469.3446960449219
      ],
      "text": "We used a learning rate of 0.002 and 200000 training steps at a batch size of 16."
    },
    {
      "page_no": 35,
      "bbox": [
        71.70099639892578,
        477.015380859375,
        561.6046142578125,
        510.986572265625
      ],
      "text": "The large Mamba model in Table 4 has 15 layers per stage with an outer dimension of 𝐷= 96 and pooling factor 4. We\nnote that this dataset is small (training went through 100 epochs) and for this large model, there was significant overfitting\nof the BPB or NLL. However, automated metrics of generated samples continually improving throughout training."
    },
    {
      "page_no": 35,
      "bbox": [
        71.70099639892578,
        518.8583984375,
        561.7899780273438,
        564.78466796875
      ],
      "text": "The models in the architecture ablations in Table 5 all have 8 layers per stage with an outer dimension of D = 64 and\npooling factor 4. The S4+MLP block has roughly 2𝐷2 + 4𝐷2 parameters (expansion factor 2 in the MLP). The Transformer\nblock has 4𝐷2 + 2𝐷2 parameters (expansion factor 1 in the MLP). The Mamba block has the usual ≈6𝐷2 parameters. All\nmodels have roughly 6M total parameters."
    },
    {
      "page_no": 35,
      "bbox": [
        72.0,
        583.5471801757812,
        219.71847534179688,
        595.5023803710938
      ],
      "text": "E.5\nEfficiency Benchmark"
    },
    {
      "page_no": 35,
      "bbox": [
        72.0,
        600.9284057617188,
        561.6026611328125,
        646.854736328125
      ],
      "text": "Scan Operation.\nWe compare the core operation of selective SSMs, which is the parallel scan (Section 3.3), against\nconvolution and attention, measured on an A100 80GB PCIe GPU. Note that these do not include the cost of other operations\noutside of this core operation, such as computing the convolutional kernel in global-convolution models, or computing the\nQKV projections in attention."
    },
    {
      "page_no": 35,
      "bbox": [
        71.6510009765625,
        654.7264404296875,
        561.5947875976562,
        679.181640625
      ],
      "text": "As a baseline, we implement a standard parallel scan in PyTorch with no kernel fusion. This requires materializing the\nparameters 𝑨, 𝑩, 𝑪in HBM."
    },
    {
      "page_no": 35,
      "bbox": [
        72.0,
        684.7877807617188,
        561.5980834960938,
        706.6306762695312
      ],
      "text": "Our scan implementation fuses the discretization step and the parallel scan, avoiding the cost of materializing all the large\nparameters in HBM."
    },
    {
      "page_no": 35,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "35"
    },
    {
      "page_no": 36,
      "bbox": [
        71.73100280761719,
        71.51712036132812,
        561.5957641601562,
        91.53133392333984
      ],
      "text": "Table 15: (Memory benchmark.) Mamba’s memory footprint is comparable to the most optimized Transformer. Results for 125M\nmodels."
    },
    {
      "page_no": 36,
      "bbox": [
        197.3730010986328,
        106.7761001586914,
        433.735595703125,
        116.73870086669922
      ],
      "text": "Batch size\nTransformer (w/ FlashAttention-2)\nMamba"
    },
    {
      "page_no": 36,
      "bbox": [
        197.3730010986328,
        123.73209381103516,
        432.2611389160156,
        193.47076416015625
      ],
      "text": "1\n4.6GB\n4.8GB\n2\n5.2GB\n5.8GB\n4\n6.9GB\n7.3GB\n8\n11.5GB\n12.3GB\n16\n20.7GB\n23.1GB\n32\n34.5GB\n38.2GB"
    },
    {
      "page_no": 36,
      "bbox": [
        72.0,
        219.4851837158203,
        561.8605346679688,
        255.08685302734375
      ],
      "text": "For convolution, we use the standard implementation in PyTorch, which separately performs FFTs on the inputs and the\nfilters, multiply them in frequency domain, then performs an inverse FFT to obtain the result. The theoretical complexity\nis 𝑂(𝐿log(𝐿)) for sequence length 𝐿."
    },
    {
      "page_no": 36,
      "bbox": [
        72.0,
        261.43780517578125,
        561.8568115234375,
        295.210693359375
      ],
      "text": "For attention, we compare against the fastest implementation that we are aware of (FlashAttention-2 (Dao 2024)), with causal\nmask. Note that FlashAttention-2 with causal mask is about 1.7× faster than without causal mask, since approximately\nonly half of the attention entries are computed."
    },
    {
      "page_no": 36,
      "bbox": [
        71.52200317382812,
        301.2832946777344,
        563.1341552734375,
        337.0537109375
      ],
      "text": "We use batch size of 1 and increase the sequence length from 29 = 512, 210 ≈1𝐾, 211 ≈2𝐾, up to 219 ≈500𝐾(some of the\nbaselines run out of memory before reaching 500K). We use a model dimension of 𝐷= 1024 and state dimension 𝑁= 16.\nWe measure with BF16 inputs, which is the data type most commonly used for large scale training."
    },
    {
      "page_no": 36,
      "bbox": [
        72.0,
        352.8876037597656,
        561.7913208007812,
        388.8495178222656
      ],
      "text": "End-to-end Inference.\nWe measure the inference throughput of a Mamba 1.4B model and an untrained Mamba 6.9B\nmodel, against a standard Transformer (GPT3 architecture) at 1.3B and 6.7B size. We use the standard Transformer\nimplementation in the Huggingface transformers library."
    },
    {
      "page_no": 36,
      "bbox": [
        71.52200317382812,
        394.681396484375,
        562.6953125,
        440.6076965332031
      ],
      "text": "We set the prompt length to be 2048 and the generation length to be 128. We vary the batch size from 1, 2, 4, 8, 16,\n32, 64, to 128, and measure time time taken to generate 128 tokens. We then calculate the throughput (tokens/s) as\nbatch size × 128/time taken. We repeat the measurements 3 times and take the average. Measurements are done on an\nA100 80GB PCIe GPU."
    },
    {
      "page_no": 36,
      "bbox": [
        72.0,
        456.39239501953125,
        562.6995239257812,
        526.229736328125
      ],
      "text": "Memory Benchmark.\nThe memory usage simply scales proportionally to the size of the activation tensors, as with\nmost deep sequence models. We report measurements of the training memory requirements of 125M models on 1 A100\n80GB GPU. Each batch consists of sequences of length 2048. We compare to the most memory-efficient Transformer\nimplementation we are aware of (with kernel fusion from torch.compile and with FlashAttention-2). Table 15 shows that\nMamba’s memory requirement is comparable to a similar-sized Transformer with an extremely optimized implementation,\nand we expect further improvement in Mamba’s memory footprint in the future."
    },
    {
      "page_no": 36,
      "bbox": [
        312.1669921875,
        740.8311157226562,
        321.43218994140625,
        750.793701171875
      ],
      "text": "36"
    }
  ],
  "pictures": [],
  "tables": [
    {
      "page_no": 1,
      "index": 1,
      "flavor": "stream",
      "nrows": 17,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p1_table1_stream.csv"
    },
    {
      "page_no": 1,
      "index": 2,
      "flavor": "stream",
      "nrows": 20,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p1_table2_stream.csv"
    },
    {
      "page_no": 2,
      "index": 1,
      "flavor": "stream",
      "nrows": 32,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p2_table1_stream.csv"
    },
    {
      "page_no": 2,
      "index": 2,
      "flavor": "stream",
      "nrows": 17,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p2_table2_stream.csv"
    },
    {
      "page_no": 3,
      "index": 1,
      "flavor": "lattice",
      "nrows": 4,
      "ncols": 4,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p3_table1_lattice.csv"
    },
    {
      "page_no": 3,
      "index": 2,
      "flavor": "lattice",
      "nrows": 4,
      "ncols": 4,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p3_table2_lattice.csv"
    },
    {
      "page_no": 4,
      "index": 1,
      "flavor": "stream",
      "nrows": 47,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p4_table1_stream.csv"
    },
    {
      "page_no": 5,
      "index": 1,
      "flavor": "stream",
      "nrows": 46,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p5_table1_stream.csv"
    },
    {
      "page_no": 6,
      "index": 1,
      "flavor": "stream",
      "nrows": 22,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p6_table1_stream.csv"
    },
    {
      "page_no": 6,
      "index": 2,
      "flavor": "stream",
      "nrows": 12,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p6_table2_stream.csv"
    },
    {
      "page_no": 7,
      "index": 1,
      "flavor": "stream",
      "nrows": 45,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p7_table1_stream.csv"
    },
    {
      "page_no": 8,
      "index": 1,
      "flavor": "lattice",
      "nrows": 2,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p8_table1_lattice.csv"
    },
    {
      "page_no": 9,
      "index": 1,
      "flavor": "stream",
      "nrows": 50,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p9_table1_stream.csv"
    },
    {
      "page_no": 10,
      "index": 1,
      "flavor": "stream",
      "nrows": 44,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p10_table1_stream.csv"
    },
    {
      "page_no": 12,
      "index": 1,
      "flavor": "stream",
      "nrows": 10,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p12_table1_stream.csv"
    },
    {
      "page_no": 12,
      "index": 2,
      "flavor": "stream",
      "nrows": 29,
      "ncols": 11,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p12_table2_stream.csv"
    },
    {
      "page_no": 16,
      "index": 1,
      "flavor": "stream",
      "nrows": 9,
      "ncols": 8,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p16_table1_stream.csv"
    },
    {
      "page_no": 16,
      "index": 2,
      "flavor": "stream",
      "nrows": 18,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p16_table2_stream.csv"
    },
    {
      "page_no": 17,
      "index": 1,
      "flavor": "stream",
      "nrows": 28,
      "ncols": 6,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p17_table1_stream.csv"
    },
    {
      "page_no": 18,
      "index": 1,
      "flavor": "stream",
      "nrows": 41,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p18_table1_stream.csv"
    },
    {
      "page_no": 18,
      "index": 2,
      "flavor": "stream",
      "nrows": 58,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p18_table2_stream.csv"
    },
    {
      "page_no": 19,
      "index": 1,
      "flavor": "stream",
      "nrows": 57,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p19_table1_stream.csv"
    },
    {
      "page_no": 20,
      "index": 1,
      "flavor": "stream",
      "nrows": 63,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p20_table1_stream.csv"
    },
    {
      "page_no": 21,
      "index": 1,
      "flavor": "stream",
      "nrows": 58,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p21_table1_stream.csv"
    },
    {
      "page_no": 22,
      "index": 1,
      "flavor": "stream",
      "nrows": 40,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p22_table1_stream.csv"
    },
    {
      "page_no": 22,
      "index": 2,
      "flavor": "stream",
      "nrows": 60,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p22_table2_stream.csv"
    },
    {
      "page_no": 23,
      "index": 1,
      "flavor": "stream",
      "nrows": 8,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p23_table1_stream.csv"
    },
    {
      "page_no": 24,
      "index": 1,
      "flavor": "stream",
      "nrows": 43,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p24_table1_stream.csv"
    },
    {
      "page_no": 25,
      "index": 1,
      "flavor": "stream",
      "nrows": 29,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p25_table1_stream.csv"
    },
    {
      "page_no": 26,
      "index": 1,
      "flavor": "stream",
      "nrows": 13,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p26_table1_stream.csv"
    },
    {
      "page_no": 27,
      "index": 1,
      "flavor": "stream",
      "nrows": 21,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p27_table1_stream.csv"
    },
    {
      "page_no": 28,
      "index": 1,
      "flavor": "stream",
      "nrows": 20,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p28_table1_stream.csv"
    },
    {
      "page_no": 29,
      "index": 1,
      "flavor": "stream",
      "nrows": 11,
      "ncols": 17,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p29_table1_stream.csv"
    },
    {
      "page_no": 30,
      "index": 1,
      "flavor": "stream",
      "nrows": 7,
      "ncols": 8,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p30_table1_stream.csv"
    },
    {
      "page_no": 30,
      "index": 2,
      "flavor": "stream",
      "nrows": 12,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p30_table2_stream.csv"
    },
    {
      "page_no": 31,
      "index": 1,
      "flavor": "stream",
      "nrows": 31,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p31_table1_stream.csv"
    },
    {
      "page_no": 32,
      "index": 1,
      "flavor": "stream",
      "nrows": 21,
      "ncols": 2,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p32_table1_stream.csv"
    },
    {
      "page_no": 33,
      "index": 1,
      "flavor": "stream",
      "nrows": 47,
      "ncols": 1,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p33_table1_stream.csv"
    },
    {
      "page_no": 34,
      "index": 1,
      "flavor": "stream",
      "nrows": 11,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p34_table1_stream.csv"
    },
    {
      "page_no": 36,
      "index": 1,
      "flavor": "stream",
      "nrows": 8,
      "ncols": 3,
      "csv_path": "../data/parsed_documents/2312.00752/2312.00752_p36_table1_stream.csv"
    }
  ]
}